require('whatwg-fetch');

const LocalSdk = function(host, timeoutInt) {
  this.host = host || '192.168.4.1';
  this.BASE = `http://${this.host}/command/`;
  this.TimeoutInterval  = timeoutInt || 20000;

  const ref = this;

  this.sendReq = function(url, callback, data) {

    return new Promise((resolve, reject) => {
      const timeout = setTimeout(() => {
        const data = {
          error: 2,
          msg: 'Request Timeout'
        };

        callback(data);
        reject(data);

        callback = undefined;
      }, ref.TimeoutInterval);

      let extra = null;

      if (data) {
        extra = {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        };
      }

      fetch(ref.BASE + url, extra)
        .then((response) => {
          return response.json();
        }).then((res) => {
        clearTimeout(timeout)

        if (callback) {
          callback(res);
        }

        resolve(res);
      }).catch((ex) => {
        const data = {};
        data.error = 1;
        data.msg = ex;
        clearTimeout(timeout)

        if (callback) {
          callback(data);
        }
        reject(data);
      });
    });
  };

  this.getFanMode = function(value) {
    switch (value) {
      case 'high': return 1;
      case 'mid': return 2;
      case 'low': return 3;
      case 'auto': return 4;
      default: return 0;
    }
  };

  this.getThermostatMode = function(value) {
    switch (value) {
      case 'auto': return 5;
      case 'fan': return 4;
      case 'heat': return 3;
      case 'dry': return 2;
      case 'cool': return 1;
      default: return 0;
    }
  };

  this.getList = function(callback) {
    this.sendReq('getList', callback);
  };

  this.setWifi = function(data, callback) {
    this.sendReq('setWifi', callback, data);
  };

  this.disableAp = function(data, callback) {
    this.sendReq('disableAp', callback, data);
  };

  this.configure = function(data, callback) {
    if (typeof data.mqtt !== 'undefined' && typeof data.mqtt.ip !== 'undefined') {
      data.mqtt.ip = data.mqtt.ip.split('.');
      this.sendReq('configure', callback, data);
    } else {
      const retData = { error:1, msg:'Required parameters are missing.' };
      callback(retData);
    }
  };

  this.setStandby = function(data, callback) {
    if (typeof data.standby !== 'undefined') this.sendReq('setStandby', callback, data);
    else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }
  };

  this.setHorizontalAirFlowDirection = function(data, callback) {
    if (typeof data.horizontalAirFlowDirection !== 'undefined') this.sendReq('setHorizontalAirFlowDirection', callback, data);
    else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }
  };

  this.setVerticalAirFlowDirection = function(data, callback) {
    if (typeof data.verticalAirFlowDirection !== 'undefined') this.sendReq('setVerticalAirFlowDirection', callback, data);
    else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }
  };

  this.setThermostatSetpoint = function(data, callback) {
    if (typeof data.thermostatSetpoint !== 'undefined') this.sendReq('setThermostatSetpoint', callback, data);
    else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }
  };

  this.setThermostatFanMode = function(data, callback) {
    if (typeof data.thermostatFanMode !== 'undefined') {
      data.thermostatFanMode = this.getFanMode(data.thermostatFanMode);
      this.sendReq('setThermostatFanMode', callback, data);
    } else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }

  };

  this.setThermostatMode = function(data, callback) {
    if (typeof data.thermostatMode !== 'undefined' && typeof data.thermostatFanMode !== 'undefined'
      && typeof data.thermostatSetpoint !== 'undefined') {
      data.thermostatMode = this.getThermostatMode(data.thermostatMode);
      data.thermostatFanMode = this.getFanMode(data.thermostatFanMode);
      this.sendReq('setThermostatMode', callback, data);
    } else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }

  };

  this.refresh = function(data, callback) {
    if (typeof data !== 'undefined') this.sendReq('refresh', callback, data);
    else this.sendReq('refresh', callback);
  };

  this.getStatus = function(data, callback) {
    if (typeof data !== 'undefined' && Object.keys(data).length > 0) this.sendReq('getStatus', callback, data);
    else {
      const retData = { error:1, msg:'Required parameter is missing.' };
      callback(retData);
    }
  };
};

module.exports = LocalSdk;