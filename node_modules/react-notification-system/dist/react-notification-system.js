(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react"), require("react-dom")) : factory(root["React"], root["ReactDOM"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_6__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var merge = __webpack_require__(3);
	var NotificationContainer = __webpack_require__(4);
	var Constants = __webpack_require__(7);
	var Styles = __webpack_require__(9);

	var NotificationSystem = React.createClass({
	  displayName: 'NotificationSystem',


	  uid: 3400,

	  _isMounted: false,

	  _getStyles: {
	    overrideStyle: {},

	    overrideWidth: null,

	    setOverrideStyle: function () {
	      function setOverrideStyle(style) {
	        this.overrideStyle = style;
	      }

	      return setOverrideStyle;
	    }(),

	    wrapper: function () {
	      function wrapper() {
	        if (!this.overrideStyle) return {};
	        return merge({}, Styles.Wrapper, this.overrideStyle.Wrapper);
	      }

	      return wrapper;
	    }(),

	    container: function () {
	      function container(position) {
	        var override = this.overrideStyle.Containers || {};
	        if (!this.overrideStyle) return {};

	        this.overrideWidth = Styles.Containers.DefaultStyle.width;

	        if (override.DefaultStyle && override.DefaultStyle.width) {
	          this.overrideWidth = override.DefaultStyle.width;
	        }

	        if (override[position] && override[position].width) {
	          this.overrideWidth = override[position].width;
	        }

	        return merge({}, Styles.Containers.DefaultStyle, Styles.Containers[position], override.DefaultStyle, override[position]);
	      }

	      return container;
	    }(),

	    elements: {
	      notification: 'NotificationItem',
	      title: 'Title',
	      messageWrapper: 'MessageWrapper',
	      dismiss: 'Dismiss',
	      action: 'Action',
	      actionWrapper: 'ActionWrapper'
	    },

	    byElement: function () {
	      function byElement(element) {
	        var self = this;
	        return function (level) {
	          var _element = self.elements[element];
	          var override = self.overrideStyle[_element] || {};
	          if (!self.overrideStyle) return {};
	          return merge({}, Styles[_element].DefaultStyle, Styles[_element][level], override.DefaultStyle, override[level]);
	        };
	      }

	      return byElement;
	    }()
	  },

	  _didNotificationRemoved: function () {
	    function _didNotificationRemoved(uid) {
	      var notification;
	      var notifications = this.state.notifications.filter(function (toCheck) {
	        if (toCheck.uid === uid) {
	          notification = toCheck;
	        }
	        return toCheck.uid !== uid;
	      });

	      if (notification && notification.onRemove) {
	        notification.onRemove(notification);
	      }

	      if (this._isMounted) {
	        this.setState({ notifications: notifications });
	      }
	    }

	    return _didNotificationRemoved;
	  }(),

	  getInitialState: function () {
	    function getInitialState() {
	      return {
	        notifications: []
	      };
	    }

	    return getInitialState;
	  }(),

	  propTypes: {
	    style: React.PropTypes.oneOfType([React.PropTypes.bool, React.PropTypes.object]),
	    noAnimation: React.PropTypes.bool,
	    allowHTML: React.PropTypes.bool
	  },

	  getDefaultProps: function () {
	    function getDefaultProps() {
	      return {
	        style: {},
	        noAnimation: false,
	        allowHTML: false
	      };
	    }

	    return getDefaultProps;
	  }(),

	  addNotification: function () {
	    function addNotification(notification) {
	      var _notification = merge({}, Constants.notification, notification);
	      var notifications = this.state.notifications;
	      var i;

	      if (!_notification.level) {
	        throw new Error('notification level is required.');
	      }

	      if (Object.keys(Constants.levels).indexOf(_notification.level) === -1) {
	        throw new Error('\'' + _notification.level + '\' is not a valid level.');
	      }

	      if (isNaN(_notification.autoDismiss)) {
	        throw new Error('\'autoDismiss\' must be a number.');
	      }

	      if (Object.keys(Constants.positions).indexOf(_notification.position) === -1) {
	        throw new Error('\'' + _notification.position + '\' is not a valid position.');
	      }

	      // Some preparations
	      _notification.position = _notification.position.toLowerCase();
	      _notification.level = _notification.level.toLowerCase();
	      _notification.autoDismiss = parseInt(_notification.autoDismiss, 10);

	      _notification.uid = _notification.uid || this.uid;
	      _notification.ref = 'notification-' + _notification.uid;
	      this.uid += 1;

	      // do not add if the notification already exists based on supplied uid
	      for (i = 0; i < notifications.length; i++) {
	        if (notifications[i].uid === _notification.uid) {
	          return false;
	        }
	      }

	      notifications.push(_notification);

	      if (typeof _notification.onAdd === 'function') {
	        notification.onAdd(_notification);
	      }

	      this.setState({
	        notifications: notifications
	      });

	      return _notification;
	    }

	    return addNotification;
	  }(),

	  removeNotification: function () {
	    function removeNotification(notification) {
	      var self = this;
	      Object.keys(this.refs).forEach(function (container) {
	        if (container.indexOf('container') > -1) {
	          Object.keys(self.refs[container].refs).forEach(function (_notification) {
	            var uid = notification.uid ? notification.uid : notification;
	            if (_notification === 'notification-' + uid) {
	              self.refs[container].refs[_notification]._hideNotification();
	            }
	          });
	        }
	      });
	    }

	    return removeNotification;
	  }(),

	  clearNotifications: function () {
	    function clearNotifications() {
	      var self = this;
	      Object.keys(this.refs).forEach(function (container) {
	        if (container.indexOf('container') > -1) {
	          Object.keys(self.refs[container].refs).forEach(function (_notification) {
	            self.refs[container].refs[_notification]._hideNotification();
	          });
	        }
	      });
	    }

	    return clearNotifications;
	  }(),

	  componentDidMount: function () {
	    function componentDidMount() {
	      this._getStyles.setOverrideStyle(this.props.style);
	      this._isMounted = true;
	    }

	    return componentDidMount;
	  }(),

	  componentWillUnmount: function () {
	    function componentWillUnmount() {
	      this._isMounted = false;
	    }

	    return componentWillUnmount;
	  }(),

	  render: function () {
	    function render() {
	      var self = this;
	      var containers = null;
	      var notifications = this.state.notifications;

	      if (notifications.length) {
	        containers = Object.keys(Constants.positions).map(function (position) {
	          var _notifications = notifications.filter(function (notification) {
	            return position === notification.position;
	          });

	          if (!_notifications.length) {
	            return null;
	          }

	          return React.createElement(NotificationContainer, {
	            ref: 'container-' + position,
	            key: position,
	            position: position,
	            notifications: _notifications,
	            getStyles: self._getStyles,
	            onRemove: self._didNotificationRemoved,
	            noAnimation: self.props.noAnimation,
	            allowHTML: self.props.allowHTML
	          });
	        });
	      }

	      return React.createElement(
	        'div',
	        { className: 'notifications-wrapper', style: this._getStyles.wrapper() },
	        containers
	      );
	    }

	    return render;
	  }()
	});

	module.exports = NotificationSystem;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var NotificationItem = __webpack_require__(5);
	var Constants = __webpack_require__(7);

	var NotificationContainer = React.createClass({
	  displayName: 'NotificationContainer',


	  propTypes: {
	    position: React.PropTypes.string.isRequired,
	    notifications: React.PropTypes.array.isRequired,
	    getStyles: React.PropTypes.object
	  },

	  _style: {},

	  componentWillMount: function () {
	    function componentWillMount() {
	      // Fix position if width is overrided
	      this._style = this.props.getStyles.container(this.props.position);

	      if (this.props.getStyles.overrideWidth && (this.props.position === Constants.positions.tc || this.props.position === Constants.positions.bc)) {
	        this._style.marginLeft = -(this.props.getStyles.overrideWidth / 2);
	      }
	    }

	    return componentWillMount;
	  }(),

	  render: function () {
	    function render() {
	      var self = this;
	      var notifications;

	      if ([Constants.positions.bl, Constants.positions.br, Constants.positions.bc].indexOf(this.props.position) > -1) {
	        this.props.notifications.reverse();
	      }

	      notifications = this.props.notifications.map(function (notification) {
	        return React.createElement(NotificationItem, {
	          ref: 'notification-' + notification.uid,
	          key: notification.uid,
	          notification: notification,
	          getStyles: self.props.getStyles,
	          onRemove: self.props.onRemove,
	          noAnimation: self.props.noAnimation,
	          allowHTML: self.props.allowHTML,
	          children: self.props.children
	        });
	      });

	      return React.createElement(
	        'div',
	        { className: 'notifications-' + this.props.position, style: this._style },
	        notifications
	      );
	    }

	    return render;
	  }()
	});

	module.exports = NotificationContainer;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(6);
	var Constants = __webpack_require__(7);
	var Helpers = __webpack_require__(8);
	var merge = __webpack_require__(3);

	/* From Modernizr */
	var whichTransitionEvent = function whichTransitionEvent() {
	  var el = document.createElement('fakeelement');
	  var transition;
	  var transitions = {
	    transition: 'transitionend',
	    OTransition: 'oTransitionEnd',
	    MozTransition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd'
	  };

	  Object.keys(transitions).forEach(function (transitionKey) {
	    if (el.style[transitionKey] !== undefined) {
	      transition = transitions[transitionKey];
	    }
	  });

	  return transition;
	};

	var NotificationItem = React.createClass({
	  displayName: 'NotificationItem',


	  propTypes: {
	    notification: React.PropTypes.object,
	    getStyles: React.PropTypes.object,
	    onRemove: React.PropTypes.func,
	    allowHTML: React.PropTypes.bool,
	    noAnimation: React.PropTypes.bool,
	    children: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element])
	  },

	  getDefaultProps: function () {
	    function getDefaultProps() {
	      return {
	        noAnimation: false,
	        onRemove: function () {
	          function onRemove() {}

	          return onRemove;
	        }(),
	        allowHTML: false
	      };
	    }

	    return getDefaultProps;
	  }(),

	  getInitialState: function () {
	    function getInitialState() {
	      return {
	        visible: undefined,
	        removed: false
	      };
	    }

	    return getInitialState;
	  }(),

	  componentWillMount: function () {
	    function componentWillMount() {
	      var getStyles = this.props.getStyles;
	      var level = this.props.notification.level;

	      this._noAnimation = this.props.noAnimation;

	      this._styles = {
	        notification: getStyles.byElement('notification')(level),
	        title: getStyles.byElement('title')(level),
	        dismiss: getStyles.byElement('dismiss')(level),
	        messageWrapper: getStyles.byElement('messageWrapper')(level),
	        actionWrapper: getStyles.byElement('actionWrapper')(level),
	        action: getStyles.byElement('action')(level)
	      };

	      if (!this.props.notification.dismissible) {
	        this._styles.notification.cursor = 'default';
	      }
	    }

	    return componentWillMount;
	  }(),

	  _styles: {},

	  _notificationTimer: null,

	  _height: 0,

	  _noAnimation: null,

	  _isMounted: false,

	  _removeCount: 0,

	  _getCssPropertyByPosition: function () {
	    function _getCssPropertyByPosition() {
	      var position = this.props.notification.position;
	      var css = {};

	      switch (position) {
	        case Constants.positions.tl:
	        case Constants.positions.bl:
	          css = {
	            property: 'left',
	            value: -200
	          };
	          break;

	        case Constants.positions.tr:
	        case Constants.positions.br:
	          css = {
	            property: 'right',
	            value: -200
	          };
	          break;

	        case Constants.positions.tc:
	          css = {
	            property: 'top',
	            value: -100
	          };
	          break;

	        case Constants.positions.bc:
	          css = {
	            property: 'bottom',
	            value: -100
	          };
	          break;

	        default:
	      }

	      return css;
	    }

	    return _getCssPropertyByPosition;
	  }(),

	  _defaultAction: function () {
	    function _defaultAction(event) {
	      var notification = this.props.notification;

	      event.preventDefault();
	      this._hideNotification();
	      if (typeof notification.action.callback === 'function') {
	        notification.action.callback();
	      }
	    }

	    return _defaultAction;
	  }(),

	  _hideNotification: function () {
	    function _hideNotification() {
	      if (this._notificationTimer) {
	        this._notificationTimer.clear();
	      }

	      if (this._isMounted) {
	        this.setState({
	          visible: false,
	          removed: true
	        });
	      }

	      if (this._noAnimation) {
	        this._removeNotification();
	      }
	    }

	    return _hideNotification;
	  }(),

	  _removeNotification: function () {
	    function _removeNotification() {
	      this.props.onRemove(this.props.notification.uid);
	    }

	    return _removeNotification;
	  }(),

	  _dismiss: function () {
	    function _dismiss() {
	      if (!this.props.notification.dismissible) {
	        return;
	      }

	      this._hideNotification();
	    }

	    return _dismiss;
	  }(),

	  _showNotification: function () {
	    function _showNotification() {
	      var self = this;
	      setTimeout(function () {
	        if (self._isMounted) {
	          self.setState({
	            visible: true
	          });
	        }
	      }, 50);
	    }

	    return _showNotification;
	  }(),

	  _onTransitionEnd: function () {
	    function _onTransitionEnd() {
	      if (this._removeCount > 0) return;
	      if (this.state.removed) {
	        this._removeCount++;
	        this._removeNotification();
	      }
	    }

	    return _onTransitionEnd;
	  }(),

	  componentDidMount: function () {
	    function componentDidMount() {
	      var self = this;
	      var transitionEvent = whichTransitionEvent();
	      var notification = this.props.notification;
	      var element = ReactDOM.findDOMNode(this);

	      this._height = element.offsetHeight;

	      this._isMounted = true;

	      // Watch for transition end
	      if (!this._noAnimation) {
	        if (transitionEvent) {
	          element.addEventListener(transitionEvent, this._onTransitionEnd);
	        } else {
	          this._noAnimation = true;
	        }
	      }

	      if (notification.autoDismiss) {
	        this._notificationTimer = new Helpers.Timer(function () {
	          self._hideNotification();
	        }, notification.autoDismiss * 1000);
	      }

	      this._showNotification();
	    }

	    return componentDidMount;
	  }(),

	  _handleMouseEnter: function () {
	    function _handleMouseEnter() {
	      var notification = this.props.notification;
	      if (notification.autoDismiss) {
	        this._notificationTimer.pause();
	      }
	    }

	    return _handleMouseEnter;
	  }(),

	  _handleMouseLeave: function () {
	    function _handleMouseLeave() {
	      var notification = this.props.notification;
	      if (notification.autoDismiss) {
	        this._notificationTimer.resume();
	      }
	    }

	    return _handleMouseLeave;
	  }(),

	  componentWillUnmount: function () {
	    function componentWillUnmount() {
	      var element = ReactDOM.findDOMNode(this);
	      var transitionEvent = whichTransitionEvent();
	      element.removeEventListener(transitionEvent, this._onTransitionEnd);
	      this._isMounted = false;
	    }

	    return componentWillUnmount;
	  }(),

	  _allowHTML: function () {
	    function _allowHTML(string) {
	      return { __html: string };
	    }

	    return _allowHTML;
	  }(),

	  render: function () {
	    function render() {
	      var notification = this.props.notification;
	      var className = 'notification notification-' + notification.level;
	      var notificationStyle = merge({}, this._styles.notification);
	      var cssByPos = this._getCssPropertyByPosition();
	      var dismiss = null;
	      var actionButton = null;
	      var title = null;
	      var message = null;

	      if (this.state.visible) {
	        className += ' notification-visible';
	      } else if (this.state.visible === false) {
	        className += ' notification-hidden';
	      }

	      if (!notification.dismissible) {
	        className += ' notification-not-dismissible';
	      }

	      if (this.props.getStyles.overrideStyle) {
	        if (!this.state.visible && !this.state.removed) {
	          notificationStyle[cssByPos.property] = cssByPos.value;
	        }

	        if (this.state.visible && !this.state.removed) {
	          notificationStyle.height = this._height;
	          notificationStyle[cssByPos.property] = 0;
	        }

	        if (this.state.removed) {
	          notificationStyle.overlay = 'hidden';
	          notificationStyle.height = 0;
	          notificationStyle.marginTop = 0;
	          notificationStyle.paddingTop = 0;
	          notificationStyle.paddingBottom = 0;
	        }
	        notificationStyle.opacity = this.state.visible ? this._styles.notification.isVisible.opacity : this._styles.notification.isHidden.opacity;
	      }

	      if (notification.title) {
	        title = React.createElement(
	          'h4',
	          { className: 'notification-title', style: this._styles.title },
	          notification.title
	        );
	      }

	      if (notification.message) {
	        if (this.props.allowHTML) {
	          message = React.createElement('div', { className: 'notification-message', style: this._styles.messageWrapper, dangerouslySetInnerHTML: this._allowHTML(notification.message) });
	        } else {
	          message = React.createElement(
	            'div',
	            { className: 'notification-message', style: this._styles.messageWrapper },
	            notification.message
	          );
	        }
	      }

	      if (notification.dismissible) {
	        dismiss = React.createElement(
	          'span',
	          { className: 'notification-dismiss', style: this._styles.dismiss },
	          '\xD7'
	        );
	      }

	      if (notification.action) {
	        actionButton = React.createElement(
	          'div',
	          { className: 'notification-action-wrapper', style: this._styles.actionWrapper },
	          React.createElement(
	            'button',
	            { className: 'notification-action-button',
	              onClick: this._defaultAction,
	              style: this._styles.action },
	            notification.action.label
	          )
	        );
	      }

	      if (notification.children) {
	        actionButton = notification.children;
	      }

	      return React.createElement(
	        'div',
	        { className: className, onClick: this._dismiss, onMouseEnter: this._handleMouseEnter, onMouseLeave: this._handleMouseLeave, style: notificationStyle },
	        title,
	        message,
	        dismiss,
	        actionButton
	      );
	    }

	    return render;
	  }()

	});

	module.exports = NotificationItem;

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ },
/* 7 */
/***/ function(module, exports) {

	var CONSTANTS = {

	  // Positions
	  positions: {
	    tl: 'tl',
	    tr: 'tr',
	    tc: 'tc',
	    bl: 'bl',
	    br: 'br',
	    bc: 'bc'
	  },

	  // Levels
	  levels: {
	    success: 'success',
	    error: 'error',
	    warning: 'warning',
	    info: 'info'
	  },

	  // Notification defaults
	  notification: {
	    title: null,
	    message: null,
	    level: null,
	    position: 'tr',
	    autoDismiss: 5,
	    dismissible: true,
	    action: null
	  }
	};

	module.exports = CONSTANTS;

/***/ },
/* 8 */
/***/ function(module, exports) {

	var Helpers = {
	  Timer: function () {
	    function Timer(callback, delay) {
	      var timerId;
	      var start;
	      var remaining = delay;

	      this.pause = function () {
	        clearTimeout(timerId);
	        remaining -= new Date() - start;
	      };

	      this.resume = function () {
	        start = new Date();
	        clearTimeout(timerId);
	        timerId = setTimeout(callback, remaining);
	      };

	      this.clear = function () {
	        clearTimeout(timerId);
	      };

	      this.resume();
	    }

	    return Timer;
	  }()
	};

	module.exports = Helpers;

/***/ },
/* 9 */
/***/ function(module, exports) {

	// Used for calculations
	var defaultWidth = 320;
	var defaultColors = {
	  success: {
	    rgb: '94, 164, 0',
	    hex: '#5ea400'
	  },
	  error: {
	    rgb: '236, 61, 61',
	    hex: '#ec3d3d'
	  },
	  warning: {
	    rgb: '235, 173, 23',
	    hex: '#ebad1a'
	  },
	  info: {
	    rgb: '54, 156, 199',
	    hex: '#369cc7'
	  }
	};
	var defaultShadowOpacity = '0.9';

	var STYLES = {

	  Wrapper: {},
	  Containers: {
	    DefaultStyle: {
	      fontFamily: 'inherit',
	      position: 'fixed',
	      width: defaultWidth,
	      padding: '0 10px 10px 10px',
	      zIndex: 9998,
	      WebkitBoxSizing: 'border-box',
	      MozBoxSizing: 'border-box',
	      boxSizing: 'border-box',
	      height: 'auto'
	    },

	    tl: {
	      top: '0px',
	      bottom: 'auto',
	      left: '0px',
	      right: 'auto'
	    },

	    tr: {
	      top: '0px',
	      bottom: 'auto',
	      left: 'auto',
	      right: '0px'
	    },

	    tc: {
	      top: '0px',
	      bottom: 'auto',
	      margin: '0 auto',
	      left: '50%',
	      marginLeft: -(defaultWidth / 2)
	    },

	    bl: {
	      top: 'auto',
	      bottom: '0px',
	      left: '0px',
	      right: 'auto'
	    },

	    br: {
	      top: 'auto',
	      bottom: '0px',
	      left: 'auto',
	      right: '0px'
	    },

	    bc: {
	      top: 'auto',
	      bottom: '0px',
	      margin: '0 auto',
	      left: '50%',
	      marginLeft: -(defaultWidth / 2)
	    }

	  },

	  NotificationItem: {
	    DefaultStyle: {
	      position: 'relative',
	      width: '100%',
	      cursor: 'pointer',
	      borderRadius: '2px',
	      fontSize: '13px',
	      margin: '10px 0 0',
	      padding: '10px',
	      display: 'block',
	      WebkitBoxSizing: 'border-box',
	      MozBoxSizing: 'border-box',
	      boxSizing: 'border-box',
	      opacity: 0,
	      transition: '0.3s ease-in-out',
	      WebkitTransform: 'translate3d(0, 0, 0)',
	      transform: 'translate3d(0, 0, 0)',
	      willChange: 'transform, opacity',

	      isHidden: {
	        opacity: 0
	      },

	      isVisible: {
	        opacity: 1
	      }
	    },

	    success: {
	      borderTop: '2px solid ' + defaultColors.success.hex,
	      backgroundColor: '#f0f5ea',
	      color: '#4b583a',
	      WebkitBoxShadow: '0 0 1px rgba(' + defaultColors.success.rgb + ',' + defaultShadowOpacity + ')',
	      MozBoxShadow: '0 0 1px rgba(' + defaultColors.success.rgb + ',' + defaultShadowOpacity + ')',
	      boxShadow: '0 0 1px rgba(' + defaultColors.success.rgb + ',' + defaultShadowOpacity + ')'
	    },

	    error: {
	      borderTop: '2px solid ' + defaultColors.error.hex,
	      backgroundColor: '#f4e9e9',
	      color: '#412f2f',
	      WebkitBoxShadow: '0 0 1px rgba(' + defaultColors.error.rgb + ',' + defaultShadowOpacity + ')',
	      MozBoxShadow: '0 0 1px rgba(' + defaultColors.error.rgb + ',' + defaultShadowOpacity + ')',
	      boxShadow: '0 0 1px rgba(' + defaultColors.error.rgb + ',' + defaultShadowOpacity + ')'
	    },

	    warning: {
	      borderTop: '2px solid ' + defaultColors.warning.hex,
	      backgroundColor: '#f9f6f0',
	      color: '#5a5343',
	      WebkitBoxShadow: '0 0 1px rgba(' + defaultColors.warning.rgb + ',' + defaultShadowOpacity + ')',
	      MozBoxShadow: '0 0 1px rgba(' + defaultColors.warning.rgb + ',' + defaultShadowOpacity + ')',
	      boxShadow: '0 0 1px rgba(' + defaultColors.warning.rgb + ',' + defaultShadowOpacity + ')'
	    },

	    info: {
	      borderTop: '2px solid ' + defaultColors.info.hex,
	      backgroundColor: '#e8f0f4',
	      color: '#41555d',
	      WebkitBoxShadow: '0 0 1px rgba(' + defaultColors.info.rgb + ',' + defaultShadowOpacity + ')',
	      MozBoxShadow: '0 0 1px rgba(' + defaultColors.info.rgb + ',' + defaultShadowOpacity + ')',
	      boxShadow: '0 0 1px rgba(' + defaultColors.info.rgb + ',' + defaultShadowOpacity + ')'
	    }
	  },

	  Title: {
	    DefaultStyle: {
	      fontSize: '14px',
	      margin: '0 0 5px 0',
	      padding: 0,
	      fontWeight: 'bold'
	    },

	    success: {
	      color: defaultColors.success.hex
	    },

	    error: {
	      color: defaultColors.error.hex
	    },

	    warning: {
	      color: defaultColors.warning.hex
	    },

	    info: {
	      color: defaultColors.info.hex
	    }

	  },

	  MessageWrapper: {
	    DefaultStyle: {
	      margin: 0,
	      padding: 0
	    }
	  },

	  Dismiss: {
	    DefaultStyle: {
	      fontFamily: 'Arial',
	      fontSize: '17px',
	      position: 'absolute',
	      top: '4px',
	      right: '5px',
	      lineHeight: '15px',
	      backgroundColor: '#dededf',
	      color: '#ffffff',
	      borderRadius: '50%',
	      width: '14px',
	      height: '14px',
	      fontWeight: 'bold',
	      textAlign: 'center'
	    },

	    success: {
	      color: '#f0f5ea',
	      backgroundColor: '#b0ca92'
	    },

	    error: {
	      color: '#f4e9e9',
	      backgroundColor: '#e4bebe'
	    },

	    warning: {
	      color: '#f9f6f0',
	      backgroundColor: '#e1cfac'
	    },

	    info: {
	      color: '#e8f0f4',
	      backgroundColor: '#a4becb'
	    }
	  },

	  Action: {
	    DefaultStyle: {
	      background: '#ffffff',
	      borderRadius: '2px',
	      padding: '6px 20px',
	      fontWeight: 'bold',
	      margin: '10px 0 0 0',
	      border: 0
	    },

	    success: {
	      backgroundColor: defaultColors.success.hex,
	      color: '#ffffff'
	    },

	    error: {
	      backgroundColor: defaultColors.error.hex,
	      color: '#ffffff'
	    },

	    warning: {
	      backgroundColor: defaultColors.warning.hex,
	      color: '#ffffff'
	    },

	    info: {
	      backgroundColor: defaultColors.info.hex,
	      color: '#ffffff'
	    }
	  },

	  ActionWrapper: {
	    DefaultStyle: {
	      margin: 0,
	      padding: 0
	    }
	  }
	};

	module.exports = STYLES;

/***/ }
/******/ ])
});
;