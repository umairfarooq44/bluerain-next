/**
 * Created by saad bin saeed on 2/28/17.
 */

import React, { PropTypes } from 'react';
import  tinycolor from 'tinycolor2';
import Icon from 'react-fa';

class IconComponent extends React.Component {

    static propTypes = {
        name: PropTypes.string,
        size: PropTypes.string,
        color: PropTypes.string,
        backgroundColors: PropTypes.array,
        gradient: PropTypes.bool,
        src: PropTypes.string,
        shadow: PropTypes.string,
        textColor: PropTypes.string,
    };

    static defaultProps = {
        name: 'cube',
        size: '120px',
        color: 'white',
        backgroundColors: ['#F9006B', 'yellow'],
        gradient: false,
        src: null,
        shadow: null,
        textColor: 'black',

    };
      render() {

        const {
            name,
            size,
            color,
            backgroundColors,
            gradient,
            src,
            png,
            shadow,
            textColor,
            text,
        } = this.props;

        let backgroundHexColor, iconGradient = 'linear-gradient(to right,';

        const iconHexColor = `${'#' + tinycolor(color).toHex()}`;

        const iconParent = {
          textAlign: "center",
          width: size,
          color: '#' + tinycolor(textColor).toHex(),
          fontSize: parseInt(size.slice(0, -2))/8+ 'px',
        }

        const iconStyle = {
            width: size,
            height: size,
            borderRadius: '10px',
            color: iconHexColor,
            // display: "inline-block",
            textAlign: "center",
            marginBottom: "7px",
        };
        if (shadow) {
          iconStyle.boxShadow = `rgba(0,0,0,0.6) 0 0 ${shadow}`;
        }
        if(png){
            iconStyle.background = `${'url('+png +')'}`;
            iconStyle.backgroundSize = size;
            return (
              <div style={iconParent}>
                <div style={iconStyle}>
                </div>
                <span>{text}</span>
              </div>

            );
        }
        if(src){
            iconStyle.background = `${'url('+src +')'}`;
        }else{
            if (gradient){
                backgroundColors.forEach((color) => {
                    iconGradient += color;
                    iconGradient += ',';
                });
                iconGradient = iconGradient.substring(0, iconGradient.length - 1);
                iconGradient += ')';
            } else {
                backgroundHexColor = `${'#' + tinycolor(backgroundColors[0]).toHex()}`;
            }
            iconStyle.background = gradient ? iconGradient : backgroundHexColor;

        }
        const icon = {
          padding: (parseInt(size.slice(0, -2))/6)+2+ 'px 0px',
        };
        return (
          <div style={iconParent}>
            <div style={iconStyle}>
              <Icon size="5x" style={icon} name={name} />
            </div>
            <span>{text}</span>
          </div>
        );
    }

}
export default IconComponent;
