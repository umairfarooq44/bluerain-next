'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _victory = require('victory');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 5/22/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var propTypes = {
  data: _react.PropTypes.array,
  x: _react.PropTypes.string,
  y: _react.PropTypes.func,
  tooltip: _react.PropTypes.bool,
  tooltipIsBoolean: _react.PropTypes.bool,
  tooltipBooleanTrueLabel: _react.PropTypes.string,
  tooltipBooleanFalseLabel: _react.PropTypes.string,
  dateFormat: _react.PropTypes.string,
  fillColor: _react.PropTypes.string,
  strokeColor: _react.PropTypes.string,
  unit: _react.PropTypes.string
};

var defaultProps = {
  data: [],
  x: '',
  y: function y() {},
  tooltip: undefined,
  tooltipIsBoolean: false,
  tooltipBooleanTrueLabel: 'Boolean On',
  tooltipBooleanFalseLabel: 'Boolean False',
  fillColor: 'rgba(255,255,255,0.3)',
  strokeColor: 'white',
  unit: '',
  dateFormat: 'hh:mm:ss a'
};

var BarChart = function (_React$Component) {
  _inherits(BarChart, _React$Component);

  function BarChart() {
    _classCallCheck(this, BarChart);

    return _possibleConstructorReturn(this, (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments));
  }

  _createClass(BarChart, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          x = _props.x,
          y = _props.y,
          fillColor = _props.fillColor,
          strokeColor = _props.strokeColor,
          tooltip = _props.tooltip,
          dateFormat = _props.dateFormat,
          unit = _props.unit,
          tooltipIsBoolean = _props.tooltipIsBoolean,
          tooltipBooleanTrueLabel = _props.tooltipBooleanTrueLabel,
          tooltipBooleanFalseLabel = _props.tooltipBooleanFalseLabel;


      return _react2.default.createElement(
        _victory.VictoryGroup,
        {
          data: data,
          x: x,
          y: y,
          scale: { x: 'time', y: 'linear' },
          padding: { top: 4, right: 10, left: 10 }, height: 125, zIndex: 20,
          style: { parent: { overflow: 'visible' } }
        },
        _react2.default.createElement(_victory.VictoryBar, {
          style: {
            data: {
              fill: fillColor,
              stroke: strokeColor,
              strokeWidth: 1
            }
          }
        }),
        BarChart.renderTooltip(tooltip, dateFormat, unit, tooltipIsBoolean, tooltipBooleanTrueLabel, tooltipBooleanFalseLabel)
      );
    }
  }], [{
    key: 'renderTooltip',
    value: function renderTooltip(tooltip, dateFormat, unit, tooltipIsBoolean, tooltipBooleanTrueLabel, tooltipBooleanFalseLabel) {
      if (tooltip) {
        if (tooltipIsBoolean) {
          return _react2.default.createElement(_victory.VictoryVoronoiTooltip, { labels: function labels(d) {
              return ' ' + (d.y === true ? tooltipBooleanTrueLabel : tooltipBooleanFalseLabel) + ' at ' + (0, _moment2.default)(d.x).format(dateFormat);
            } });
        }
        return _react2.default.createElement(_victory.VictoryVoronoiTooltip, { labels: function labels(d) {
            return ' ' + Math.round(d.y * 100) / 100 + unit + ' at ' + (0, _moment2.default)(d.x).format(dateFormat);
          } });
      }
    }
  }]);

  return BarChart;
}(_react2.default.Component);

exports.default = BarChart;


BarChart.propTypes = propTypes;
BarChart.defaultProps = defaultProps;