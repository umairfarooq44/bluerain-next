'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ComponentState = require('../ComponentState/');

var _ComponentState2 = _interopRequireDefault(_ComponentState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import pickBy from 'lodash.pickBy';

var pickBy = require('lodash.pickby');

var propTypes = {
  // Main component
  component: _react.PropTypes.func.isRequired,

  // Data Identification
  dataField: _react.PropTypes.string,
  data: _react.PropTypes.object,
  checkData: _react.PropTypes.func,

  // State Components
  errorStateComponent: _react.PropTypes.func,
  loadingStateComponent: _react.PropTypes.func,
  emptyStateComponent: _react.PropTypes.func,

  // States
  hasData: _react.PropTypes.bool,
  loading: _react.PropTypes.bool,
  error: _react.PropTypes.object,

  // State Component properties
  errorStateProps: _react.PropTypes.object,
  loadingStateProps: _react.PropTypes.object,
  emptyStateProps: _react.PropTypes.object,

  // Event Listeners
  onData: _react.PropTypes.func,
  onLoadingStart: _react.PropTypes.func,
  onLoadingEnd: _react.PropTypes.func,
  onError: _react.PropTypes.func,
  onEmpty: _react.PropTypes.func
};

var defaultProps = {

  // Data Identification
  dataField: 'query',
  checkData: function checkData(props, dataProp) {
    if (props.data[dataProp] === null || props.data[dataProp] === undefined) {
      return false;
    }

    return true;
  },


  // States
  hasData: false,
  loading: false,
  error: null,

  // State Components
  errorStateComponent: _ComponentState2.default,
  loadingStateComponent: _ComponentState2.default,
  emptyStateComponent: _ComponentState2.default,

  // State Component properties
  errorStateProps: {
    card: true,
    title: 'Error ',
    description: 'An Error Occurred',
    image: 'swearing-male.svg'
  },
  loadingStateProps: {
    card: false,
    title: 'Loading',
    description: 'Please wait, we\'re on it!'
  },
  emptyStateProps: {
    card: false,
    title: 'Nothing to show',
    description: 'We seem to have nothing to show at the moment!'
  },

  // Event Listeners
  onData: function onData() {},
  onLoadingStart: function onLoadingStart() {},
  onLoadingEnd: function onLoadingEnd() {},
  onError: function onError() {},
  onEmpty: function onEmpty() {}
};

var StatefulComponent = function (_React$Component) {
  _inherits(StatefulComponent, _React$Component);

  function StatefulComponent(props) {
    _classCallCheck(this, StatefulComponent);

    var _this = _possibleConstructorReturn(this, (StatefulComponent.__proto__ || Object.getPrototypeOf(StatefulComponent)).call(this, props));

    var loading = props.data && props.data.loading !== undefined ? props.data.loading : props.loading;
    var error = props.data && props.data.error !== undefined ? props.data.error : props.error;

    _this.state = {
      hasData: props.checkData(props, props.dataField),
      loading: loading,
      error: error
    };
    return _this;
  }

  _createClass(StatefulComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {

      if (!props || !props.data) {
        return;
      }

      var newState = {};

      if (props.data.error !== undefined) {
        newState.error = props.data.error;
      }

      if (props.data.loading !== undefined) {
        newState.loading = props.data.loading;
      }

      var dataProp = this.props.dataField;

      newState.hasData = this.props.checkData(props, dataProp);

      if (!this.hasDataChanged(newState)) {
        return;
      }

      this.setState(newState);
    }
  }, {
    key: 'hasDataChanged',
    value: function hasDataChanged(props) {

      if (props.error !== this.state.error) {
        return true;
      }

      if (props.loading !== this.state.loading) {
        if (props.loading === false) {
          this.props.onLoadingEnd();
        }
        return true;
      }

      if (props.hasData !== this.state.hasData) {
        return true;
      }

      return false;
    }
  }, {
    key: 'renderError',
    value: function renderError(error) {
      this.props.onError(error);
      var _props = this.props,
          errorStateProps = _props.errorStateProps,
          Component = _props.errorStateComponent;

      errorStateProps.description = error.message;
      return _react2.default.createElement(Component, errorStateProps);
    }
  }, {
    key: 'renderLoading',
    value: function renderLoading() {
      // TODO: This has to be moved to a better location/logic
      this.props.onLoadingStart();

      var _props2 = this.props,
          Component = _props2.loadingStateComponent,
          loadingStateProps = _props2.loadingStateProps;

      return _react2.default.createElement(Component, loadingStateProps);
    }
  }, {
    key: 'renderEmpty',
    value: function renderEmpty() {
      this.props.onEmpty();
      var _props3 = this.props,
          Component = _props3.emptyStateComponent,
          emptyStateProps = _props3.emptyStateProps;

      return _react2.default.createElement(Component, emptyStateProps);
    }
  }, {
    key: 'renderComponent',
    value: function renderComponent() {
      this.props.onData();

      var _props4 = this.props,
          Component = _props4.component,
          props = _objectWithoutProperties(_props4, ['component']);

      // Need to remove this component's props before passing
      // the props to the child component


      var defaultPropKeys = Object.keys(defaultProps);
      var filteredProps = pickBy(props, function (value, key) {
        return !defaultPropKeys.includes(key);
      });

      return _react2.default.createElement(Component, filteredProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          hasData = _state.hasData,
          loading = _state.loading,
          error = _state.error;

      if (error) {
        return this.renderError(error);
      } else if (loading && !hasData) {
        return this.renderLoading();
      } else if (hasData) {
        return this.renderComponent();
      }

      return this.renderEmpty();
    }
  }]);

  return StatefulComponent;
}(_react2.default.Component);

exports.default = StatefulComponent;


StatefulComponent.propTypes = propTypes;
StatefulComponent.defaultProps = defaultProps;