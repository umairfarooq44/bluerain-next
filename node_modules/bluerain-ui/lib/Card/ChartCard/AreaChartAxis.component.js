'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _victory = require('victory');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by amna on 12/22/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var propTypes = {
  data: _react.PropTypes.array,
  x: _react.PropTypes.string,
  y: _react.PropTypes.func,
  xTickCount: _react.PropTypes.number,
  yTickCount: _react.PropTypes.number,
  tickFormat: _react.PropTypes.array,
  tooltip: _react.PropTypes.bool,
  tooltipIsBoolean: _react.PropTypes.bool,
  tooltipBooleanTrueLabel: _react.PropTypes.string,
  tooltipBooleanFalseLabel: _react.PropTypes.string,
  dateFormat: _react.PropTypes.string,
  fillColor: _react.PropTypes.string,
  strokeColor: _react.PropTypes.string,
  unit: _react.PropTypes.string,
  height: _react.PropTypes.number,
  width: _react.PropTypes.number,
  interpolation: _react.PropTypes.string
};

var defaultProps = {
  data: [],
  x: '',
  y: function y() {},
  xTickCount: 5,
  yTickCount: 5,
  tickFormat: undefined,
  tooltip: undefined,
  tooltipIsBoolean: false,
  tooltipBooleanTrueLabel: 'Boolean On',
  tooltipBooleanFalseLabel: 'Boolean False',
  fillColor: 'rgba(0,255,0,0.3)',
  strokeColor: 'black',
  unit: '',
  dateFormat: 'hh:mm:ss a',
  height: 400,
  width: 600,
  interpolation: "step"
};

var AreaChartAxis = function (_React$Component) {
  _inherits(AreaChartAxis, _React$Component);

  function AreaChartAxis() {
    _classCallCheck(this, AreaChartAxis);

    return _possibleConstructorReturn(this, (AreaChartAxis.__proto__ || Object.getPrototypeOf(AreaChartAxis)).apply(this, arguments));
  }

  _createClass(AreaChartAxis, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          data = _props.data,
          x = _props.x,
          y = _props.y,
          fillColor = _props.fillColor,
          strokeColor = _props.strokeColor,
          tooltip = _props.tooltip,
          dateFormat = _props.dateFormat,
          unit = _props.unit,
          height = _props.height,
          width = _props.width,
          xTickCount = _props.xTickCount,
          yTickCount = _props.yTickCount,
          tickFormat = _props.tickFormat,
          interpolation = _props.interpolation,
          tooltipIsBoolean = _props.tooltipIsBoolean,
          tooltipBooleanTrueLabel = _props.tooltipBooleanTrueLabel,
          tooltipBooleanFalseLabel = _props.tooltipBooleanFalseLabel,
          attributes = _objectWithoutProperties(_props, ['data', 'x', 'y', 'fillColor', 'strokeColor', 'tooltip', 'dateFormat', 'unit', 'height', 'width', 'xTickCount', 'yTickCount', 'tickFormat', 'interpolation', 'tooltipIsBoolean', 'tooltipBooleanTrueLabel', 'tooltipBooleanFalseLabel']);

      return _react2.default.createElement(
        'div',
        _extends({ className: 'chart-container' }, attributes),
        _react2.default.createElement(
          _victory.VictoryChart,
          { style: { parent: { overflow: 'inherit' } }, height: height,
            scale: { x: "time", y: "linear" }, width: width },
          _react2.default.createElement(
            _victory.VictoryGroup,
            { data: data, x: x, y: y },
            _react2.default.createElement(_victory.VictoryArea, {
              interpolation: interpolation,
              style: {
                data: {
                  fill: fillColor,
                  stroke: strokeColor,
                  strokeWidth: 1,
                  strokeLinecap: 'round',
                  strokeLinejoin: 'round'
                }
              }
            }),
            AreaChartAxis.renderTooltip(tooltip, dateFormat, unit, tooltipIsBoolean, tooltipBooleanTrueLabel, tooltipBooleanFalseLabel)
          ),
          _react2.default.createElement(_victory.VictoryAxis, { tickCount: xTickCount, label: 'Time' }),
          AreaChartAxis.renderYAxis(yTickCount, tickFormat)
        )
      );
    }
  }], [{
    key: 'renderTooltip',
    value: function renderTooltip(tooltip, dateFormat, unit, tooltipIsBoolean, tooltipBooleanTrueLabel, tooltipBooleanFalseLabel) {
      if (tooltip) {
        if (tooltipIsBoolean) {
          return _react2.default.createElement(_victory.VictoryVoronoiTooltip, { labels: function labels(d) {
              return ' ' + (d.y === true ? tooltipBooleanTrueLabel : tooltipBooleanFalseLabel) + ' at ' + (0, _moment2.default)(d.x).format(dateFormat);
            } });
        }
        return _react2.default.createElement(_victory.VictoryVoronoiTooltip, { labels: function labels(d) {
            return ' ' + Math.round(d.y * 100) / 100 + unit + ' at ' + (0, _moment2.default)(d.x).format(dateFormat);
          } });
      }
    }
  }, {
    key: 'renderYAxis',
    value: function renderYAxis(tickCount, tickformat) {
      if (tickformat && tickformat.length > 0) {
        return _react2.default.createElement(_victory.VictoryAxis, { tickCount: tickCount, tickFormat: tickformat, dependentAxis: true });
      }
      return _react2.default.createElement(_victory.VictoryAxis, { tickCount: tickCount, dependentAxis: true });
    }
  }]);

  return AreaChartAxis;
}(_react2.default.Component);

exports.default = AreaChartAxis;


AreaChartAxis.propTypes = propTypes;
AreaChartAxis.defaultProps = defaultProps;