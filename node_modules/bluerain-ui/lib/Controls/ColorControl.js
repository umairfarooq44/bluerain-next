'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Block = require('./Block/Block');

var _Block2 = _interopRequireDefault(_Block);

var _reactColor = require('react-color');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// const { Hue } = require('react-color/lib/components/common');
// const { Saturation } = require('react-color/lib/components/common');

var styles = {

  colorControl: {
    display: 'flex'
  },

  controlLabel: {
    flexGrow: '1'
  },

  swatch: {
    padding: '5px',
    background: '#fff',
    borderRadius: '1px',
    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',
    cursor: 'pointer'
  },
  popover: {
    position: 'absolute',
    zIndex: '2'
  },
  cover: {
    position: 'fixed',
    top: '0px',
    right: '0px',
    bottom: '0px',
    left: '0px'
  }
};

var propTypes = {
  label: _react.PropTypes.string,
  className: _react.PropTypes.string,
  onChange: _react.PropTypes.func,
  onChangeComplete: _react.PropTypes.func,
  defaultValue: _react.PropTypes.object
};

var defaultProps = {
  label: '',
  className: '',
  onChange: function onChange() {},
  onChangeComplete: function onChangeComplete() {},
  defaultValue: {
    r: '241',
    g: '112',
    b: '19',
    a: '1'
  }
};

var style = {
  label: {
    marginBottom: 0
  }
};

var ColorControl = function (_React$Component) {
  _inherits(ColorControl, _React$Component);

  // state = {
  //   displayColorPicker: false,
  //   color: defaultProps.defaultValue,
  // }

  function ColorControl(props) {
    _classCallCheck(this, ColorControl);

    var _this = _possibleConstructorReturn(this, (ColorControl.__proto__ || Object.getPrototypeOf(ColorControl)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleClose = _this.handleClose.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleChangeComplete = _this.handleChangeComplete.bind(_this);

    _this.state = {
      displayColorPicker: false,
      color: defaultProps.defaultValue
    };
    return _this;
  }

  _createClass(ColorControl, [{
    key: 'handleClick',
    value: function handleClick() {
      this.setState({ displayColorPicker: !this.state.displayColorPicker });
    }
  }, {
    key: 'handleClose',
    value: function handleClose() {
      this.setState({ displayColorPicker: false });
    }
  }, {
    key: 'handleChange',
    value: function handleChange(color) {
      this.setState({ color: color.rgb });
      this.props.onChange(color);
    }
  }, {
    key: 'handleChangeComplete',
    value: function handleChangeComplete(color) {
      this.setState({ color: color.rgb });
      this.props.onChangeComplete(color);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          label = _props.label,
          className = _props.className;
      var color = this.state.color;


      var background = 'rgba(255,255,255,0)';

      if (this.state) {
        background = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + color.a + ')';
      }

      var colorStyle = {
        width: '36px',
        height: '14px',
        borderRadius: '2px',
        background: background
      };

      return _react2.default.createElement(
        _Block2.default,
        { style: styles.colorControl, className: 'device-control-item color-control ' + className },
        _react2.default.createElement(
          'div',
          { style: styles.controlLabel, className: 'control-label' },
          label
        ),
        _react2.default.createElement(
          'div',
          { className: 'control-value' },
          _react2.default.createElement(
            'div',
            { style: styles.swatch, onClick: this.handleClick },
            _react2.default.createElement('div', { style: colorStyle })
          ),
          this.state.displayColorPicker ? _react2.default.createElement(
            'div',
            { style: styles.popover },
            _react2.default.createElement('div', { style: styles.cover, onClick: this.handleClose }),
            _react2.default.createElement(_reactColor.SketchPicker, { color: this.state.color, onChange: this.handleChange, onChangeComplete: this.handleChangeComplete })
          ) : null
        )
      );
    }
  }]);

  return ColorControl;
}(_react2.default.Component);

ColorControl.propTypes = propTypes;
ColorControl.defaultProps = defaultProps;

exports.default = ColorControl;