'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _MuiThemeProvider = require('material-ui/styles/MuiThemeProvider');

var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
    label: _react.PropTypes.string,
    className: _react.PropTypes.string,
    defaultValue: _react.PropTypes.string,
    inputValue: _react.PropTypes.string
};

var defaultProps = {
    label: '',
    className: '',
    defaultValue: 'Input Field',
    inputValue: 'John Hopkins'
};

var style = {
    control: {
        display: 'flex'
    },
    label: {
        flexGrow: 1
    },
    value: {
        paddingLeft: 10,
        fontWeight: 'bold'
    }
};

var InputControl = function (_React$Component) {
    _inherits(InputControl, _React$Component);

    function InputControl(props) {
        _classCallCheck(this, InputControl);

        var _this = _possibleConstructorReturn(this, (InputControl.__proto__ || Object.getPrototypeOf(InputControl)).call(this, props));

        _this.state = {
            value: props.defaultValue
        };
        return _this;
    }

    _createClass(InputControl, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                label = _props.label,
                defaultValue = _props.defaultValue,
                inputValue = _props.inputValue,
                className = _props.className;


            return _react2.default.createElement(
                'div',
                { className: 'device-control-item slider-control ' + className },
                _react2.default.createElement(
                    'div',
                    { style: style.control },
                    _react2.default.createElement(
                        'div',
                        { className: 'control-label', style: style.label },
                        label
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'control-value', style: style.value },
                        defaultValue
                    )
                ),
                _react2.default.createElement(
                    _MuiThemeProvider2.default,
                    null,
                    _react2.default.createElement(_TextField2.default, {
                        hintText: inputValue
                    })
                )
            );
        }
    }]);

    return InputControl;
}(_react2.default.Component);

exports.default = InputControl;


InputControl.propTypes = propTypes;
InputControl.defaultProps = defaultProps;