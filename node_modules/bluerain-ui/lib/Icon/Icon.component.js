'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

var _reactFa = require('react-fa');

var _reactFa2 = _interopRequireDefault(_reactFa);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by saad bin saeed on 2/28/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var IconComponent = function (_React$Component) {
    _inherits(IconComponent, _React$Component);

    function IconComponent() {
        _classCallCheck(this, IconComponent);

        return _possibleConstructorReturn(this, (IconComponent.__proto__ || Object.getPrototypeOf(IconComponent)).apply(this, arguments));
    }

    _createClass(IconComponent, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                name = _props.name,
                size = _props.size,
                color = _props.color,
                backgroundColors = _props.backgroundColors,
                gradient = _props.gradient,
                src = _props.src,
                png = _props.png,
                shadow = _props.shadow,
                textColor = _props.textColor,
                text = _props.text;


            var backgroundHexColor = void 0,
                iconGradient = 'linear-gradient(to right,';

            var iconHexColor = '' + ('#' + (0, _tinycolor2.default)(color).toHex());

            var iconParent = {
                textAlign: "center",
                width: size,
                color: '#' + (0, _tinycolor2.default)(textColor).toHex(),
                fontSize: parseInt(size.slice(0, -2)) / 8 + 'px'
            };

            var iconStyle = {
                width: size,
                height: size,
                borderRadius: '10px',
                color: iconHexColor,
                // display: "inline-block",
                textAlign: "center",
                marginBottom: "7px"
            };
            if (shadow) {
                iconStyle.boxShadow = 'rgba(0,0,0,0.6) 0 0 ' + shadow;
            }
            if (png) {
                iconStyle.background = '' + ('url(' + png + ')');
                iconStyle.backgroundSize = size;
                return _react2.default.createElement(
                    'div',
                    { style: iconParent },
                    _react2.default.createElement('div', { style: iconStyle }),
                    _react2.default.createElement(
                        'span',
                        null,
                        text
                    )
                );
            }
            if (src) {
                iconStyle.background = '' + ('url(' + src + ')');
            } else {
                if (gradient) {
                    backgroundColors.forEach(function (color) {
                        iconGradient += color;
                        iconGradient += ',';
                    });
                    iconGradient = iconGradient.substring(0, iconGradient.length - 1);
                    iconGradient += ')';
                } else {
                    backgroundHexColor = '' + ('#' + (0, _tinycolor2.default)(backgroundColors[0]).toHex());
                }
                iconStyle.background = gradient ? iconGradient : backgroundHexColor;
            }
            var icon = {
                padding: parseInt(size.slice(0, -2)) / 6 + 2 + 'px 0px'
            };
            return _react2.default.createElement(
                'div',
                { style: iconParent },
                _react2.default.createElement(
                    'div',
                    { style: iconStyle },
                    _react2.default.createElement(_reactFa2.default, { size: '5x', style: icon, name: name })
                ),
                _react2.default.createElement(
                    'span',
                    null,
                    text
                )
            );
        }
    }]);

    return IconComponent;
}(_react2.default.Component);

IconComponent.propTypes = {
    name: _react.PropTypes.string,
    size: _react.PropTypes.string,
    color: _react.PropTypes.string,
    backgroundColors: _react.PropTypes.array,
    gradient: _react.PropTypes.bool,
    src: _react.PropTypes.string,
    shadow: _react.PropTypes.string,
    textColor: _react.PropTypes.string
};
IconComponent.defaultProps = {
    name: 'cube',
    size: '120px',
    color: 'white',
    backgroundColors: ['#F9006B', 'yellow'],
    gradient: false,
    src: null,
    shadow: null,
    textColor: 'black'

};
exports.default = IconComponent;