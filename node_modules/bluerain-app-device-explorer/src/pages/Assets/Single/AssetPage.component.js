import React, { PropTypes } from 'react';
import { withRouter } from 'react-router';
import AppContent from 'bluerain-ui/lib/Layout/AppContent';
import PrimaryAppNav from 'bluerain-ui/lib/Nav/PrimaryAppNav';
import SecondaryAppNav from 'bluerain-ui/lib/Nav/SecondaryAppNav';
import {
  sitePageUrl,
  assetPageUrl,
  assetReportPageUrl,
  refAssetReportPageUrl,
  deviceSettingsPageUrl
} from '../../../routes/urlBuilder';

const propTypes = {
  title: PropTypes.string,
  assetId: PropTypes.string.isRequired,
  data: PropTypes.shape({
    node: PropTypes.shape({
      id: React.PropTypes.string,
      name: React.PropTypes.string,
      image: PropTypes.shape({
        url: React.PropTypes.string
      }),
      site: PropTypes.shape({
        id: React.PropTypes.string,
        name: React.PropTypes.string,
        image: React.PropTypes.string
      }),
      type: PropTypes.shape({
        icon: PropTypes.shape({
          url: React.PropTypes.string
        }),
        name: React.PropTypes.string
      }),
      assetType: PropTypes.shape({
        name: React.PropTypes.string,
        icon: React.PropTypes.string
      })
    })
  }),
  children: PropTypes.object,
  location: PropTypes.object,
  routes: PropTypes.array
};

const defaultProps = {
  title: 'Site'
};

class Page extends React.Component {

  renderPrimaryNav() {

    let title = this.props.title;
    let icon;


    let previous;

    try {
      const id = this.props.data.node.site.id;
      const name = this.props.data.node.site.name;

      previous = {
        title: name,
        url: sitePageUrl(id)
      };
    } catch (e) {
      console.log('ERROR =>', e);
    }

    try {
      title = this.props.data.node.name;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    try {
      icon = this.props.data.node.site.image;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    if (icon === undefined || icon === null) {
      try {
        icon = this.props.data.node.assetType.icon;
      } catch (e) {
        console.log('ERROR =>', e);
      }
    }

    return (<PrimaryAppNav title={title} icon={icon} previous={previous} />);
  }

  renderSecondaryNav() {
    const { assetId } = this.props;
    const { pathname } = this.props.location;

    let settingsPath = '';
    if (this.props.routes[4] && this.props.routes[4].path) {
      settingsPath = this.props.routes[4].path;
    }
    const type = this.props.data.node.assetType.name;
    if (type === 'Refrigerator') {
      return (<SecondaryAppNav
        items={[
          {
            label: 'Overview',
            url: assetPageUrl(assetId),
            class: (pathname === assetPageUrl(assetId)) ? 'active' : ''
          }, {
            label: 'Reports',
            url: refAssetReportPageUrl(assetId),
            class: (settingsPath === 'reports' ? 'active' : '')
          }, {
            label: 'Settings',
            url: deviceSettingsPageUrl(assetId),
            class: ( settingsPath === 'device-general-settings' || settingsPath === 'device-network-settings' || settingsPath === 'device-info') ? 'active' : ''
          }
        ]}
      />);
    }
    return (<SecondaryAppNav
      items={[
        {
          label: 'Overview',
          url: assetPageUrl(assetId),
          class: (pathname === assetPageUrl(assetId)) ? 'active' : ''
        }, {
          label: 'Reports',
          url: assetReportPageUrl(assetId),
          class: (settingsPath === 'reports' ? 'active' : '')
        }, {
          label: 'Settings',
          url: deviceSettingsPageUrl(assetId),
          class: ( settingsPath === 'device-general-settings' || settingsPath === 'device-network-settings' || settingsPath === 'device-info') ? 'active' : ''
        }
      ]}
    />);
  }

  renderContent() {
    // const { assetId } = this.props;

    return (
      <AppContent>
        {this.props.children}
      </AppContent>
    );
  }

  render() {
    return (
      <div>
        {this.renderPrimaryNav()}
        {this.renderSecondaryNav()}
        {this.renderContent()}
      </div>
    );
  }
}

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

export default withRouter(Page);
