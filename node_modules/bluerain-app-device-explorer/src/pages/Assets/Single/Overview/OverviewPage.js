import React, { PropTypes } from 'react';
import { Container, Row, Col } from 'reactstrap';
import { graphql } from 'react-apollo';
import AssetTypeFetchQuery from './query.graphql';
import LightControl from '../../../../components/Asset/AssetControl/LightControl';
import SocketControl from '../../../../components/Asset/AssetControl/SocketControl';
import TPLinkSensorInfo from '../../../../components/Asset/AssetSensorInfo/TPLinkSensorInfo';
import Timeline from '../../../../components/Post/Timeline';
import ChartSlider from '../../../../components/Asset/Charts/ChartSlider/ChartSlider.widget';
import RefrigeratorChartSlider from '../../../../components/Asset/Charts/RefrigeratorChartSlider/RefrigeratorChartSlider.widget';
import TPLinkChartSlider from '../../../../components/Asset/Charts/TPLinkChartSlider/ChartSlider.widget';
import LifxChartSlider from '../../../../components/Asset/Charts/LifxChartSlider/ChartSlider.widget';
import registry from '../../../../components/ComponentRegistry';
import LightSensorInfo from '../../../../components/Asset/AssetSensorInfo/LightControlSensorInfo';
import FitbitSensorInfo from '../../../../components/Asset/FitbitSensorInfo';
const AssetControl = registry.getComponent('AssetControl', 'AC').content;
const SensorInfo = registry.getComponent('SensorInfo', 'AC').content;
const RefrigeratorSensorInfo = registry.getComponent('RefrigeratorSensorInfo', 'Fridge').content;
const RefrigeratorLocationMapView = registry.getComponent('RefrigeratorLocationMapView', 'Fridge').content;
const SpeakersControl = registry.getComponent('AssetControl', 'Speakers').content;
import Waypoint from 'react-waypoint';

const propTypes = {
  assetId: PropTypes.string,
  data: PropTypes.object,
};

const defaultProps = {};

class OverviewPage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      fix: false
    }
    this._handleLeave = this._handleLeave.bind(this);
    this._handleEnter = this._handleEnter.bind(this);
    this.flag = false;
  }

  _handleEnter = (props) => {
    const windowWidth = document.body.clientWidth;
    if (props.waypointTop >= 0 && this.flag && windowWidth > 1000) {
      this.setState({ fix: false });
    }
  }
  _handleLeave = (props) => {
    const windowWidth = document.body.clientWidth;
    if (props.waypointTop <= 0 && windowWidth > 1000) {
      this.setState({ fix: true });
      this.flag = true;
    }
  }

  render() {
    const { fix } = this.state;
    try {
      const {
        assetId
      } = this.props;

      if (!this.props.data.node || !this.props.data.node.assetType) {
        return (<div />);
      }

      const {
        name
      } = this.props.data.node.assetType;
      if (name === 'Speakers') {
        return (
          <div>
            <section>
              <Container>
                <Row>
                  <Col lg="4" md="5">
                    <SpeakersControl assetId={assetId} />
                  </Col>
                  <Col lg="8" md="7" className="col-faded">
                    <Timeline assetId={assetId} />
                  </Col>
                </Row>
              </Container>
            </section>
          </div>
        );
      } else if (name === 'Light') {
        return (
          <div>
            <section className="well">
              <LifxChartSlider assetId={assetId} />
            </section>
            <section>
              <Container>
                <Row>
                  <Col lg="4" md="5">
                    <LightControl assetId={assetId} />
                    <LightSensorInfo assetId={assetId} />
                  </Col>
                  <Col lg="8" md="7" className="col-faded">
                    <Timeline assetId={assetId} />
                  </Col>
                </Row>
              </Container>
            </section>
          </div>
        );
      } else if (name === 'Socket') {
        return (
          <div>
            <section className="well">
              <TPLinkChartSlider assetId={assetId} />
            </section>
            <section>
              <Container>
                <Row>
                  <Col lg="4" md="5">
                    <SocketControl assetId={assetId} />
                    <TPLinkSensorInfo assetId={assetId} />
                  </Col>
                  <Col lg="8" md="7" className="col-faded">
                    <Timeline assetId={assetId} />
                  </Col>
                </Row>
              </Container>
            </section>
          </div>
        );
      } else if (name === 'Air Conditioner') {
        return (
          <div>
            <section className="well">
              <ChartSlider assetId={assetId} />
            </section>
            <section>
              <Container>
                <Row>
                  <Col style={fix ? { position: 'fixed', top: '0px', width: '313px' } : null} lg="4" md="5" id="abc">
                    <AssetControl assetId={assetId} />
                    <SensorInfo assetId={assetId} />
                  </Col>
                  <Col style={fix ? { marginLeft: '314px' } : null} lg="8" md="7" className="col-faded">
                    <Waypoint onEnter={(props) => this._handleEnter(props)}
                              onLeave={(props) => this._handleLeave(props)} />
                    <Timeline assetId={assetId} />
                  </Col>
                </Row>
                <br />
              </Container>
            </section>
          </div>
        );
      } else if (name === 'Person') {
        return (
          <div>
            <section className="well" />
            <section>
              <Container>
                <Row>
                  <Col lg="4" md="5">
                    <FitbitSensorInfo assetId={assetId} />
                  </Col>
                  <Col lg="8" md="7" className="col-faded" />
                </Row>
              </Container>
            </section>
          </div>
        );
      } else if (name === 'Refrigerator') {
        return (
          <div>
            <section className="well">
              <RefrigeratorChartSlider assetId={assetId} />
            </section>
            <section>
              <Container>
                <Row>
                  <Col lg="4" md="5">
                    <RefrigeratorLocationMapView assetId={assetId} />
                    <RefrigeratorSensorInfo assetId={assetId} />
                  </Col>
                  <Col lg="8" md="7" className="col-faded">
                    <Timeline assetId={assetId} />
                  </Col>
                </Row>
              </Container>
            </section>
          </div>
        );
      }

      return (<h1> Unknown Device Found </h1>);

    } catch (error) {
      console.log(error);
    }

  }
}

OverviewPage.propTypes = propTypes;
OverviewPage.defaultProps = defaultProps;

// export default OverviewPage;

export default graphql(AssetTypeFetchQuery, {
  options: ({ assetId }) => ({ variables: { assetId } })
})(OverviewPage);
