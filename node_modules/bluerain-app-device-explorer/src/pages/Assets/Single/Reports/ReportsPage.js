import React, { PropTypes } from 'react';
import { Link } from 'react-router';
import moment from 'moment';
import { graphql } from 'react-apollo';
import { assetReportPageUrl } from '../../../../routes/urlBuilder';
import AssetTypeFetchQuery from './query.graphql';
import registry from '../../../../components/ComponentRegistry';
const CurrentChart = registry.getComponent('CurrentChart', 'Generic').content;
const EnergySavingChart = registry.getComponent('EnergySavingChart', 'Generic').content;
const VoltageChart = registry.getComponent('VoltageChart', 'Generic').content;
const PowerChart = registry.getComponent('PowerChart', 'Generic').content;
const TemperatureChart = registry.getComponent('TemperatureChart', 'Generic').content;
const RefrigeratorTemperatureChart = registry.getComponent('RefrigeratorTemperatureChart', 'Generic').content;
const TimeChart = registry.getComponent('TimeChart', 'Generic').content;
const FridgeOpenTimeChart = registry.getComponent('FridgeOpenTimeChart', 'Generic').content;

// const CurrentChart = registry.getComponent('CurrentChart', 'Generic').content;
// const VoltageChart = registry.getComponent('VoltageChart', 'Generic').content;
// const PowerChart = registry.getComponent('PowerChart', 'Generic').content;
// const TemperatureChart = registry.getComponent('TemperatureChart', 'Generic').content;
// const TimeChart = registry.getComponent('TimeChart', 'Generic').content;

const propTypes = {
  assetId: PropTypes.string,
  data: PropTypes.object,
  children: PropTypes.object
};

const defaultProps = {};

class Page extends React.Component {

  constructor(props) {
    super(props);
    if (localStorage && localStorage.end_date && localStorage.start_date) {
      this.state = {
        focusedInput: null,
        startDate: moment(localStorage.start_date),
        endDate: moment(localStorage.end_date),
      };
    } else {
      this.state = {
        focusedInput: null,
        startDate: moment().subtract(1, 'days'),
        endDate: moment(),
      };
    }
  }

  renderTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Air Conditioner') {
      return (
        <TemperatureChart
          assetId={assetId} queryString="" showGraph={false} to={temperatureReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderRefrigeratorTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Refrigerator') {
      return (
        <RefrigeratorTemperatureChart
          assetId={assetId} queryString="" showGraph={false} to={temperatureReportUrl}
          linkTag={Link} startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderCurrentChart(assetId, currentReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
      return (
        <CurrentChart
          assetId={assetId} queryString="" showGraph={false} to={currentReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderEnergySavingChart(assetId, currentReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Air Conditioner') {
      return (
        <EnergySavingChart
          assetId={assetId} queryString="" showGraph={false} to={currentReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderPowerChart(assetId, powerReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
      return (
        <PowerChart
          assetId={assetId} queryString="" showGraph={false} to={powerReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderVoltageChart(assetId, voltageReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
      return (
        <VoltageChart
          assetId={assetId} queryString="" showGraph={false} to={voltageReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderTimeChart(assetId, timeReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Socket' || this.props.data.node.assetType.name === 'Light' || this.props.data.node.assetType.name === 'Air Conditioner') {
      return (
        <TimeChart
          assetId={assetId} queryString="" showGraph={false} to={timeReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  renderFridgeOpenTimeChart(assetId, timeReportUrl, Link, startDateFormatted, endDateFormatted) {
    if (this.props.data.node.assetType.name === 'Refrigerator') {
      return (
        <FridgeOpenTimeChart
          assetId={assetId} queryString="" showGraph={false} to={timeReportUrl} linkTag={Link}
          startDate={startDateFormatted} endDate={endDateFormatted}
        />
      );
    }
    return (
      (<div />)
    );
  }

  render() {
    const assetId = this.props.assetId;
    const currentReportUrl = assetReportPageUrl(assetId, 'current');
    const energysavingReportUrl = assetReportPageUrl(assetId, 'energy-saving');
    const powerReportUrl = assetReportPageUrl(assetId, 'power');
    // const temperatureReportUrl = assetReportPageUrl(assetId, 'temperature');
    const refTemperatureReportUrl = assetReportPageUrl(assetId, 'ref_temperature');
    // const timeReportUrl = assetReportPageUrl(assetId, 'time');
    const refTimeReportUrl = assetReportPageUrl(assetId, 'ref_time');
    const voltageReportUrl = assetReportPageUrl(assetId, 'voltage');

    // const startDateFormatted = moment([1970, 1, 28]).toISOString();
    // const endDateFormatted = moment(new Date()).toISOString();

    const { startDate, endDate } = this.state;
    const startDateFormatted = moment(startDate).utc().startOf('day').toISOString();
    const endDateFormatted = moment(endDate).utc().endOf('day').toISOString();

    return (
      <div className="app-fluid">
        <div className="scrolled-sidebar border-right">
          <div className="inner-holder">
            { this.renderFridgeOpenTimeChart(assetId, refTimeReportUrl, Link, startDateFormatted, endDateFormatted) }
            { this.renderRefrigeratorTemperatureChart(assetId, refTemperatureReportUrl, Link, startDateFormatted, endDateFormatted) }
            { this.renderCurrentChart(assetId, currentReportUrl, Link, startDateFormatted, endDateFormatted) }
            { this.renderEnergySavingChart(assetId, energysavingReportUrl, Link, startDateFormatted, endDateFormatted) }
            { this.renderPowerChart(assetId, powerReportUrl, Link, startDateFormatted, endDateFormatted) }
            { this.renderVoltageChart(assetId, voltageReportUrl, Link, startDateFormatted, endDateFormatted) }
            { /* this.renderTimeChart(assetId, timeReportUrl, Link, startDateFormatted, endDateFormatted) */}
          </div>
        </div>
        <div className="container-fluid">
          {this.props.children}
        </div>
      </div>
    );
  }
}

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

export default graphql(AssetTypeFetchQuery, {
  options: ({ assetId }) => ({ variables: { assetId } })
})(Page);


// { this.renderTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) }
