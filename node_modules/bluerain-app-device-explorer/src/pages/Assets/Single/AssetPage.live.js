import React, { PropTypes } from 'react';
import PageComponent from './AssetPage.component';
import SUBSCRIPTION_QUERY from './subscription.graphql';


const propTypes = {
  data: PropTypes.object
};

const defaultProps = {
  data: {}
};

export default class LiveComponent extends React.Component {

  constructor(props) {
    super(props);

    this.subscribe = this.subscribe.bind(this);
  }

  componentDidMount() {
    this.subscribe(this.props);
  }

  componentWillReceiveProps(nextProps) {
    // subscription
    // TODO: Complete this
    if (!nextProps.data.loading) {
      if (this.subscription) {
        if (nextProps.data.feed !== this.props.data.feed) {
          // if the feed has changed, we need to unsubscribe before resubscribing
          this.subscription.unsubscribe();
        } else {
          // we already have an active subscription with the right params

        }
      }
    }
  }

  subscribe(props) {
    // console.log('fromGlobalId(props.assetId).id : ', fromGlobalId(props.assetId).id);
    console.log('subscribing', props.assetId);
    this.subscription = props.data.subscribeToMore({
      document: SUBSCRIPTION_QUERY,
      // variables: { globalId: fromGlobalId(props.assetId).id },
      variables: { options: { id: props.assetId } },

      // this is where the magic happens.
      updateQuery: (previousResult, { subscriptionData }) => {

        const subId = subscriptionData.data.Asset.asset.id;
        if (subId !== props.assetId) {
          return previousResult;
        }
        // console.log('Asset subscription :: previousResult : ', previousResult);
        // console.log('Asset subscription :: subscriptionData : ', subscriptionData);
        const asset = subscriptionData.data.Asset;
        const result = Object.assign({}, previousResult);
        const node = Object.assign({}, previousResult.node);
        result.node = node;
        result.node.state = asset.asset.state;
        // console.log('previous Data :: ', previousResult);
        return result;
      },
      onError: err => console.error(err),
    });
  }

  render() {
    return (<PageComponent {...this.props} />);
  }
}

LiveComponent.propTypes = propTypes;
LiveComponent.defaultProps = defaultProps;
