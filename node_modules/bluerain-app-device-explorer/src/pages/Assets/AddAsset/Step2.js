import React, { PropTypes } from 'react';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';
import { Button } from 'reactstrap';
import AddDeviceSecondScreenWidget from '../../../components/Device/AddDevice/SecondScreen/AddDeviceSecondScreen.widget';
import { Icon } from 'react-fa';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';

const propTypes = {
  getStore: PropTypes.func,
  updateStoreData: PropTypes.func,
  updateStoreMacId: PropTypes.func,
  jumpToStep: PropTypes.func,
  updateStoreWifiName: PropTypes.func
};

// in this step we will show user the list of the available wifi
export default class Step2 extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      stateFlag: 0,
      ssid: '',
      password: '',
      display: "none",
      displayList: "block",
      networkListBtnDisplay: "none",
      addNetworkBtnDisplay: "block",
      refreshListBtnDisplay: "block",
      warningMessageDivDisplay: "block"
    };
  }


  connectWifi(ssid) {

// wifi connection function to establish connection of access point to internet

    const data = {
      mqtt: {
        ip: '52.57.50.168',
        port: 3881,
        url: 'mqtt.mevris.io'
      }
    };

    this.props.getStore().localSDK.configure(data, (response) => {


      if (response.error === 0) {

        const wifiSetting = {
          ssid,
          protocol: 'DHCP'
        };
        this.props.getStore().localSDK.setWifi(wifiSetting, () => {
          this.props.jumpToStep(3);
        });
      } else {

        this.props.jumpToStep(0);

      }
    });
  }

// this function is called when user selects a particular WIFI
  performAction() {

    return (event, data) => {
      if (data.secure === "1") {
        // set wifiName and move to authentication
        this.props.updateStoreWifiName(data.wifiName);
        this.props.jumpToStep(2);
      } else {
        this.connectWifi(data.wifiName);
      }
    };

  }

  isValidated() {

    return false;
  }

  refetchList(event) {
    this.props.getStore().localSDK.getList((data) => {
      if (data.error) {

        this.setState({
          stateFlag: false
        });


      } else {
        this.setState({
          stateFlag: true

        });

        this.props.updateStoreData(data);
        this.props.updateStoreMacId(data.macid);
      }
    });
  }

  addNetwork(event) {
    this.setState({
      display: "block",
      displayList: "none",
      networkListBtnDisplay: "block",
      addNetworkBtnDisplay: "none",
      refreshListBtnDisplay: "none",
      warningMessageDivDisplay: "none"
    });
  }

  showNetworks(event) {
    this.setState({
      display: "none",
      displayList: "block",
      networkListBtnDisplay: "none",
      addNetworkBtnDisplay: "block",
      refreshListBtnDisplay: "block",
      warningMessageDivDisplay: "block"
    });
  }

  handleChange(event) {
    this.setState({
      ssid: event.target.value
    });
  }

  handleChangeD(event) {
    this.setState({
      password: event.target.value
    });
  }

  onSubmit(event) {
    const data = {
      mqtt: {
        ip: '52.57.50.168',
        port: 3881,
        url: 'mqtt.mevris.io'
      }
    };
    this.props.getStore().localSDK.configure(data, (response) => {

      if (response.error === 0) {

        const wifiSetting = {
          ssid: this.state.ssid,
          passphrase: this.state.password,
          protocol: 'DHCP'
        };
        this.props.getStore().localSDK.setWifi(wifiSetting, () => {
          this.props.jumpToStep(3);
        });
      } else {

        this.props.jumpToStep(0);

      }
    });
    event.preventDefault();
  }

  render() {
    return (
      <div className="step Step2">
        <form style={{"display": this.state.display}} onSubmit={this.onSubmit.bind(this)}>
          <ListViewItem>
            <label htmlFor="name">SSID</label>
            <input
              type="text" value={this.state.ssid}
              onChange={this.handleChange.bind(this)} className="form-control"
              placeholder="Enter SSID"
            />
            <label htmlFor="name">Password</label>
            <input
              type="password" value={this.state.password}
              onChange={this.handleChangeD.bind(this)}
              className="form-control"
              placeholder="Enter Password"
            />
            <small id="imageSize" className="form-text text-muted">Enter credentials for your wifi.</small>
          </ListViewItem>
          <ListViewItem>
            <button type="submit" className="btn btn-primary">Submit</button>
          </ListViewItem>
        </form>
        <div style={{"display": this.state.warningMessageDivDisplay}} className="alert alert-warning" role="alert">
          <Icon name="warning" /> <strong>Warning!</strong> if your wifi network is hidden and not being shown in list, please press Add Network button.
        </div>
        <div className="row">
          <div className="col-xs-6">
            <Button className="btn-block" style={{"display": this.state.refreshListBtnDisplay}} color="primary" onClick={this.refetchList.bind(this)}>Refresh Wi-Fi Networks List</Button>
          </div>
          <div className="col-xs-6">
            <Button className="btn-block" style={{"display": this.state.addNetworkBtnDisplay}} color="warning" onClick={this.addNetwork.bind(this)}>Add Network</Button>
          </div>
        </div>
        <Button className="btn-block" style={{"display": this.state.networkListBtnDisplay}} color="primary" onClick={this.showNetworks.bind(this)}>Wi-Fi Networks List</Button>
        <br />
        <div style={{"display": this.state.displayList}}>
          <AddDeviceSecondScreenWidget
            networks={this.props.getStore().data.networks}
            clickHandler={this.performAction()}
          />
        </div>
      </div>
    );
  }

}
Step2.propTypes = propTypes;
