import React, { PropTypes } from 'react';
import { Container, Row, Col, Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';
import { Link } from 'react-router';
import { withLoadingBar } from 'bluerain-client-services';
import AppContent from 'bluerain-ui/lib/Layout/AppContent';
import PrimaryAppNav from 'bluerain-ui/lib/Nav/PrimaryAppNav';
import StatefulWidgetGroup from '../../components/Asset/WidgetsGroup/WidgetsGroup.stateful';
import WidgetGroupGQL from '../../components/Asset/WidgetsGroup/WidgetsGroup.graphql';


const propTypes = {
  title: PropTypes.string,
  siteId: PropTypes.string,
  data: PropTypes.object,
  hideLoading: PropTypes.func,
};

const defaultProps = {
  title: 'Site',
  siteId: '',
  hideLoading: () => {},
};

class Page extends React.Component {

  constructor(props) {
    super(props);

    this.toggle = this.toggle.bind(this);
    this.state = {
      dropdownOpen: false
    };
  }

  toggle() {
    this.setState({
      dropdownOpen: !this.state.dropdownOpen
    });
  }

  static renderSecondaryNav() {
  }

  componentDidMount() {
    const { loading } = this.props.data;
    if (!loading) {
      this.props.hideLoading();
    }
  }

  renderPrimaryNav() {

    let title = this.props.title;
    let icon;
    const btnStyle = {
      margin: '0 7px '
    };
    const previous = {
      title: 'Sites',
      url: '/app/device-explorer'
    };

    try {
      title = this.props.data.node.name;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    try {
      icon = this.props.data.node.image;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    if (icon === undefined || icon === null) {
      try {
        icon = this.props.data.node.siteType.icon;
      } catch (e) {
        console.log('Error =>', e);
      }
    }

    const addDeviceUrl = `/app/device-explorer/sites/${this.props.siteId}/add-device?siteName=${this.props.data.node.name}`;
    const siteEditUrl = `/app/device-explorer/sites/${this.props.siteId}/edit`;

    return (
      <div>
        <PrimaryAppNav title={title} icon={icon} previous={previous}>
          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>
            <Button id="caret" color="primary">
              <Link to={addDeviceUrl} style={{"color": "white"}}><i className="fa fa-plus hidden-xm-down" style={{"color": "white"}} /><span
                className="hidden-xs-down" style={btnStyle}
              >Add Device</span></Link>
            </Button>
            <DropdownToggle caret color="primary" />
            <DropdownMenu>
              <DropdownItem>
                <Link to={siteEditUrl}><i className="fa fa-gear hidden-xm-down" /><span className="hidden-xs-down" style={btnStyle}>Settings</span></Link> &nbsp;
              </DropdownItem>
            </DropdownMenu>
          </ButtonDropdown>
        </PrimaryAppNav>
      </div>
    );
  }

  renderContent() {
    const { siteId } = this.props;
    const WidgetGroup = WidgetGroupGQL(StatefulWidgetGroup, siteId);

    return (
      <AppContent>
        <Container>
          <Row>
            <Col lg="12" className="pt-2">
              <WidgetGroup siteId={siteId} />
            </Col>
          </Row>
        </Container>
      </AppContent>
    );
  }

  render() {
    return (
      <div>
        {this.renderPrimaryNav()}
        {Page.renderSecondaryNav()}
        {this.renderContent()}
      </div>
    );
  }
}

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

export default withLoadingBar(Page);
