/**
 * Created by anser on 12/30/16.
 */
import React, { PropTypes } from 'react';
import Icon from 'react-fa';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

export default class EventDetail extends React.Component {

  static hasAnySensorData() {
    const {
      connected,
      ambientTemperature,
      current,
      power,
      voltage
    } = this.props.data.node.state;

    if (connected !== undefined && connected !== null) {
      return true;
    } else if (ambientTemperature !== undefined && ambientTemperature !== null) {
      return true;
    } else if (current !== undefined && current !== null) {
      return true;
    } else if (power !== undefined && power !== null) {
      return true;
    } else if (voltage !== undefined && voltage !== null) {
      return true;
    }

    return false;
  }

  static renderConnectionStatus(connected) {

    let status = null;

    if (connected === undefined || connected === null) {
      return (<div />);
    } else if (connected) {
      status = (<span>Online <Icon name="circle text-success" /></span>);
    } else {
      status = (<span>Offline <Icon name="circle text-danger" /></span>);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Status</div>
        <div className="data-value">{status}</div>
      </li>
    );
  }

  static renderAmbientTemperature(ambientTemperature) {
    if (ambientTemperature === undefined || ambientTemperature === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Room Temperature</div>
        <div className="data-value">{ambientTemperature} â„ƒ</div>
      </li>
    );
  }

  static renderCurrent(current) {
    if (current === undefined || current === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Current</div>
        <div className="data-value">{current} A</div>
      </li>
    );
  }

  static renderPower(power) {
    if (power === undefined || power === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Power</div>
        <div className="data-value">{power} W</div>
      </li>
    );
  }

  static renderVoltage(voltage) {
    if (voltage === undefined || voltage === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Voltage</div>
        <div className="data-value">{voltage} V</div>
      </li>
    );
  }

  render() {

    if (!this.props.data.node || !this.props.data.node.state) {
      return (<div />);
    }

    const {
      connected,
      ambientTemperature,
      current,
      power,
      voltage
    } = this.props.data.node.state;

    return (
      <ul className="list-group data-list">
        { EventDetail.renderConnectionStatus(connected) }
        { EventDetail.renderAmbientTemperature(ambientTemperature) }
        { EventDetail.renderCurrent(current) }
        { EventDetail.renderPower(power) }
        { EventDetail.renderVoltage(voltage) }
      </ul>
    );
  }
}

EventDetail.propTypes = propTypes;
EventDetail.defaultProps = defaultProps;
