/**
 * Created by anser on 1/16/17.
 */
import React, { PropTypes } from 'react';
import { Icon } from 'react-fa';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

export default class DeviceInfo extends React.Component {

  static renderStatus(connected) {

    let status = null;

    if (connected === undefined || connected === null) {
      return (<div />);
    } else if (connected) {
      status = (<span>Online <Icon name="circle text-success" /></span>);
    } else {
      status = (<span>Offline <Icon name="circle text-danger" /></span>);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Connection Status</div>
        <div className="data-value">{status}</div>
      </li>
    );
  }

  static renderSSID(ssid) {
    if (ssid === undefined || ssid === null) {
      return (<div />);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">SSID</div>
        <div className="data-value">{ssid}</div>
      </li>
    );
  }

  static renderConnectionType(encryption) {
    if (encryption === undefined || encryption === null) {
      return (<div />);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Connection Type</div>
        <div className="data-value">{encryption}</div>
      </li>
    );
  }

  static renderIPAddress(ip) {
    if (ip === undefined || ip === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">IP Address</div>
        <div className="data-value">{ip}</div>
      </li>
    );
  }

  static renderSubnetMask(subnet) {
    if (subnet === undefined || subnet === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Subnet Mask</div>
        <div className="data-value">{subnet}</div>
      </li>
    );
  }

  static renderRouter(gateway) {
    if (gateway === undefined || gateway === null) {
      return (<div />);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Router</div>
        <div className="data-value">{gateway}</div>
      </li>
    );
  }

  static renderDNS(dns0) {
    if (dns0 === undefined || dns0 === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">DNS</div>
        <div className="data-value">{dns0}</div>
      </li>
    );
  }

  render() {
    if (!this.props.data.node || !this.props.data.node.state || !this.props.data.node.meta) {
      return (<div />);
    }

    const {
      connected
    } = this.props.data.node.state;

    const {
      ssid,
      encryption,
      ip,
      subnet,
      dns0,
      gateway

    } = this.props.data.node.state.wifi;

    return (
      <div>
        <ul className="list-group data-list">
          { DeviceInfo.renderStatus(connected) }
        </ul>
        <br />
        <ul className="list-group data-list">
          { DeviceInfo.renderSSID(ssid) }
        </ul>
        <br />
        <ul className="list-group data-list">
          { DeviceInfo.renderConnectionType(encryption)}
          { DeviceInfo.renderIPAddress(ip) }
          { DeviceInfo.renderSubnetMask(subnet) }
          { DeviceInfo.renderRouter(gateway) }
          { DeviceInfo.renderDNS(dns0) }
        </ul>
      </div>
    );
  }
}

DeviceInfo.propTypes = propTypes;
DeviceInfo.defaultProps = defaultProps;
