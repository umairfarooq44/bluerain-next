/**
 * Created by anser on 1/16/17.
 */
import React, { PropTypes } from 'react';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

let createdDate;
let todayDate;
let timeDiff;
let diffDays;
export default class DeviceInfo extends React.Component {

  static renderType() {
    return (
      <li className="list-group-item">
        <div className="data-label">Type</div>
        <div className="data-value">Air Conditioner</div>
      </li>
    );
  }

  static renderName(name) {
    if (name === undefined || name === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Name</div>
        <div className="data-value">{name}</div>
      </li>
    );
  }

  static renderModel(model) {
    if (model === undefined || model === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Model</div>
        <div className="data-value">{model}</div>
      </li>
    );
  }

  static renderHardware(hardwareVersion) {
    if (hardwareVersion === undefined || hardwareVersion === null) {
      return (<div />);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Hardware Version</div>
        <div className="data-value">{hardwareVersion}</div>
      </li>
    );
  }

  static renderFirmware(firmwareVersion) {
    if (firmwareVersion === undefined || firmwareVersion === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Firmware Version</div>
        <div className="data-value">{firmwareVersion}</div>
      </li>
    );
  }

  static renderBatch(batchNumber) {
    if (batchNumber === undefined || batchNumber === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Batch Number</div>
        <div className="data-value">{batchNumber}</div>
      </li>
    );
  }

  static renderMACId(macId) {
    if (macId === undefined || macId === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">MAC ID</div>
        <div className="data-value">{macId}</div>
      </li>
    );
  }

  renderSubscription() {
    createdDate = new Date(this.props.data.node.createdAt);
    createdDate.setDate(createdDate.getDate() + 365);
    todayDate = new Date(Date.now());
    todayDate.setDate(todayDate.getDate());
    timeDiff = Math.abs(todayDate - createdDate);
    diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
    if (diffDays > 1) {
      return (
        <li className="list-group-item">
          <div className="data-label">Subscription Ends In</div>
          <div className="data-value">{diffDays} Days</div>
        </li>
      );
    }
    return (
      <li className="list-group-item list-group-item-danger">
        <div className="data-value">Your Subscription is expired</div>
      </li>
    );
  }


  render() {
    if (!this.props.data.node || !this.props.data.node.meta) {
      return (<div />);
    }

    const {
      name,
      model,
    } = this.props.data.node.meta;

    const {
      macId,
      hardwareVersion,
      firmwareVersion,
      batchNumber,
    } = this.props.data.node.devices.edges[0].node.meta;
    return (
      <div>
        <ul className="list-group data-list">
          { this.renderSubscription() }
        </ul>
        <br />
        <ul className="list-group data-list">
          { DeviceInfo.renderType() }
          { DeviceInfo.renderName(name) }
          { DeviceInfo.renderModel(model) }
        </ul>
        <br />
        <ul className="list-group data-list">
          { DeviceInfo.renderHardware(hardwareVersion) }
          { DeviceInfo.renderFirmware(firmwareVersion) }
          { DeviceInfo.renderBatch(batchNumber) }
        </ul>
        <br />
        <ul className="list-group data-list">
          { DeviceInfo.renderMACId(macId) }
        </ul>
      </div>
    );
  }
}

DeviceInfo.propTypes = propTypes;
DeviceInfo.defaultProps = defaultProps;
