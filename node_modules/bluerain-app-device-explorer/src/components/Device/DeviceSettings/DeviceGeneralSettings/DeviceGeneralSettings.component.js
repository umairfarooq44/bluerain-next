/**
 * Created by anser on 1/16/17.
 */
// import { withNotifications } from 'bluerain-client-services';
import Select from 'react-select';
import 'react-select/dist/react-select.css';
import { fromGlobalId } from 'graphql-relay';
import React, { PropTypes } from 'react';
import { graphql } from 'react-apollo';
import GravatarOption from 'bluerain-ui/lib/SelectDropDown/GravatarOption';
import GravatarValue from 'bluerain-ui/lib/SelectDropDown/GravatarValue';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import { withNotifications } from '../../../Notifications/withNotifications';
import SitesFetchQuery from './SitesFetchQuery.graphql';
import SiteUpdateMutation from './SiteUpdateMutation.graphql';

const propTypes = {
  siteFetch: PropTypes.object,
  mutate: PropTypes.func,
  currentSite: PropTypes.object,
  addNotification: PropTypes.func,
  notification: PropTypes.object
};

const defaultProps = {
  modeOptions: []
};

let modeOptions;
let eventObj = [];
let iconUrl;
class DeviceInfo extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      site: '',
    };
    this.handleChangeD = this.handleChangeD.bind(this);
    // this.onSubmit = this.onSubmit.bind(this);
  }

  // Form on submit
  // onSubmit(event) {
  //   const { addNotification } = this.props;
  //   const variables = {
  //     assetId: this.props.currentSite.node.id,
  //     name: this.props.currentSite.node.name,
  //     siteId: this.state.site.value ? (this.state.site && this.state.site.value) : this.props.currentSite.node.site.id
  //   };
  //   // mutation to update site
  //   this.props.mutate({
  //     variables
  //   }).catch((err) => {
  //     this.setState({ error: true });
  //   });
  //   addNotification({
  //     title: 'Success',
  //     message: 'Site updated',
  //     status: 'success',
  //     dismissible: true,
  //     dismissAfter: 3000,
  //     position: 'br'
  //   });
  //   // browserHistory.push('/app/device-explorer');
  //   event.preventDefault();
  // }

  getSites(name, id) {
    if (this.props.siteFetch.viewer) {
      modeOptions = this.props.siteFetch.viewer.sites.edges;
      eventObj = [];
      modeOptions.forEach((item) => {
        if (item.node.image) {
          iconUrl = item.node.image;
        } else {
          iconUrl = item.node.type.icon;
        }
        eventObj.push({
          label: item.node.name,
          value: item.node.id,
          icon: iconUrl
        });
      });
      return (
        <Select
          name="form-field-name"
          value={this.state.site ? this.state.site : id}
          options={eventObj}
          onChange={this.handleChangeD}
          optionComponent={GravatarOption}
          valueComponent={GravatarValue}
        />
      );
    }
    return (<div />);
  }

  // Get value of dropdown
  handleChangeD(site) {
    this.setState({
      site
    });

    const { addNotification } = this.props.notification;
    const siteGlobalId = site.value ? (site && site.value) : this.props.currentSite.node.site.id;
    const variables = {
      where: {
        id: fromGlobalId(this.props.currentSite.node.id).id
      },
      data: {
        name: this.props.currentSite.node.name,
        siteId: fromGlobalId(siteGlobalId).id
      }
    };
    // mutation to update site
    this.props.mutate({
      variables
    }).catch((err) => {
      this.setState({ error: true });
    });
    addNotification({
      title: 'Success',
      message: 'Site updated',
      status: 'success',
      dismissible: true,
      dismissAfter: 3000,
      position: 'br',
      level: 'error'
    });

  }

  render() {
    try {
      if (!this.props.currentSite.node || !this.props.currentSite.node.state) {
        return (<div />);
      }

      const {
        id,
        name
      } = this.props.currentSite.node.site;

      return (
        <ListViewItem>
          { this.getSites(name, id) }
          <small id="imageSize" className="form-text text-muted">Select a site to update your asset.</small>
        </ListViewItem>
      );
    } catch (error) {
      console.log(error);
    }

  }
}

// export default graphql(SitesFetchQuery)(
//   withNotifications(DeviceInfo)
//     );

// <ListViewItem>
// <button type="submit" id="submitBtn" className="btn btn-primary">Updatess</button>
// </ListViewItem>

export default graphql(SitesFetchQuery, { name: 'siteFetch' })(
  graphql(SiteUpdateMutation)(withNotifications(DeviceInfo)
  )
);

DeviceInfo.propTypes = propTypes;
DeviceInfo.defaultProps = defaultProps;
