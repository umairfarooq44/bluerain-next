/**
 * Created by anser on 2/21/17.
 */
import React, { PropTypes } from 'react';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';

const propTypes = {
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  addNotification: PropTypes.func,
  emailId: PropTypes.string,
  assetId: PropTypes.string,
  router: PropTypes.object
};

const defaultProps = {};

let emailFormatChecker;
let assetId;
let emailVerified;
class OwnershipTransferForm2 extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      value: '',
      onSubmitCallback: props.onSubmit
    };

    this.handleChange = this.handleChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }

  // Form on submit
  onSubmit(event) {
    try {
      event.preventDefault();
      const currentUser = this.props.data.viewer.id;
      const users = this.props.data.viewer.users.edges;
      if (users.length === 0) {
        emailVerified = null;
      } else {
        emailVerified = users[0].node.email;
      }
      const { addNotification } = this.props;
      if (this.props.emailId) {
        emailFormatChecker = /\S+@\S+\.\S+/;
        const result = emailFormatChecker.test(this.props.emailId);
        if (result === false) {
          addNotification({
            title: 'Oops',
            message: 'Email format is not valid',
            status: 'error',
            dismissible: true,
            dismissAfter: 3000,
            position: 'br'
          });
          event.preventDefault();
          return false;
        }
      }
      if (!this.props.emailId) {
        addNotification({
          title: 'Missing',
          message: 'Please provide email address',
          status: 'error',
          dismissible: true,
          dismissAfter: 3000,
          position: 'br'
        });
        event.preventDefault();
        return false;
      }
      if (emailVerified === null) {
        addNotification({
          title: 'Ouch',
          message: 'The user with this email is either not registered or email is not verified in our system',
          status: 'error',
          dismissible: true,
          dismissAfter: 6000,
          position: 'br'
        });
        event.preventDefault();
        return false;
      }
      addNotification({
        title: 'Success',
        message: 'User Found with this email',
        status: 'success',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br'
      });

      this.props.router.push(`/app/device-explorer/assets/${assetId}/ownership-transfer/${users[0].node.id}?current_user=${currentUser}`);
    } catch (error) {
      console.info('Something went wrong');
    }
  }

  // Get value of asset name
  handleChange(event) {
    // emailId = event.target.value;
    this.setState({
      value: event.target.value,
    });
  }

  render() {
    assetId = this.props.assetId;
    return (
      <form onSubmit={this.onSubmit} noValidate>
        <ListViewItem style={{ display: 'none' }}>
          <input
            type="email" value={this.props.emailId} onChange={this.handleChange} className="form-control"
            aria-describedby="email" placeholder="Email Address"
          />
          <small className="form-text text-muted">Enter email address of the user you want to transfer ownership.
          </small>
        </ListViewItem>
        <ListViewItem>
          <button type="submit" className="btn btn-primary">Transfer</button>
        </ListViewItem>
      </form>
    );
  }
}


export default OwnershipTransferForm2;

/* export default
 (
 graphql(EmailCheckQuery, {
 options: (args) => {
 const emailID = args.emailId;
 const queryString = `{\"condition\":\"equalTo\",\"key\":\"email\",\"value\":\"${emailID}\"}`;

 return { variables: { queryString } };
 }
 })(
 withNotifications(withRouter(OwnershipTransferForm2))
 )
 );*/

OwnershipTransferForm2.propTypes = propTypes;
OwnershipTransferForm2.defaultProps = defaultProps;
