/**
 * Created by anser on 2/23/17.
 */
import React, { PropTypes } from 'react';
import Media from 'reactstrap/lib/Media';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import { graphql } from 'react-apollo';
import { withRouter } from 'react-router';
import { Icon } from 'react-fa';
// import { withNotifications } from 'bluerain-client-services';
import { withNotifications } from '../../../../Notifications/withNotifications';
import Query from './UserQuery.graphql';
import OwnershipTransferMutation from './OwnershipTransferMutation.graphql';


const propTypes = {
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  assetId: PropTypes.string,
  ownerId: PropTypes.string,
  userId: PropTypes.string,
  mutate: PropTypes.func,
  addNotification: PropTypes.func,
  notification: PropTypes.func
};

const defaultProps = {};

class UserInfoTransfer extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      value: '',
      onSubmitCallback: props.onSubmit
    };
    this.onSubmit = this.onSubmit.bind(this);
  }

  // Form on submit
  onSubmit(event) {
    event.preventDefault();
    const { addNotification } = this.props.notification;
    const assetId = this.props.assetId;
    const variables = {
      asset: { globalId: assetId },
      currentOwnerUserId: this.props.ownerId,
      newOwnerUserId: this.props.userId,
      status: 'Pending',
      transferType: 'Asset'
    };

    // mutation to update asset
    this.props.mutate({
      variables
    });
    addNotification({
      title: 'Success',
      message: 'Ownership transferred',
      status: 'success',
      dismissible: true,
      dismissAfter: 3000,
      position: 'br',
      level: 'error'
    });
  }

  static renderFirstName(firstName) {
    return (
      <li className="list-group-item">
        <div className="data-label">First Name</div>
        <div className="data-value">{firstName}</div>
      </li>
    );
  }

  static renderLastName(lastName) {
    return (
      <li className="list-group-item">
        <div className="data-label">Last Name</div>
        <div className="data-value">{lastName}</div>
      </li>
    );
  }

  static renderEmail(email) {
    if (email === undefined || email === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Email</div>
        <div className="data-value">{email}</div>
      </li>
    );
  }

  static renderProfilePic(profilePicture) {
    if (profilePicture === undefined || profilePicture === null) {
      return (<div />);
    }

    return (
      <ListViewItem>
        <Media left>
          <img
            id="site_logo" role="presentation" style={{ height: '100px', width: '100px', borderRadius: '5px' }}
            src={profilePicture.url}
          />
        </Media>
      </ListViewItem>
    );
  }

  renderForm() {
    return (
      <li className="list-group-item">
        <div className="data-label">
          <form onSubmit={this.onSubmit} noValidate>
            <button type="submit" className="btn btn-primary">Continue</button>
          </form>
        </div>
      </li>
    );
  }

  render() {
    if (!this.props.data || !this.props.data.node) {
      return (<div />);
    }

    const {
      email,
      firstName,
      lastName,
      profilePicture
    } = this.props.data.node;
    return (
      <div>
        <ul className="list-group data-list">
          { UserInfoTransfer.renderProfilePic(profilePicture) }
          { UserInfoTransfer.renderFirstName(firstName)}
          { UserInfoTransfer.renderLastName(lastName) }
          { UserInfoTransfer.renderEmail(email) }
          { this.renderForm() }
        </ul>
        <div style={{ paddingTop: '20px' }}>
          <div className="alert alert-warning" role="alert">
            <Icon name="map-marker" /> <strong>Warning!</strong> After pressing "Continue", you will no longer be able
            to
            control this asset.
          </div>
        </div>
      </div>
    );
  }
}

const componentWithQuery = graphql(Query, {
  options: ({ userId }) => ({ variables: { userId } })
})(UserInfoTransfer);
export default graphql(OwnershipTransferMutation)(withNotifications(withRouter(componentWithQuery)));

UserInfoTransfer.propTypes = propTypes;
UserInfoTransfer.defaultProps = defaultProps;
