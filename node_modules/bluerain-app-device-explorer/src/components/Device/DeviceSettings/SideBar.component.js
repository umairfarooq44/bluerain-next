/**
 * Created by anser on 1/16/17.
 */
import React, { PropTypes } from 'react';
import { Icon } from 'react-fa';
import { Link } from 'react-router';
import { graphql } from 'react-apollo';
import { fromGlobalId } from 'graphql-relay';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import SiteFindQuery from './query.graphql';
import SiteNameQuery from './siteNameQuery.graphql';

const propTypes = {
  assetId: PropTypes.string,
  routes: PropTypes.array,
  siteFind: PropTypes.object,
  siteName: PropTypes.object
};

const defaultProps = {};
let addDeviceUrl;
let params;
let siteName;
class SideBar extends React.Component {

  render() {
    if (this.props.siteName && this.props.siteName.Site) {
      siteName = this.props.siteName.Site.SiteFind.edges[0].node.name;
    }
    if (this.props.siteFind && this.props.siteFind.Asset) {
      addDeviceUrl = `/app/device-explorer/sites/${this.props.siteFind.Asset.AssetFind.edges[0].node.siteId}/add-device?siteName=${siteName}&state="update"`;
    }
    const deviceInfoRoute = `/app/device-explorer/assets/${this.props.assetId}/device-info`;
    const networkSettingsRoute = `/app/device-explorer/assets/${this.props.assetId}/device-network-settings`;
    const generalSettingsRoute = `/app/device-explorer/assets/${this.props.assetId}/device-general-settings`;

    let settingsPath = '';
    if (this.props.routes[4] && this.props.routes[4].path) {
      settingsPath = this.props.routes[4].path;
    }

    return (
      <ul className="list-group">
        <ListViewItem
          className={settingsPath === 'device-general-settings' ? 'active' : ''} tag={Link}
          to={generalSettingsRoute} action chevronRight={false}
        >
          <Icon name="gear" className="fa-fw" />&nbsp;
          General
        </ListViewItem>
        <ListViewItem
          className={settingsPath === 'device-network-settings' ? 'active' : ''} tag={Link}
          to={networkSettingsRoute} action chevronRight={false}
        >
          <Icon name="wifi" className="fa-fw" />&nbsp;
          Network
        </ListViewItem>
        <ListViewItem
          className={settingsPath === 'device-info' ? 'active' : ''} tag={Link}
          to={deviceInfoRoute} action chevronRight={false}
        >
          <Icon name="info-circle" className="fa-fw" />&nbsp;
          About
        </ListViewItem>
        <ListViewItem
          tag={Link}
          to={addDeviceUrl} action chevronRight={false}
        >
          <Icon name="signal" className="fa-fw" />&nbsp;
          Wi-Fi Configuration
        </ListViewItem>
      </ul>
    );
  }
}

SideBar.propTypes = propTypes;
SideBar.defaultProps = defaultProps;

export default graphql(SiteFindQuery, {
  name: 'siteFind',
  options: (args) => {
    const queryString = {
      where: {
        id: fromGlobalId(args.assetId).id,
      }
    };
    return { variables: { queryString } };
  }
})(
  graphql(SiteNameQuery, { name: 'siteName', options: (args) => {
    if (args.siteFind.Asset) {
      params = args.siteFind.Asset.AssetFind.edges[0].node.siteId;
    }
    const queryString = {
      where: {
        id: params
      }
    };
    return { variables: { queryString } };
  } })(SideBar)
);