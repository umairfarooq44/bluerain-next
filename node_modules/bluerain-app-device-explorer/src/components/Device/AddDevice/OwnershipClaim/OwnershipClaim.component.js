import React, { PropTypes } from 'react';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import { browserHistory } from 'react-router';
import { graphql } from 'react-apollo';
import { ComponentState } from 'bluerain-ui/lib/ComponentState/ComponentState.component';
import 'bluerain-bootstrap-theme/dist/css/components/component-state.css';
import { fromGlobalId } from 'graphql-relay';
import assetFetchQuery from './query.graphql';
import assetUpdateQuery from './mutation.graphql';
import assetSaveQuery from './assetSave.graphql';
import deviceSaveQuery from './deviceUpdate.graphql';
import eventSaveMutation from './eventSaveMutation.graphql';
import { sitePageUrl } from '../../../../routes/urlBuilder';

const propTypes = {
  siteId: PropTypes.string,
  asset: PropTypes.object,
  assetUpdate: PropTypes.func,
  assetSave: PropTypes.func,
  eventSave: PropTypes.func
};

class OwnershipClaim extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      device: ''
    };

    this.assetId = '';
    this.userId = '';
    this.device = {};
    this.siteId = '';
    this.onSubmit = this.onSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  componentDidUpdate() {

    if (!this.notFound && !this.error) {
      // collect required data for any scenario.
      this.device = this.getDevice(); // if (!Devie) disply not found.
      this.assetId = this.getAsset().id; // if (!Asset && Device) Create one and assign to device.
      this.userId = this.getUser().id; // if (!User) show error
      this.siteId = this.getSite().id; // if (!Site) show error

      const ref = this;
      // Check for existance of device Id and asset Id and check if asset is already added.
      // if (DeviceId && AssetId) (Update Value inside submit handler)
      // if (DeviceId && !AssetID) (Create Asset, change flag, get asset ID and update Device.
      if (this.device && this.device.id && !this.assetId && !this.assetAdded && !this.props.asset.loading) {
        this.assetAdded = true;
        // Saving Asset;
        this.props.assetSave({

          variables: {
            data: {
              ownerId: fromGlobalId(this.userId).id,
              siteId: fromGlobalId(this.siteId).id,
              assetTypeId: '58ee350255e4de7719499f70',
              name: 'Unnamed',
              state: { connected: false }
            }
          }

        }).then((data) => {
          ref.assetId = data.data.Asset.AssetCreate.obj.id;
          // console.log('Asset Added', ref.assetId);
          // console.log(ref.device);
          // console.log(ref.props.deviceSave);

          ref.props.deviceSave({
            variables: {
              where: { id: fromGlobalId(ref.getDevice().id).id },
              data: {
                name: ref.getDevice().name,
                assetId: fromGlobalId(ref.getAsset().id).id
              }
            }
          }).then((data) => {
            const device = data.data.Device.DeviceUpsertWithWhere.obj;
            const eventObj = {
              type: 'state',
              data: { activated: true },
              assetId: device.assetId,
              deviceId: fromGlobalId(device.id).id
            };
            eventObj.sourceAccountId = fromGlobalId(this.getUser().id).id;
            this.props.eventSave({
              variables: { data: eventObj }
            }).then((data) => {
              // console.log('data in after event save', data);
            }).catch((err) => {
              // console.log('errr in event save', err);
            });
            // console.log('Device linked', data);
          }).catch((err) => {
            // console.log('Error Linking device to asset', err);
            this.error = true;
            ref.setState({ error: true });
          });
        }).catch((err) => {
          ref.assetAdded = false;
          // console.log('cant add asset', err);
          this.error = true;
          this.setState({ error: true });
        });
      }
    }
  }

  // Form on submit
  onSubmit(event) {
    event.preventDefault();
    this.setState({ loading: true });
    const url = sitePageUrl(this.getSite().id);


    this.props.assetUpdate({
      variables: {
        where: {
          id: fromGlobalId(this.getAsset().id).id
        },
        data: {
          ownerId: fromGlobalId(this.getUser().id).id,
          siteId: fromGlobalId(this.siteId).id,
          name: this.state.device
        }
      }
    }).then((data) => {
      browserHistory.push(url);
    }).catch((err) => {
      console.log('Error Occured while submitting asset change', err);
      this.setState({ error: true });
    });
  }

  // try to fetch siteId
  getSite() {
    if (this.siteId) return { id: this.siteId };
    try {
      return { id: this.props.siteId };
    } catch (e) {
      // console.log('No Site Found', e);
      this.error = true;
      this.setState({ error: true });
    }
  }

  // Try to get device.
  getDevice() {
    // if DeviceId is available in device object, send it.
    if (this.device && this.device.id) return this.device;

    // Else get it from .
    try {
      const deviceList = this.props.asset.Device.DeviceFindOne;

      if (deviceList) {
        return this.props.asset.Device.DeviceFindOne;
      }
      // console.log('device not found');
      this.notFound = true;
      this.setState({ notFound: true });
      return {};
    } catch (err) {
      console.log(err);
      this.error = true;
      this.setState({ error: true });
    }
  }

  // Fetch user ID from Device fetched using viewer query.
  // User is a part of Viewer in a viewer query.
  getUser() {
    // if userId already there, send it, else try to get it from Viewer.
    if (this.userId) return { id: this.userId };

    try {
      return this.props.asset.viewer.me;
    } catch (err) {
      // console.log('User not found', err);
      this.error = true;
      this.setState({ error: true });
    }
  }

  // return asset, if no asset, return empty object.
  // Asset can only be returned if its assigned to any device.
  getAsset() {
    if (this.assetId) return { id: this.assetId };
    return this.getDevice().asset || {};
  }

  // Render proceed button after checking for change.
  getProceedButton() {

    // if asset state is changed, check for empty.
    if (this.changed) {
      // if Asset Name is empty after any change, disabled button
      if (!this.deviceEmpty) {
        return <button disabled type="submit" className="btn btn-primary">Add</button>;
      }
      // if Asset name isn't empty, enable button
      return <button type="submit" className="btn btn-primary">Add</button>;

    } else if (this.deviceEmpty) {
      // if device is empty without any change in state, disable button
      return <button disabled type="submit" className="btn btn-primary">Add</button>;
    }

    // by default, disabled
    return <button disabled type="submit" className="btn btn-primary">Add</button>;
  }

  // Input field change handler.
  handleChange(event) {
    this.setState({
      device: event.target.value
    });

    // handles if the button should be enabled or disabled.
    this.changed = true;
    this.deviceEmpty = event.target.value.length;
  }

  render() {
    if (this.state.error || this.error) {
      // Show error message
      return (
        <ComponentState
          image="swearing-male.svg"
          imageSize="sm"
          card
          title="Err.."
          description="Looks like something broke."
        />
      );
    } else if (this.state.loading) {
      // Loading State
      return (
        <div className="component-state">
          <h4 className="card-title">Loading</h4>
          <p className="card-text text-muted">Please wait, we are on it!</p>
        </div>
      );
    } else if (this.state.notFound || this.notFound) {
      // Component not found statea
      return (
        <div className="component-state">
          <h4 className="card-title">Device not found</h4>
          <p className="card-text text-muted">Please contact our helpline!</p>
        </div>
      );
    }
    // Renders small form with a submit button and input box to enter device name;
    return (

      <form onSubmit={this.onSubmit}>

        <ListViewItem>
          <label htmlFor="dname">Device Name</label>
          <input
            id="dname" type="text" value={this.state.device} onChange={this.handleChange} className="form-control"
            aria-describedby="name" placeholder="Device Name"
          />
        </ListViewItem>

        <ListViewItem className="text-xs-right">
          {
            this.getProceedButton()
          }
        </ListViewItem>


      </form>
    );
  }
}

OwnershipClaim.propTypes = propTypes;

export default graphql(assetFetchQuery, {
  name: 'asset',
  options: (args) => {
    const query = { where: { 'meta.macId': args.macId } };
    return { variables: { query } };
  }
})(
  graphql(assetUpdateQuery, { name: 'assetUpdate' })(
    graphql(assetSaveQuery, { name: 'assetSave' })(
      graphql(deviceSaveQuery, { name: 'deviceSave' })(
        graphql(eventSaveMutation, { name: 'eventSave' })(OwnershipClaim)
      )
    )
  )
);
