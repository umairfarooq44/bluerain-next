/**
 * Created by anser on 29/6/17.
 */
import React, { PropTypes } from 'react';
import { graphql } from 'react-apollo';
import { Link } from 'react-router';
import { fromGlobalId } from 'graphql-relay';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import { withNotifications } from '../../Notifications/withNotifications';
import SiteUpdateMutation from './mutation.graphql';
import Query from './query.graphql';

const propTypes = {
  name: PropTypes.string.isRequired,
  onNameChange: PropTypes.func,
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  mutate: PropTypes.func,
  onError: PropTypes.func,
  notification: PropTypes.object,
};

const defaultProps = {
  name: '',
  onNameChange: () => {
  },
  onSubmit: () => {
  }
};

let limitLength;
let extract;
let extraValidations;
let button;

class SiteEditForm extends React.Component {

  constructor(props) {
    super(props);
    // ********** VALIDATIONS *****************
    limitLength = (str, length) => str.substring(0, length);
    extract = (str, pattern) => (str.match(pattern) || []).pop() || '';
    extraValidations = str => extract(str, "[0-9a-zA-Z:'!$%^&*_ ]+");
    // ********** VALIDATIONS *****************
    this.state = {
      value: '',
      onNameChangeCallback: props.onNameChange,
      onSubmitCallback: props.onSubmit
    };

    this.handleChange = this.handleChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);


    this.onNameChange = this.onNameChange.bind(this);
  }

  componentWillReceiveProps(props) {
    const state = props.data.node ? props.data.node.name : '';

    this.setState({
      value: state
    });
  }

  onNameChange(event) {
    const state = this.state;
    const name = event.target.value;

    state.data.name = name;

    this.state.onNameChangeCallback(name);
    this.setState(state);
  }


  // Form on submit
  onSubmit(event) {
    const currentName = this.props.data.node.name;
    const newName = this.state.value;
    const { addNotification } = this.props.notification;
    if (!newName) {
      addNotification({
        title: 'Missing',
        message: 'Please provide Site name',
        status: 'error',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br',
        level: 'error'
      });
      event.preventDefault();
      return false;
    }
    if (newName === currentName) {
      addNotification({
        title: 'Warning',
        message: 'Please provide a new site name',
        status: 'error',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br',
        level: 'warning'
      });
      event.preventDefault();
      return false;
    }
    const variables = {
      where: {
        id: fromGlobalId(this.props.data.node.id).id
      },
      data: {
        name: newName
      }
    };
    // mutation to update asset
    this.props.mutate({
      variables
    });
    addNotification({
      title: 'Success',
      message: 'Site name updated',
      status: 'success',
      dismissible: true,
      dismissAfter: 3000,
      position: 'br',
      level: 'success'
    });
    // browserHistory.push('/app/device-explorer');
    event.preventDefault();
  }

  // Get value of name
  handleChange(event) {
    this.setState({
      value: limitLength(extraValidations(event.target.value), 25)
    });
  }

  render() {
    if (!this.props.data.node || !this.props.data.node.name) {
      return (<div />);
    }
    return (
      <form onSubmit={this.onSubmit}>
        <ListViewItem>
          <label htmlFor="name">Site Name</label>
          <input
            type="text" value={this.state.value ? this.state.value : this.props.data.node.name} onChange={this.handleChange} className="form-control"
            placeholder="Site Name"
          />
        </ListViewItem>
        <ListViewItem className="text-xs-right">
          <Link to="/app/device-explorer">
            Cancel
          </Link>&nbsp;&nbsp;&nbsp;
          <button type="submit" className="btn btn-primary">Update</button>
        </ListViewItem>
      </form>
    );
  }
}


// export default SiteEditForm;

export default (
  graphql(SiteUpdateMutation, {
    options: {
      refetchQueries: [
        'SitesFetchQuery',
      ]
    }
  })(
    graphql(Query, {
      options: ({ siteId }) => (
        { variables: { siteId } }
      )
    })(
      withNotifications(SiteEditForm)
    )
  )
);
SiteEditForm.propTypes = propTypes;
SiteEditForm.defaultProps = defaultProps;
