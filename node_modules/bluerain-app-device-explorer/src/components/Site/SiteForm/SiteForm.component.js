/**
 * Created by anser on 1/3/17.
 */
import React, { PropTypes } from 'react';
import { graphql } from 'react-apollo';
import { Gmaps, Marker } from 'react-gmaps';
import { geolocated } from 'react-geolocated';
import { Icon } from 'react-fa';
import Media from 'reactstrap/lib/Media';
import { Link, browserHistory } from 'react-router';
import Select from 'react-select';
import 'react-select/dist/react-select.css';
import axios from 'axios';
import ipLocator from 'ip-locator';
import ListViewItem from 'bluerain-ui/lib/ListView/ListViewItem';
import GravatarOption from 'bluerain-ui/lib/SelectDropDown/GravatarOption';
import GravatarValue from 'bluerain-ui/lib/SelectDropDown/GravatarValue';
import { fromGlobalId } from 'graphql-relay';
import SiteSaveMutation from './mutation.graphql';
import SiteTypeQuery from './query.graphql';

import { lat, lon } from '../../../../config.global';

const propTypes = {
  name: PropTypes.string.isRequired,
  image: PropTypes.string,
  onNameChange: PropTypes.func,
  onImageChange: PropTypes.func,
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  mutate: PropTypes.func,
  onError: PropTypes.func,
  isGeolocationEnabled: PropTypes.bool,
  coords: PropTypes.object
};

const defaultProps = {
  name: '',
  image: 'https://s3-us-west-2.amazonaws.com/bluerainimages/icon-default-sites.svg',
  onNameChange: () => {
  },
  onImageChange: () => {
  },
  onSubmit: () => {
  },

  // Modes
  modeOptions: []
};

let latitude;
let longitude;

let limitLength;
let extract;
let extraValidations;
let modeOptions;
let button;
let eventObj = [];
let IP;

class SiteForm extends React.Component {

  constructor(props) {
    super(props);
    // ********** VALIDATIONS *****************
    limitLength = (str, length) => str.substring(0, length);
    extract = (str, pattern) => (str.match(pattern) || []).pop() || '';
    extraValidations = str => extract(str, "[0-9a-zA-Z:'!$%^&*_ ]+");
    // ********** VALIDATIONS *****************
    this.state = {
      value: '',
      siteType: '',
      lat: lat,
      lon: lon,
      data: {
        name: props.name,
        image: props.image,
      },
      initialState: {
        name: props.name,
        image: props.image,
      },
      onNameChangeCallback: props.onNameChange,
      onImageChangeCallback: props.onImageChange,
      onSubmitCallback: props.onSubmit
    };

    this.handleChange = this.handleChange.bind(this);
    this.handleChangeD = this.handleChangeD.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onSubmitLocation = this.onSubmitLocation.bind(this);

    this.onDragEnd = this.onDragEnd.bind(this);

    this.onNameChange = this.onNameChange.bind(this);
    this.onImageChange = this.onImageChange.bind(this);
  }

  componentDidMount() {
    axios.get('https://api.ipify.org') // get ISP IP address
    .then((res) => {
      IP = res.data;
      ipLocator.getDomainOrIPDetails(IP, 'json', (err, data) => { // get location from IP
        this.setState({
          lat: data.lat,
          lon: data.lon
        });
      });
    });
  }

  componentWillReceiveProps(nextProps) {
    if (!this.state.siteType && !nextProps.data.loading) {
      const sites = nextProps.data.SiteType.SiteTypeFind.edges;
      this.setState({
        siteType: {
          value: sites[0].node.id,
          label: sites[0].node.name,
          icon: sites[0].node.icon
        }
      });
    }
  }

  onNameChange(event) {
    const state = this.state;
    const name = event.target.value;

    state.data.name = name;

    this.state.onNameChangeCallback(name);
    this.setState(state);
  }

  // Image preview
  onImageChange(event) {
    const imageFile = event.target.files[0];
    const imageSize = imageFile.size / 1024;
    if (imageSize > 1000) {
      alert('Image not uploaded, size limit exceeded');
    } else {
      const state = this.state;
      state.data.imageFile = imageFile;

      // Render process
      const my = this;

      // generate a new FileReader object
      const reader = new FileReader();

      // inject an image with the src url
      reader.onload = function(event) {

        const image = event.target.result;
        state.data.image = image;

        my.setState(state);
      };

      // when the file is read it triggers the onload event above.
      reader.readAsDataURL(imageFile);
    }

  }

  // Get value of map
  onDragEnd(e) {
    const { latLng } = e;
    latitude = latLng.lat();
    longitude = latLng.lng();

  }


  // Form on submit
  onSubmitLocation(event) {
    alert('Please enable your location');
    event.preventDefault();
  }

  // Form on submit
  onSubmit(event) {
    if (!this.state.value) {
      alert('Please provide Site Name');
      event.preventDefault();
      return false;
    }
    const variables = {
      name: this.state.value,
      description: this.state.description,
      image: this.state.data.image,
      siteTypeId: this.state.siteType.value// ? this.state.siteType.value : modeOptions[0].node.id
      // owner: 'VXNlcjpsVHlIUW10RmRj'
    };
    variables.siteTypeId = variables.siteTypeId;
    // if no image is uploaded or image size limit is exceeded
    if (this.state.data.image === undefined ||
      this.state.data.image === null || !this.state.data.imageFile ||
      this.state.data.imageFile === null
    ) {
      variables.image = this.state.siteType ? this.state.siteType.icon : '';
    }
    // if location is enabled
    if (latitude && longitude) {
      variables.location = {
        lat: latitude,
        lng: longitude
      };
    } else {
      variables.location = {
        lat: this.state.lat,
        lng: this.state.lon
      };
    }

    // Find Viewer
    try {
      const viewerId = this.props.data.viewer.me.id;
      variables.ownerId = fromGlobalId(viewerId).id;
    } catch (e) {
      return this.props.onError(e);
    }
    // mutation to create site
    this.props.mutate({
      variables: { data: variables }
    });
    browserHistory.push('/app/device-explorer');
    event.preventDefault();

  }

  // Site Type drop down
  getSiteType() {
    if (this.props.data.viewer) {
      modeOptions = this.props.data.SiteType.SiteTypeFind.edges;
      eventObj = [];
      modeOptions.forEach((item) => {
        eventObj.push({
          label: item.node.name,
          value: item.node.id,
          icon: item.node.icon
        });
      });
      return (
        <div className="section">
          <Select
            name="form-field-name"
            value={this.state.siteType}
            options={eventObj}
            onChange={this.handleChangeD}
            optionComponent={GravatarOption}
            valueComponent={GravatarValue}
          />
        </div>
      );
    }
    return (<div />);
  }

  // Google Map
  getMap() {
    if (!this.props.isGeolocationEnabled) {
      button =
        (<div style={{ paddingTop: '20px' }}>
          <div className="alert alert-warning" role="alert">
            <Icon name="map-marker" /> <strong>Warning!</strong> Please enable your location.
          </div>
        </div>);
    }
    return (
      <div id="map">
        <Gmaps
          width={'100%'}
          height={'250px'}
          id="my_map"
          lat={latitude}
          lng={longitude}
          zoom={5}
          params={{ v: '3.exp', key: 'AIzaSyCgVYH02v3XYmCSIokoLOZzvUqJG6ZamMY' }}
        >
          <Marker
            lat={latitude}
            lng={longitude}
            onDragEnd={this.onDragEnd}
            draggable
          />
        </Gmaps>
        {button}
      </div>
    );
  }

  // Get value of dropdown
  handleChangeD(siteType) {
    this.setState({
      siteType
    });
  }

  // Get value of name
  handleChange(event) {
    this.setState({
      value: limitLength(extraValidations(event.target.value), 25)
    });
  }

  render() {
    if (this.props.coords) {
      latitude = this.props.coords.latitude;
      longitude = this.props.coords.longitude;
    } else {
      // latitude = 30.3753;
      // longitude = 69.3451;
      latitude = this.state.lat;
      longitude = this.state.lon;
    }
    const {
      image
    } = this.state.data;

    let imageSrc = '';
    if (image !== 'https://s3-us-west-2.amazonaws.com/bluerainimages/icon-default-sites.svg') {
      imageSrc = image;
    } else {
      imageSrc = this.state.siteType ? this.state.siteType.icon : image;
    }
    return (
      <form onSubmit={this.onSubmit}>
        <ListViewItem>
          <label htmlFor="name">Site Name</label>
          <input
            type="text" value={this.state.value} onChange={this.handleChange} className="form-control"
            aria-describedby="name" placeholder="Site Name"
          />
        </ListViewItem>
        <ListViewItem>
          <label htmlFor="type">Site Type</label>
          {this.getSiteType()}
        </ListViewItem>
        <ListViewItem>
          <label>Location</label>
          {this.getMap()}
        </ListViewItem>
        <ListViewItem>
          <div className="media">
            <Media left>
              <img
                role="presentation"
                id="site_logo" style={{ height: '100px', width: '100px', borderRadius: '5px' }}
                src={imageSrc}
              />
            </Media>
            <div className="media-body">
              <div>
                <label htmlFor="picture">Display Picture</label>
              </div>
              <input type="file" id="imgInp" onChange={this.onImageChange} />
              <small id="imageSize" className="form-text text-muted">Image size should not exceed 1 MB.</small>
            </div>
          </div>
        </ListViewItem>
        <ListViewItem className="text-xs-right">
          <Link to="/app/device-explorer">
            Cancel
          </Link>&nbsp;
          <button type="submit" className="btn btn-primary">Submit</button>
        </ListViewItem>
      </form>
    );
  }
}


// export default SiteForm;

export default geolocated({
  positionOptions: {
    enableHighAccuracy: true,
    maximumAge: 0,
    timeout: Infinity,
  },
  userDecisionTimeout: null,
})(
  graphql(SiteSaveMutation, {
    options: {
      refetchQueries: [
        'SitesFetchQuery',
      ]
    }
  })(
    graphql(SiteTypeQuery)(
      (SiteForm)
    )
  )
);
SiteForm.propTypes = propTypes;
SiteForm.defaultProps = defaultProps;
