import componentList from './componentList';

const singleton = Symbol('singleton');
const singletonEnforcer = Symbol('singleton-enforcer');

/**
 * Component registery is going to require 2 things
 * 1) Name of components
 * 2) Type/device of components
 */
class ComponentRegistry {

  constructor(enforcer) {
    if (enforcer !== singletonEnforcer) {
      // console.log('cant create another instance');
    }
    this.components = {};
  }

  /**
   * if everything is given, add component and return it back.
   * else return error object with 1 as code
   */
  addComponent(name, type, comp) {
    if (name && type && comp) {
      if (!this.components[name]) this.components[name] = {};

      this.components[name][type] = comp;
      // console.log(`component ${name}.${type} added - `, this.components);
      return {
        error: 0,
        content: this.getComponent(name, type)
      };
    }

    return {
      error: 1,
      content: `Something is null, Name: ${name}, Type: ${type}, Comp: ${comp}`
    };
  }

  /**
   * Return component;
   */
  getComponent(name, type) {
    if (name && type) {
      if (!this.components[name]) this.components[name] = {};

      const content = this.components[name][type];
      if (!content) {
        return { error: 1, content: `Component of Name: ${name} & Type: ${type} not found` };
      }
      return { error: 0, content };
    }

    return { error: 1, content: `Something passed null, name: ${name} or type: ${type}` };

  }

  removeComponent(name, type) {
    if (name && type) {
      if (this.components[name][type]) {
        delete this.components[name][type];
        return {
          error: 0,
          content: `Deleted component ${name}.${type}`
        };
      }
      return {
        error: 1,
        content: `Component ${name}.${type} not found`
      };
    }
    return {
      error: 1,
      content: `something passed null, Name: ${name}, Type: ${type}`
    };

  }

  static get instance() {
    if (!this[singleton]) {
      const componentRegistry = this[singleton] = new ComponentRegistry(singletonEnforcer);

      componentList.forEach((component) => {
        componentRegistry.addComponent(component.name, component.type, component.element);
      });

    }
    return this[singleton];
  }
}

export default ComponentRegistry.instance;
