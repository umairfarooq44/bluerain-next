/**
 * Created by atif on 12/18/16.
 */
import React, { PropTypes } from 'react';
import 'react-dates/lib/css/_datepicker.css';
import Widget from 'bluerain-ui/lib/Widget/widget';
import WidgetTitle from 'bluerain-ui/lib/Widget/widgetTitle';
import WidgetHeader from 'bluerain-ui/lib/Widget/widgetHeader';
import { DateRangePicker } from 'react-dates';
import moment from 'moment';
import '../../../css/custom_datepicker.css';
import CurrentReportIndex from './index';

const propTypes = {
  assetId: PropTypes.string
};

const defaultProps = {
  assetId: '',
};

export default class CurrentReportWidget extends React.Component {

  constructor(props) {
    super(props);
    if (localStorage && localStorage.end_date && localStorage.start_date) {
      this.state = {
        focusedInput: null,
        startDate: moment(localStorage.start_date),
        endDate: moment(localStorage.end_date),
      };
    } else {
      this.state = {
        focusedInput: null,
        startDate: moment().subtract(1, 'days'),
        endDate: moment(),
      };
    }

    this.onDatesChange = this.onDatesChange.bind(this);
    this.onFocusChange = this.onFocusChange.bind(this);
  }

  onDatesChange({ startDate, endDate }) {
    localStorage.setItem('start_date', startDate);
    localStorage.setItem('end_date', endDate);
    this.setState({ startDate, endDate });
  }

  onFocusChange(focusedInput) {
    this.setState({ focusedInput });
  }

  render() {

    const { focusedInput, startDate, endDate } = this.state;

    const assetId = this.props.assetId;

    const startDateFormatted = moment(startDate).startOf('day').toISOString();
    const endDateFormatted = moment(endDate).endOf('day').toISOString();

    return (
      <div>
        <Widget>
          <WidgetHeader>
            <div className="widget-title-holder">
              <WidgetTitle>
                Current
              </WidgetTitle>
            </div>
            <DateRangePicker
              {...this.props}
              isOutsideRange={() => false}
              onDatesChange={this.onDatesChange}
              onFocusChange={this.onFocusChange}
              focusedInput={focusedInput}
              startDate={startDate}
              endDate={endDate}
            />
          </WidgetHeader>
        </Widget>
        <div className="clearfix" />
        <CurrentReportIndex
          assetId={assetId} startDate={startDateFormatted} endDate={endDateFormatted} queryString=""
          color="#7D1B7E"
        />
      </div>
    );
  }
}

CurrentReportWidget.propTypes = propTypes;
CurrentReportWidget.defaultProps = defaultProps;
