import React, { PropTypes } from 'react';
import { Link } from 'react-router';
import GridView from 'bluerain-ui/lib/GridView/GridView.component';
import GridViewItem from 'bluerain-ui/lib/GridView/GridViewItem.component';
import { withLoadingBar } from 'bluerain-client-services';
import AssetCard from '../AssetCard/AssetCard.component';

const propTypes = {
  assets: PropTypes.array,
  hideLoading: PropTypes.func,
};

const defaultProps = {
  hideLoading: () => {
  },
};

export class AssetsGrid extends React.Component {

  static getImageUrl(site) {
    if (site.image) {
      return site.image;
    }

    if (site.type && site.type.icon) {
      return site.type.icon;
    }

    return null;
  }

  static renderAssetCard(asset) {
    const props = {
      name: asset.name,
      to: `/app/device-explorer/assets/${asset.id}`,
      linkTag: Link,
    };

    // Time
    try {
      props.time = asset.events.edges[0].node.time;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    // importantState
    try {
      props.importantState = asset.importantState.value.toString();
    } catch (e) {
      console.log('ERROR =>', e);
    }

    // connected
    try {
      props.connected = asset.state.connected;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    // image
    try {
      props.image = asset.assetType.icon;
    } catch (e) {
      console.log('ERROR =>', e);
    }

    return (
      <GridViewItem key={asset.id}>
        <AssetCard {...props} />
      </GridViewItem>
    );
  }

  constructor(props) {
    super(props);

    AssetsGrid.renderAssetCard = AssetsGrid.renderAssetCard.bind(this);
  }

  componentDidMount() {
    if (this.props.hideLoading) {
      this.props.hideLoading();
    }

    if (this.props.assets && this.props.assets.length === 0) {
      this.props.hideLoading();
    }

    return null;
  }

  render() {
    const assets = this.props.assets || [];
    return (
      <GridView>
        {assets.map(AssetsGrid.renderAssetCard)}
      </GridView>
    );
  }
}

AssetsGrid.propTypes = propTypes;
AssetsGrid.defaultProps = defaultProps;

export default withLoadingBar(AssetsGrid);
