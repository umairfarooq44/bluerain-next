import React, { PropTypes } from 'react';
import DataList from 'bluerain-ui/lib/DataList/DataList';
import DataListItem from 'bluerain-ui/lib/DataList/DataListItem';
import DataListItemLabel from 'bluerain-ui/lib/DataList/DataListItemLabel';
import DataListItemValue from 'bluerain-ui/lib/DataList/DataListItemValue';
import { graphql } from 'react-apollo';
import { Gmaps, Marker } from 'react-gmaps';
import { Collapse } from 'reactstrap';
import { Icon } from 'react-fa';
import moment from 'moment';
import LocationsFetchQuery from './query.graphql';

const propTypes = {
  data: PropTypes.object
};

const defaultProps = {};

let latitude;
let longitude;
let sites;
const newArr = [];
const offlineArr = [];
let trueCounts;
let falseCounts;
let lat;
let long;
let devicePointerList = [];
// let assetCount;
let dates = [];
let maxDate;
class AssetLocationComponent extends React.Component {

  constructor(props) {
    super(props);
    this.toggleNavbar = this.toggleNavbar.bind(this);
    this.clickMarker = this.clickMarker.bind(this);
    this.onMapCreated = this.onMapCreated.bind(this);
    this.state = { collapsed: true, lat: 0, long: 0, zoom: 12 };
  }

  componentWillReceiveProps(props) {
    this.state = {
      infoWindows: [false]
    };
  }

  toggleNavbar() {
    this.setState({
      collapsed: !this.state.collapsed
    });
  }

  toggleInfoWindow(index, sites) {
    const { infoWindows } = this.state;
    infoWindows[index] = !infoWindows[index];
    this.setState({
      infoWindows // toggle info window on click
    });
  }

  toggleInfoWindowMarker(index, site) {
    const assets = site.node.assets;
    // assetCount = assets.edges.length;
    devicePointerList = [];
    dates = [];
    assets.edges.map((item, i) => {
      devicePointerList.push({
        lastUpdated: item.node.updatedAt,
        lat: item.node.state.latitude,
        long: item.node.state.longitude
      });
      dates.push(new Date(item.node.updatedAt));
    });
    maxDate = new Date(Math.max.apply(null, dates));
    // this.state.infoWindows = [false];
    this.setState({
      infoWindows: false
    });

    const { infoWindows } = this.state;
    infoWindows[index] = !infoWindows[index];
    this.setState({
      infoWindows, // toggle info window on click
      lat: site.node.location.lat,
      long: site.node.location.lng,
      zoom: this.gmap.getMap().getZoom()
    });
  }

  onMapCreated() {
    const sites = this.props.data.viewer.sites.edges;
    const bounds = new google.maps.LatLngBounds();
    for (let i = 0; i < sites.length; i++) {
      if (sites[i].node.location) {
        bounds.extend({ lat: sites[i].node.location.lat, lng: sites[i].node.location.lng })
      }
      return '';
      // sites[i].node.location ? bounds.extend({ lat: sites[i].node.location.lat, lng: sites[i].node.location.lng }) : '';
    }

    this.gmap.getMap().fitBounds(bounds);
  }

  clickMarker(list) {
    const html = list.map(item => (
      <Marker
        lat={item.lat}
        lng={item.long}
      />
    ));
    return (html);
  }

  renderInfoWindows() {
    // const position = { width: 0, height: -25 };
    const { infoWindows } = this.state;
    // console.log('SITES FIRST', sites);
    const getSites = sites;
    getSites.map((item, index) => {
      trueCounts = 0;
      for (let a = 0; a < item.node.assets.edges.length; a++) {
        const truth = item.node.assets.edges[a].node.state;
        if (truth.connected === true) {
          trueCounts++;
        }
      }
      newArr.push({ siteName: item.node.name, count: trueCounts });
    });
    getSites.map((item, index) => {
      falseCounts = 0;
      for (let a = 0; a < item.node.assets.edges.length; a++) {
        const truth = item.node.assets.edges[a].node.state;
        if (truth.connected === false) {
          falseCounts++;
        }
      }
      offlineArr.push({ siteName: item.node.name, count: falseCounts });
    });
    return sites.map((item, index) => {
      // console.log('IND',infoWindows[index] )
      if (!infoWindows || !infoWindows[index]) return null;
      if (item.node.assets.edges.length === 0) {
        return (
          <div
            id="infoWindow" style={{
              width: '25%',
              height: '100%',
              backgroundColor: '#fff',
              position: 'absolute',
              top: '0px',
              right: '0px',
              zIndex: '99'
            }}
          >
            <Collapse isOpen={!this.state.collapsed}>
              <Icon
                name="times"
                style={{
                  background: 'white',
                  padding: '5px',
                  borderRadius: '50%',
                  color: 'black',
                  position: 'absolute',
                  top: '2px',
                  right: '3px',
                  zIndex: '99',
                  cursor: 'pointer'
                }}
                onClick={() => this.toggleInfoWindow(index, sites.length)}
              />
              <img
                style={{ width: '100%', height: '225px' }}
                src={item.node.image ? item.node.image : item.node.siteType.icon} role="presentation"
              />
              <DataList>
                <DataListItem
                  style={{
                    border: '0px solid',
                    borderTopRightRadius: '0px',
                    borderTopLeftRadius: '0px',
                    color: 'white',
                    backgroundColor: '#4285F4'
                  }} chevronRight={false} action={false}
                >
                  <DataListItemValue>
                    <b style={{ fontSize: '20px' }}>{item.node.name}</b><br />
                    {item.node.location.latitude}&ensp;
                    {item.node.location.longitude}
                  </DataListItemValue>
                </DataListItem>
                <DataListItem
                  style={{ borderBottomRightRadius: '0px', borderBottomLeftRadius: '0px' }}
                  chevronRight={false} action={false}
                >
                  <DataListItemLabel>
                    No Assets found for this site
                  </DataListItemLabel>
                </DataListItem>
              </DataList>
            </Collapse>
          </div>
        );
      }
      // <Icon name="times" style={{ cursor: 'pointer' }} onClick={() => this.toggleInfoWindow(index, sites.length)} />
      return (
        <div
          id="infoWindow" style={{
            width: '25%',
            height: '100%',
            backgroundColor: '#fff',
            position: 'absolute',
            top: '0px',
            right: '0px',
            zIndex: '99'
          }}
        >
          <Collapse isOpen={!this.state.collapsed}>
            <Icon
              name="times"
              style={{
                background: 'white',
                padding: '5px',
                borderRadius: '50%',
                color: 'black',
                position: 'absolute',
                top: '2px',
                right: '3px',
                zIndex: '99',
                cursor: 'pointer'
              }}
              onClick={() => this.toggleInfoWindow(index, sites.length)}
            />
            <img
              style={{ width: '100%', height: '225px' }}
              src={item.node.image ? item.node.image : item.node.siteType.icon} role="presentation"
            />
            <DataList>
              <DataListItem
                style={{
                  border: '0px solid',
                  borderTopRightRadius: '0px',
                  borderTopLeftRadius: '0px',
                  color: 'white',
                  backgroundColor: '#4285F4'
                }} chevronRight={false} action={false}
              >
                <DataListItemValue>
                  <b style={{ fontSize: '20px' }}>{item.node.name}</b><br />
                  {item.node.location.latitude}&ensp;
                  {item.node.location.longitude}
                </DataListItemValue>
              </DataListItem>
              <DataListItem chevronRight={false} action={false}>
                <DataListItemLabel>
                  Online Assets
                </DataListItemLabel>
                <DataListItemValue>
                  <b>{newArr[index].count} out of {item.node.assets.edges.length}</b>
                </DataListItemValue>
              </DataListItem>
              <DataListItem
                style={{ borderBottomRightRadius: '0px', borderBottomLeftRadius: '0px' }}
                chevronRight={false}
                action={false}
              >
                <DataListItemLabel>
                  Site Last Updated
                </DataListItemLabel>
                <DataListItemValue>
                  <b>{moment(maxDate).fromNow(true)} ago</b>
                </DataListItemValue>
              </DataListItem>
            </DataList>
          </Collapse>
        </div>
      );
    });
  }


  renderMarkers() {
    return (
      // <div>
      //  {
      sites.map((item, index) => {
        const assets = item.node.assets.edges;
        const devicesArray = [];
        for (let a = 0; a < assets.length; a++) {
          // console.log('INSIDE', assets[a].node)
          devicesArray.push({ connected: assets[a].node.state.connected, assetName: assets[a].node.name });
        }
        let connectedDeviceStatus = 0;

        for (let b = 0; b < devicesArray.length; b++) {

          const singleDevice = devicesArray[b];

          if (singleDevice.connected === true) {
            connectedDeviceStatus++;
          }
        }

        let iconString = '';

        if ((connectedDeviceStatus === devicesArray.length) || (connectedDeviceStatus > 0 && connectedDeviceStatus <= devicesArray.length)) {
          iconString = 'https://s3-us-west-2.amazonaws.com/bluerainimages/online-office.png';
        } else if (connectedDeviceStatus === 0) {
          iconString = 'https://s3-us-west-2.amazonaws.com/bluerainimages/offline-office.png';
        }
        // else if(connectedDeviceStatus > 0 && connectedDeviceStatus <= devicesArray.length){
        //   iconString  = 'https://s3-us-west-2.amazonaws.com/bluerainimages/online-office.png';
        // }
        let lat = item.node.location ? item.node.location.lat : '';
        let long = item.node.location ? item.node.location.lng : '';

        if (lat === 0 && long === 0){
          lat = '';
          long = '';
        }
        return (
          <Marker
            key={index}
            lat={lat}
            lng={long}
            icon={iconString}
            // icon={item.node.image ? item.node.image.url : item.node.type.icon.url}
            // onClick={() => this.toggleInfoWindowMarker(index, item)}
          />
        );
      })
      // }
      // </div>
    );
  }

  render() {
    if (this.props.data && this.props.data.viewer && this.props.data.viewer.sites.edges.length > 0) {
      sites = this.props.data.viewer.sites.edges;
      latitude = this.props.data.viewer.sites.edges[0].node.location.lat;
      longitude = this.props.data.viewer.sites.edges[0].node.location.lng;
      lat = this.state.lat ? this.state.lat : latitude;
      long = this.state.long ? this.state.long : longitude;
      let zoom = this.state.zoom ? this.state.zoom : 12;
      if (lat === 0 && long === 0){
        lat = 30.3753;
        long = 69.3451;
        zoom = 6;
      }
      return (
        <Gmaps
          ref={googleMap => this.gmap = googleMap}
          style={{ position: 'relative' }}
          width={'100%'}
          height={'100vh'}
          lat={lat}
          lng={long}
          zoom={zoom}
          loadingMessage={' '}
          bounds
          streetViewControl={false}
          onMapCreated={this.onMapCreated}
          params={{ v: '3.exp', key: 'AIzaSyCsvSAB6oyi9nAKMcbfdPV8E7uZfA4IujA' }}
        >
          {this.renderMarkers()}
          {this.renderInfoWindows()}
        </Gmaps>
      );
    }
    return (<div> No sites found :( </div>);
  }

}

export default graphql(LocationsFetchQuery)(
  (AssetLocationComponent)
);
AssetLocationComponent.propTypes = propTypes;
AssetLocationComponent.defaultProps = defaultProps;

// <Icon name="times" style={{ cursor: 'pointer' }} onClick={() => this.toggleInfoWindow(index, sites.length)} />
// <DataListItem style={{position: 'absolute', top: '0px', right: '230px', zIndex: '99'}} chevronRight action={false} onClick={this.toggleNavbar} />
// {this.clickMarker(devicePointerList)}
