import React, { PropTypes } from 'react';
import { fromGlobalId } from 'graphql-relay';
import LightControlComponent from './LightControl.component';

const propTypes = {
  assetId: PropTypes.string,
  data: PropTypes.object,
  // assetState: PropTypes.object,
  onError: PropTypes.func,
  mutate: PropTypes.func,
};

const defaultProps = {
  assetId: null,
  asset: null,
  // assetState: {
  //   standby: false,
  //   brightness: 100,
  //   colorTemperature: 5000,
  // },

  mutate: () => {
  },
  onError: () => {
  }
};

class LightControl extends React.Component {

  constructor(props) {
    super(props);
    this.persistState = this.persistState.bind(this);

    try {
      this.state = props.data.node.state;
    } catch (error) {
      //
    }
  }

  componentWillReceiveProps(props) {
    try {
      this.setState(props.data.node.state);
    } catch (error) {
      //
    }
  }

  persistState(data) {

    // Set local state
    this.setState(data.params);

    // Setup data
    const assetId = this.props.assetId;
    let deviceID = null;

    try {
      deviceID = this.props.data.node.devices.edges[0].node.id;
    } catch (e) {
      return this.props.onError(e);
    }

    // Create Object
    const eventObj = {
      type: 'command',
      data,
      assetId: fromGlobalId(assetId).id,
      deviceId: fromGlobalId(deviceID).id
    };

    // Find Viewer
    try {
      const viewerId = this.props.data.viewer.me.id;
      eventObj.sourceAccountId = fromGlobalId(viewerId).id;
    } catch (e) {
      return this.props.onError(e);
    }
    // Mutate
    this.props.mutate({
      variables: { data: eventObj }
    })
    .catch((error) => {
      this.props.onError(error);
    });
  }

  render() {

    if (!this.state) {
      return (<div />);
    }

    const {
      standby,
      red,
      green,
      blue,
      brightness,
      colorTemperature
    } = this.state;

    const color = { r: red, g: green, b: blue, a: 1 };
    return (
      <LightControlComponent

        // Standby
        standby={standby}
        onStandbyToggle={standby => this.persistState({
          name: 'setStandby',
          params: { standby: !standby }
        })}

        // Color
        color={color}
        onColorChangeComplete={color => this.persistState({
          name: 'setColorRgb',
          params: { red: color.rgb.r, green: color.rgb.g, blue: color.rgb.b }
        })}

        // Brightness
        brightness={brightness}
        onBrightnessChange={brightness => this.persistState({
          name: 'setBrightness',
          params: { brightness }
        })}

        // Color Temperature
        colorTemperature={colorTemperature}
        onColorTemperatureChange={colorTemperature => this.persistState({
          name: 'setColorTemperature',
          params: { colorTemperature }
        })}

      />
    );
  }
}

LightControl.propTypes = propTypes;
LightControl.defaultProps = defaultProps;

export default LightControl;
