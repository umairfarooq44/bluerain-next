import React, { PropTypes } from 'react';
import SwitchControl from '../ControlItems/SwitchControl';
import SliderControl from '../ControlItems/SliderControl';
import ColorControl from '../ControlItems/ColorControl';

const propTypes = {
  // Standby
  standby: PropTypes.bool,
  disableStandby: PropTypes.bool,
  onStandbyToggle: PropTypes.func,

  // Color
  color: PropTypes.object,
  disableColor: PropTypes.bool,
  onColorChangeComplete: PropTypes.func,

  // Brightness
  onBrightnessChange: PropTypes.func,
  brightness: PropTypes.number,
  disableBrightness: PropTypes.bool,
  minBrightness: PropTypes.number,
  maxBrightness: PropTypes.number,
  brightnessStep: PropTypes.number,

  // Color Temperature
  onColorTemperatureChange: PropTypes.func,
  colorTemperature: PropTypes.number,
  disableColorTemperature: PropTypes.bool,
  minColorTemperature: PropTypes.number,
  maxColorTemperature: PropTypes.number,
  colorTemperatureStep: PropTypes.number,
};

const defaultProps = {
  // Standby
  standby: true,
  disableStandby: false,
  onStandbyToggle: () => {
  },

  // Color
  color: { r: 51, g: 51, b: 51 },
  disableColor: false,
  onColorChangeComplete: () => {
  },

  // Brightness
  onBrightnessChange: () => {
  },
  brightness: 26,
  disableBrightness: false,
  minBrightness: 0,
  maxBrightness: 100,
  brightnessStep: 1,

  // Color Temperature
  onColorTemperatureChange: () => {
  },
  colorTemperature: 5000,
  disableColorTemperature: false,
  minColorTemperature: 3500,
  maxColorTemperature: 9000,
  colorTemperatureStep: 100,
};

export default class LightControl extends React.Component {

  constructor(props) {
    super(props);

    this.onStandbyToggle = this.onStandbyToggle.bind(this);
    this.onBrightnessChange = this.onBrightnessChange.bind(this);
    this.onColorTemperatureChange = this.onColorTemperatureChange.bind(this);
  }

  onStandbyToggle(standby) {
    this.setState({ standby });
    this.props.onStandbyToggle(standby);
  }

  onColorChangeComplete(color) {
    this.setState({ color });
    this.props.onColorChangeComplete(color);
  }

  onBrightnessChange(brightness) {
    this.setState({ brightness });
    this.props.onBrightnessChange(brightness);
  }

  onColorTemperatureChange(colorTemperature) {
    this.setState({ colorTemperature });
    this.props.onColorTemperatureChange(colorTemperature);
  }

  getStandbyControl() {
    const { standby, disableStandby } = this.props;

    return (
      <SwitchControl
        label="Power"
        disabled={disableStandby}
        toggled={!standby}
        onToggle={this.onStandbyToggle}
        className="list-group-item"
      />
    );
  }

  getColorControl() {
    const {
      standby,
      color,
      disableColor,
      onColorChangeComplete
    } = this.props;

    if (standby === false) {
      return (
        <ColorControl
          label="Color"
          value={color}
          disabled={disableColor}
          onChangeComplete={onColorChangeComplete}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  getBrightnessControl() {
    const {
      standby,
      onBrightnessChange,
      brightness,
      disableBrightness,
      minBrightness,
      maxBrightness,
      brightnessStep,
    } = this.props;

    if (standby === false) {
      return (
        <SliderControl
          label="Brightness"
          min={minBrightness}
          max={maxBrightness}
          step={brightnessStep}
          value={brightness}
          disabled={disableBrightness}
          onDragStop={onBrightnessChange}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  getColorTemperatureControl() {
    const {
      standby,
      onColorTemperatureChange,
      colorTemperature,
      disableColorTemperature,
      minColorTemperature,
      maxColorTemperature,
      colorTemperatureStep,
    } = this.props;

    if (standby === false) {
      return (
        <SliderControl
          label="Color Temperature"
          min={minColorTemperature}
          max={maxColorTemperature}
          step={colorTemperatureStep}
          value={colorTemperature}
          disabled={disableColorTemperature}
          onDragStop={onColorTemperatureChange}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  render() {
    return (
      <div className="card list-group device-control-list">
        {this.getStandbyControl()}
        {this.getColorControl()}
        {this.getBrightnessControl()}
        {this.getColorTemperatureControl()}
      </div>
    );
  }
}

LightControl.propTypes = propTypes;
LightControl.defaultProps = defaultProps;
