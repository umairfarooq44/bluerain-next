import React, { PropTypes } from 'react';
import { fromGlobalId } from 'graphql-relay';
import SonosControlComponent from './SonosControl.component';

const propTypes = {
  assetId: PropTypes.string,
  assetState: PropTypes.object,
  onError: PropTypes.func,
  mutate: PropTypes.func,
  data: PropTypes.object
};

const defaultProps = {
  assetId: null,
  asset: null,
  viewerQuery: null,
  assetState: {
    volume: 66,
    currentTrackObject: {},
    standby: true
  },

  mutate: () => {
  },
  onError: () => {
  }
};

class SonosControlContainer extends React.Component {

  static getVolumeObject(volume) {
    return { level: volume };
  }

  constructor(props) {
    super(props);
    this.persistState = this.persistState.bind(this);
    this.state = props.assetState;
  }

  componentWillReceiveProps(nextProps) {
    try {
      const state = nextProps.data.node.state;

      if (!state) {
        return;
      }
      const newState = Object.assign({}, this.state, state);
      newState.volume = state.level;
      this.setState(newState);
    } catch (e) {
      this.props.onError(e);
    }
  }

  persistState(data) {
    // Set local state
    if (!data.params.level) {
      this.setState(data.params);
      data.params = {};
    } else {
      this.setState({ volume: data.params.level });
    }

    // Setup data
    const assetId = this.props.assetId;
    let deviceID = null;

    try {
      deviceID = this.props.data.node.devices.edges[0].node.id;
    } catch (e) {
      return this.props.onError(e);
    }
    // Create Object
    const eventObj = {
      type: 'command',
      data,
      assetId: fromGlobalId(assetId).id,
      deviceId: fromGlobalId(deviceID).id
    };

    // Find Viewer
    try {
      const viewerId = this.props.data.viewer.me.id;
      eventObj.sourceAccountId = fromGlobalId(viewerId).id;
    } catch (e) {
      return this.props.onError(e);
    }
    // // Mutate
    this.props.mutate({
      variables: { data: eventObj }
    })
    .catch((error) => {
      this.props.onError(error);
    });
  }


  render() {
    const {
      // standby,
      volume
    } = this.state;
    return (
      <SonosControlComponent

        // on play
        play={track => this.persistState({
          name: 'play',
          params: { track }
        })}

        // on pause
        pause={track => this.persistState({
          name: 'pause',
          params: { track }
        })}

        // on next track
        forward={track => this.persistState({
          name: 'nextTrack',
          params: { track }
        })}

        // on previous track
        backward={track => this.persistState({
          name: 'previousTrack',
          params: { track }
        })}

        // Volume
        volume={volume}
        onVolumeChange={volume => this.persistState({
          name: 'setVolume',
          params: SonosControlContainer.getVolumeObject(volume)
        })}
      />
    );
  }
}

SonosControlContainer.propTypes = propTypes;
SonosControlContainer.defaultProps = defaultProps;

export default SonosControlContainer;
