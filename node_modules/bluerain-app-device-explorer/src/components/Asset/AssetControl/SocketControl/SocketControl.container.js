import React, { PropTypes } from 'react';
import { fromGlobalId } from 'graphql-relay';
import Socket from './SocketControl.component';


const propTypes = {
  assetId: PropTypes.string,
  assetState: PropTypes.object,
  onError: PropTypes.func,
  mutate: PropTypes.func,
  data: PropTypes.object,
};

const defaultProps = {
  assetId: null,
  asset: null,
  viewerQuery: null,
  assetState: {
    standby: true
  },

  mutate: () => {
  },
  onError: () => {
  }
};

class SocketControl extends React.Component {

  constructor(props) {
    super(props);
    this.persistState = this.persistState.bind(this);
    this.state = props.assetState;
  }

  componentWillReceiveProps(nextProps) {
    try {
      const state = nextProps.data.node.state;

      if (!state) {
        return;
      }

      const newState = Object.assign({}, this.state, state);
      this.setState(newState);
    } catch (e) {
      this.props.onError(e);
    }
  }

  persistState(stateName, stateValue) {

    // Setup data
    const assetGlobalId = this.props.assetId;
    const assetId = fromGlobalId(assetGlobalId).id;
    let deviceID = null;
    try {
      deviceID = this.props.data.node.devices.edges[0].node.id;
    } catch (e) {
      return this.props.onError(e);
    }
    deviceID = fromGlobalId(deviceID).id;
    // Set local state
    const newAssetState = Object.assign({}, this.state, stateValue);
    // newAssetState[stateName] = stateValue;

    const newState = Object.assign({}, this.state, newAssetState);
    this.setState(newState);
    // if (stateName === 'setThermostatMode') {
    //   stateValue.thermostatSetpoint = this.props.data.node.state.thermostatSetpoint;
    //   stateValue.thermostatFanMode = this.props.data.node.state.thermostatFanMode;
    // }
    // Create Object

    const eventObj = {
      type: 'command',
      data: { name: stateName, params: stateValue },
      assetId,
      deviceId: deviceID
    };

    // Find Viewer
    try {
      const viewerId = this.props.data.viewer.me.id;
      eventObj.sourceAccountId = fromGlobalId(viewerId).id;
    } catch (e) {
      return this.props.onError(e);
    }
    // Mutate
    this.props.mutate({
      variables: { data: eventObj }
    })
    .catch((error) => {
      this.props.onError(error);
    });
  }

  render() {
    const {
      standby
    } = this.state;

    return (
      <Socket

        // Power
        standby={standby}
        onStandbyToggle={(standby, type) => this.persistState('setStandby', { standby })}
      />
    );
  }
}

SocketControl.propTypes = propTypes;
SocketControl.defaultProps = defaultProps;

export default SocketControl;
