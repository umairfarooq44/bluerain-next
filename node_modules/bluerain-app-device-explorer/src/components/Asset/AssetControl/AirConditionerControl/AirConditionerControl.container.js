import React, { PropTypes } from 'react';
import { fromGlobalId } from 'graphql-relay';
import AirConditioner from './AirConditionerControl.component';


const propTypes = {
  assetId: PropTypes.string,
  assetState: PropTypes.object,
  onError: PropTypes.func,
  mutate: PropTypes.func,
  data: PropTypes.object,
};

const defaultProps = {
  assetId: null,
  asset: null,
  viewerQuery: null,
  assetState: {
    thermostatSetpoint: 26,
    thermostatSetpointAuto: 24,
    thermostatSetpointCool: 18,
    thermostatSetpointDry: 26,
    thermostatFanMode: 'high',
    thermostatSetpointHeat: 31,
    thermostatMode: 'cool',
    standby: true
  },

  mutate: () => {
  },
  onError: () => {
  }
};

let disableSetpoint = false;
class AirConditionerControl extends React.Component {

  constructor(props) {
    super(props);
    this.persistState = this.persistState.bind(this);
    this.state = props.assetState;
  }

  componentWillReceiveProps(nextProps) {
    try {
      const state = nextProps.data.node.state;
      // if (state.thermostatMode === 'auto') {
      //   disableSetpoint = true;
      //   state.thermostatSetpoint = 24;
      // } else {
      //   disableSetpoint = false;
      // }
      if (state.thermostatMode === 'heat') {
        this.setState({ color: '#f44336', rippleColor: '#ff3232' });
        disableSetpoint = false;
      } else if (state.thermostatMode === 'auto') {
        this.setState({ color: 'grey', rippleColor: '#a8a8a8' });
        disableSetpoint = true;
        state.thermostatSetpoint = 24;
      } else if (state.thermostatMode === 'dry') {
        this.setState({ color: '#795548', rippleColor: '#7a5230' });
        disableSetpoint = false;
      } else if (state.thermostatMode === 'fan') {
        this.setState({ color: '#4caf50', rippleColor: '#28a428' });
        disableSetpoint = true;
        state.thermostatSetpoint = 22;
      } else if (state.thermostatMode === 'cool') {
        this.setState({ color: '#00BCD4', rippleColor: '#66d6e5' });
        disableSetpoint = false;
      }

      if (!state) {
        return;
      }

      const newState = Object.assign({}, this.state, state);
      this.setState(newState);
    } catch (e) {
      this.props.onError(e);
    }
  }

  persistState(stateName, stateValue) {
    // Setup data

    const assetGlobalId = this.props.assetId;
    const assetId = fromGlobalId(assetGlobalId).id;
    let deviceID = null;

    try {
      deviceID = this.props.data.node.devices.edges[0].node.id;
    } catch (e) {
      return this.props.onError(e);
    }

    deviceID = fromGlobalId(deviceID).id;
    // Set local state
    const newAssetState = Object.assign({}, this.state, stateValue);
    // newAssetState[stateName] = stateValue;

    const newState = Object.assign({}, this.state, newAssetState);
    this.setState(newState);
    // Prepare to Mutate
    // const paramDetail = {};
    // paramDetail[stateName] = stateValue;
    // if (stateName === 'thermostatMode') {
    //   paramDetail.thermostatFanMode = this.state.thermostatFanMode;
    //   switch (stateValue) {
    //     case 'cool':
    //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointCool;
    //       break;
    //     case 'heat':
    //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointHeat;
    //       break;
    //     case 'dry':
    //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointDry;
    //       break;
    //     // case 'fan':
    //     //   paramDetail.thermostatSetpoint = this.state.thermostatSetpointFan;
    //     //   break;
    //     default:
    //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointAuto;
    //       break;
    //   }
    // }
    if (stateName === 'setThermostatMode') {
      if (stateValue.thermostatMode === 'heat') {
        this.setState({ color: '#f44336', rippleColor: '#ff3232' });
      } else if (stateValue.thermostatMode === 'auto') {
        this.setState({ color: 'grey', rippleColor: '#a8a8a8' });
      } else if (stateValue.thermostatMode === 'dry') {
        this.setState({ color: '#795548', rippleColor: '#7a5230' });
      } else if (stateValue.thermostatMode === 'fan') {
        this.setState({ color: '#4caf50', rippleColor: '#28a428' });
      } else if (stateValue.thermostatMode === 'cool') {
        this.setState({ color: '#00BCD4', rippleColor: '#66d6e5' });
      }
      stateValue.thermostatSetpoint = this.props.data.node.state.thermostatSetpoint;
      stateValue.thermostatFanMode = this.props.data.node.state.thermostatFanMode;
    }
    // Create Object

    const eventObj = {
      type: 'command',
      data: { name: stateName, params: stateValue },
      assetId,
      deviceId: deviceID
    };

    // Find Viewer
    try {
      const viewerId = this.props.data.viewer.me.id;
      eventObj.sourceAccountId = fromGlobalId(viewerId).id;
    } catch (e) {
      return this.props.onError(e);
    }

    // Mutate

    this.props.mutate({
      variables: { data: eventObj }
    })
    .catch((error) => {
      this.props.onError(error);
    });

  }

  render() {
    const {
      standby,
      thermostatSetpoint,
      thermostatMode,
      thermostatFanMode
    } = this.state;
    return (
      <AirConditioner

        // Power
        standby={standby}
        onStandbyToggle={(standby, type) => this.persistState('setStandby', { standby })}

        // Setpoint
        onSetpointChange={(thermostatSetpoint, type) => this.persistState('setThermostatSetpoint', { thermostatSetpoint })}
        setpoint={thermostatSetpoint}
        disableSetpoint={disableSetpoint}
        minSetpoint={16}
        maxSetpoint={32}
        setpointStep={1}

        // Mode Change
        onModeChange={(thermostatMode, type) => this.persistState('setThermostatMode', { thermostatMode: thermostatMode.value })}
        mode={thermostatMode}
        modeOptions={[
          {
            label: 'Auto',
            value: 'auto'
          }, {
            label: 'Cool',
            value: 'cool'
          }, {
            label: 'Heat',
            value: 'heat'
          }, {
            label: 'Dry',
            value: 'dry'
          }, {
            label: 'Fan',
            value: 'fan'
          },
        ]}
        setpointSelectionColor={this.state.color}
        setpointRippleColor={this.state.rippleColor}
        // Fan Spped
        onFanSpeedChange={(thermostatFanMode, type) => this.persistState('setThermostatFanMode', { thermostatFanMode: thermostatFanMode.value })}
        fanSpeed={thermostatFanMode}
        fanSpeedOptions={[
          {
            label: 'Auto',
            value: 'auto'
          }, {
            label: 'High',
            value: 'high'
          }, {
            label: 'Mid',
            value: 'mid'
          }, {
            label: 'Low',
            value: 'low'
          },
        ]}
      />
    );
  }
}

AirConditionerControl.propTypes = propTypes;
AirConditionerControl.defaultProps = defaultProps;

export default AirConditionerControl;
