import React, { PropTypes } from 'react';
import SwitchControl from '../ControlItems/SwitchControl';
import SliderControl from '../ControlItems/SliderControl';
import DropdownControl from '../ControlItems/DropdownControl';

const propTypes = {
  // Standby
  standby: PropTypes.bool,
  disableStandby: PropTypes.bool,
  onStandbyToggle: PropTypes.func,

  // Temperature
  onSetpointChange: PropTypes.func,
  setpoint: PropTypes.number,
  setpointSelectionColor: PropTypes.string,
  setpointTrackColor: PropTypes.string,
  setpointRippleColor: PropTypes.string,
  disableSetpoint: PropTypes.bool,
  minSetpoint: PropTypes.number,
  maxSetpoint: PropTypes.number,
  setpointStep: PropTypes.number,

  // Fan Speed
  onFanSpeedChange: PropTypes.func,
  fanSpeed: PropTypes.string,
  disableFanSpeed: PropTypes.bool,
  fanSpeedOptions: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
  })),

  // Modes
  onModeChange: PropTypes.func,
  mode: PropTypes.string,
  disableMode: PropTypes.bool,
  modeOptions: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
  }))
};

const defaultProps = {
  // Standby
  standby: true,
  disableStandby: false,
  onStandbyToggle: () => {
  },

  // Setpoint
  onSetpointChange: () => {
  },
  disableSetpoint: false,
  setpoint: 26,
  minSetpoint: 17,
  maxSetpoint: 30,
  setpointStep: 1,

  // Fan Speed
  onFanSpeedChange: () => {
  },
  fanSpeed: '',
  disableFanSpeed: false,
  fanSpeedOptions: [],

  // Modes
  onModeChange: () => {
  },
  mode: '',
  disableMode: false,
  modeOptions: []
};

export default class AirConditionerControlComponent extends React.Component {

  constructor(props) {
    super(props);

    this.onStandbyToggle = this.onStandbyToggle.bind(this);

    this.state = {
      standby: props.standby,
      disableStandby: props.disableStandby,
      setpoint: props.setpoint,
      disableSetpoint: props.disableSetpoint,
      disableFanSpeed: props.disableFanSpeed,
      disableMode: props.disableMode
    };
  }

  componentWillReceiveProps(props) {
    this.setState(props);
  }

  onStandbyToggle(standby) {
    this.setState({ standby });
    this.props.onStandbyToggle(standby);
  }

  getStandbyControl() {
    const { standby, disableStandby } = this.state;

    return (
      <div>
        <SwitchControl
          label="Standby"
          disabled={disableStandby}
          toggled={!standby}
          onToggle={value => this.onStandbyToggle(!value)}
          className="list-group-item"
          switchState={standby}
        />
      </div>
    );
  }

  getSetpointControl() {
    const {
      standby,
    } = this.state;

    const {
      // Temperature
      setpoint,
      onSetpointChange,
      minSetpoint,
      maxSetpoint,
      setpointStep,
      setpointSelectionColor,
      setpointTrackColor,
      setpointRippleColor,
      disableSetpoint
    } = this.props;

    if (standby === false) {
      return (
        <SliderControl
          label="Temperature"
          min={minSetpoint}
          max={maxSetpoint}
          step={setpointStep}
          value={setpoint}
          rippleColor={setpointRippleColor}
          selectionColor={setpointSelectionColor}
          trackColor={setpointTrackColor}
          disabled={disableSetpoint}
          onDragStop={onSetpointChange}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  getModeControl() {
    const {
      standby,
      disableMode
    } = this.state;

    const {
      onModeChange,
      modeOptions,
      mode,
    } = this.props;

    if (standby === false) {
      return (
        <DropdownControl
          label="Mode"
          onChange={onModeChange}
          value={mode}
          items={modeOptions}
          disabled={disableMode}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  getFanSpeedControl() {
    const {
      standby,
      disableFanSpeed
    } = this.state;

    const {
      onFanSpeedChange,
      fanSpeedOptions,
      fanSpeed,
    } = this.props;

    if (standby === false) {
      return (
        <DropdownControl
          label="Fan Speed"
          onChange={onFanSpeedChange}
          value={fanSpeed}
          disabled={disableFanSpeed}
          items={fanSpeedOptions}
          className="list-group-item"
        />
      );
    }
    return (<div />);
  }

  render() {
    return (
      <div className="card list-group device-control-list">
        {this.getStandbyControl()}
        {this.getSetpointControl()}
        {this.getModeControl()}
        {this.getFanSpeedControl()}
      </div>
    );
  }
}

AirConditionerControlComponent.propTypes = propTypes;
AirConditionerControlComponent.defaultProps = defaultProps;
