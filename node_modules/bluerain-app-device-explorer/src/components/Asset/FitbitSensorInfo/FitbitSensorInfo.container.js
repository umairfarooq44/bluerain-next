import React, { PropTypes } from 'react';
import Icon from 'react-fa';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';
import ClientOAuth2 from 'client-oauth2';
import { graphql } from 'react-apollo';
import moment from 'moment';
import GetServerDataMutation from './GetServerDataMutation.graphql';

const propTypes = {
  data: PropTypes.object,
  mutate: PropTypes.func
};

const defaultProps = {};

class FitbitSensorInfo extends React.Component {

  static validateAuth() {
    const fitbitAccessToken = localStorage.getItem('fitbit-access-token');
    const fitbitAccessTokenTime = localStorage.getItem('fitbit-access-token-time');
    let diff = -1;

    if (moment && fitbitAccessToken) {
      const timeNow = moment(new Date());
      const tokenTime = moment(fitbitAccessTokenTime);
      diff = timeNow.diff(tokenTime, 'hours');
    }

    // console.log('Fitbit Access Token Created', diff, ' hours ago.');

    if (!fitbitAccessToken || ( diff < 0 || diff >= 8)) {
      const fitbitAuth = new ClientOAuth2({
        clientId: '22844P',
        clientSecret: '4d3b2ce9b764c4539c6a0a0fef29b738',
        accessTokenUri: 'https://api.fitbit.com/oauth2/token',
        authorizationUri: 'https://www.fitbit.com/oauth2/authorize',
        redirectUri: 'http://localhost:9020/app/device-explorer/fitbit/callback',
        scopes: ['activity', 'heartrate', 'location', 'nutrition', 'sleep', 'weight']
      });
      const authHandlerUrl = `${fitbitAuth.code.getUri()}`;
      window.location = authHandlerUrl;
    }
  }

  static fetchDataFromServer(assetId, deviceId, sourceUserId) {

    const variables = {
      type: 'command',
      data: { name: 'refresh', params: { activityDate: new Date() } },
      asset: assetId,
      device: deviceId,
      sourceUser: sourceUserId
    };

    this.props.mutate({
      variables
    });
  }

  static renderConnectionStatus(connected) {

    let status = null;

    if (typeof (connected) !== 'boolean') {
      return (<div />);
    } else if (connected) {
      status = (<span>Online <Icon name="circle text-success" /></span>);
    } else {
      status = (<span>Offline <Icon name="circle text-danger" /></span>);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Status</div>
        <div className="data-value">{status}</div>
      </li>
    );
  }

  static renderHeartRate(connected, restingHeartBeat) {
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Resting Heart Beat</div>
          <div className="data-value">{restingHeartBeat}</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderDistance(connected, floors, elevation) {
    if (connected) {
      return (
        <div>
          <li className="list-group-item">
            <div className="data-label">Floors</div>
            <div className="data-value">{floors}</div>
          </li>
          <li className="list-group-item">
            <div className="data-label">Elevation</div>
            <div className="data-value">{elevation}</div>
          </li>
        </div>
      );
    }
    return (<div />);
  }

  static renderCalories(connected, caloriesBMR, caloriesOut, activityCalories) {
    if (connected) {
      return (
        <div>
          <li className="list-group-item">
            <div className="data-label">Calories BMR</div>
            <div className="data-value">{caloriesBMR}</div>
          </li>
          <li className="list-group-item">
            <div className="data-label">Calories Out</div>
            <div className="data-value">{caloriesOut}</div>
          </li>
          <li className="list-group-item">
            <div className="data-label">Activity Calories</div>
            <div className="data-value">{activityCalories}</div>
          </li>
        </div>
      );
    }
    return (<div />);
  }

  constructor() {

    super();

    FitbitSensorInfo.fetchDataFromServer = FitbitSensorInfo.fetchDataFromServer.bind(this);
  }

  render() {

    FitbitSensorInfo.validateAuth();

    if (!this.props.data.node || !this.props.data.node.state) {
      return (<div />);
    }

    const {
      connected,
      caloriesBMR,
      caloriesOut,
      activityCalories,
      // outOfRange,
      // cardio,
      // fatBurn,
      // peak,
      restingHeartRate,
      elevation,
      floors
    } = this.props.data.node.state;

    // TODO Please make it dynamic
    const assetId = 'QXNzZXQ6TTVVZVFQVFpzdw==';
    const deviceId = 'RGV2aWNlOlV6NkhxaVNtOUM=';
    const sourceUserId = 'VXNlcjpsVHlIUW10RmRj';

    FitbitSensorInfo.fetchDataFromServer(assetId, deviceId, sourceUserId);

    return (
      <ul className="list-group data-list">
        { FitbitSensorInfo.renderConnectionStatus(connected) }
        { FitbitSensorInfo.renderHeartRate(connected, restingHeartRate) }
        { FitbitSensorInfo.renderDistance(connected, floors, elevation) }
        { FitbitSensorInfo.renderCalories(connected, caloriesBMR, caloriesOut, activityCalories) }
      </ul>
    );
  }
}

FitbitSensorInfo.propTypes = propTypes;
FitbitSensorInfo.defaultProps = defaultProps;


export default graphql(GetServerDataMutation)(FitbitSensorInfo);
