/**
 * Created by anser on 12/26/16.
 */
import React, { PropTypes } from 'react';
import Icon from 'react-fa';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

export default class FitbitSensorInfo extends React.Component {

  static hasAnySensorData() {
    const {
      connected,
      duration,
      distance,
      calories,
      height
    } = this.props.data.node.state;

    if (connected !== undefined && connected !== null) {
      return true;
    } else if (duration !== undefined && duration !== null) {
      return true;
    } else if (distance !== undefined && distance !== null) {
      return true;
    } else if (calories !== undefined && calories !== null) {
      return true;
    } else if (height !== undefined && height !== null) {
      return true;
    }

    return false;
  }

  static renderConnectionStatus(connected) {

    let status = null;

    if (connected === undefined || connected === null) {
      return (<div />);
    } else if (connected) {
      status = (<span>Online <Icon name="circle text-success" /></span>);
    } else {
      status = (<span>Offline <Icon name="circle text-danger" /></span>);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Status</div>
        <div className="data-value">{status}</div>
      </li>
    );
  }

  static renderDuration(duration) {
    if (duration === undefined || duration === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Duration</div>
        <div className="data-value">{duration} ms</div>
      </li>
    );
  }

  static renderDistance(distance) {
    if (distance === undefined || distance === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Distance</div>
        <div className="data-value">{distance} M</div>
      </li>
    );
  }

  static renderCalories(calories) {
    if (calories === undefined || calories === null) {
      return (<div />);
    }

    return (
      <li className="list-group-item">
        <div className="data-label">Calories Out</div>
        <div className="data-value">{calories}</div>
      </li>
    );
  }

  render() {
    // console.log('this.props.data.node: ' , this.props.data.node)

    if (!this.props.data.node || !this.props.data.node.state) {
      return (<div />);
    }

    const {
      connected,
      duration,
      distance,
      calories
    } = this.props.data.node.state;

    return (
      <ul className="list-group data-list">
        { FitbitSensorInfo.renderConnectionStatus(connected) }
        { FitbitSensorInfo.renderDuration(duration) }
        { FitbitSensorInfo.renderDistance(distance) }
        { FitbitSensorInfo.renderCalories(calories) }
      </ul>
    );
  }
}

FitbitSensorInfo.propTypes = propTypes;
FitbitSensorInfo.defaultProps = defaultProps;
