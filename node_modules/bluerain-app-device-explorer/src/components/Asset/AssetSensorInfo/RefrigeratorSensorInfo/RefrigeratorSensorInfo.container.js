import React, { PropTypes } from 'react';
import Icon from 'react-fa';
import 'bluerain-bootstrap-theme/dist/css/components/data-list.css';
// import DataListComponent from '../DataList/DataList.component';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

export default class RefrigeratorSensorInfo extends React.Component {

  static renderConnectionStatus(connected) {

    let status = null;

    if (typeof (connected) !== 'boolean') {
      return (<div />);
    } else if (connected) {
      status = (<span>Online <Icon name="circle text-success" /></span>);
    } else {
      status = (<span>Offline <Icon name="circle text-danger" /></span>);
    }
    return (
      <li className="list-group-item">
        <div className="data-label">Status</div>
        <div className="data-value">{status}</div>
      </li>
    );
  }

  static renderAmbientTemperature(temperature, connected) {
    if (typeof (temperature) !== 'number') {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Ambient Temperature</div>
          <div className="data-value">{temperature.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderdoor(door, connected) {

    if (typeof (door) !== 'number') {
      return (<div />);
    } else if (door) {
      door = 'Open';
    } else {
      door = 'Close';
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Door</div>
          <div className="data-value">{door}</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderCompressor(compressor, connected, standby) {
    if (typeof (compressor) !== 'number') {
      return (<div />);
    }
    if (standby) {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Compressor Shell</div>
          <div className="data-value">{compressor.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderCondenserIn(condenserIn, connected, standby) {
    if (typeof (condenserIn) !== 'number') {
      return (<div />);
    }
    if (standby) {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Condenser Input</div>
          <div className="data-value">{condenserIn.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderCondenserOut(condenserOut, connected, standby) {
    if (typeof (condenserOut) !== 'number') {
      return (<div />);
    }
    if (standby) {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Condenser Output</div>
          <div className="data-value">{condenserOut.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderinsideFreezer(insideFreezer, connected, standby) {
    if (typeof (insideFreezer) !== 'number') {
      return (<div />);
    }
    if (standby) {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Inside Freezer</div>
          <div className="data-value">{insideFreezer.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  static renderinsideRefrigerator(insideRefrigerator, connected, standby) {
    if (typeof (insideRefrigerator) !== 'number') {
      return (<div />);
    }
    if (standby) {
      return (<div />);
    }
    if (connected) {
      return (
        <li className="list-group-item">
          <div className="data-label">Inside Refrigerator</div>
          <div className="data-value">{insideRefrigerator.toFixed(0)} ℃</div>
        </li>
      );
    }
    return (<div />);
  }

  render() {
    if (!this.props.data.node || !this.props.data.node.state) {
      return (<div />);
    }

    const {
      // connected,
      temperature,
      door,
      // standby
    } = this.props.data.node.state;
    // todo: where true is passed connected will be passs and where false is passed standby will be pass in below functions
    return (
      <ul className="list-group data-list">
        { RefrigeratorSensorInfo.renderConnectionStatus(true) }
        { RefrigeratorSensorInfo.renderdoor(door, true) }
        { RefrigeratorSensorInfo.renderCompressor(((temperature.t1 / 1024) - 0.5) * 100, true, false) }
        { RefrigeratorSensorInfo.renderCondenserOut(((temperature.t2 / 1024) - 0.5) * 100, true, false) }
        { RefrigeratorSensorInfo.renderCondenserIn(((temperature.t3 / 1024) - 0.5) * 100, true, false) }
        { RefrigeratorSensorInfo.renderinsideFreezer(((temperature.t5 / 1024) - 0.5) * 100, true, false) }
        { RefrigeratorSensorInfo.renderinsideRefrigerator(((temperature.t6 / 1024) - 0.5) * 100, true, false) }
      </ul>
    );
  }
}

RefrigeratorSensorInfo.propTypes = propTypes;
RefrigeratorSensorInfo.defaultProps = defaultProps;

// { this.renderAmbientTemperature(((temperature.t4 / 1024) - 0.5) * 100, true) }
