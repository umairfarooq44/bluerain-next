import React, { PropTypes } from 'react';
import CaloriesChartComponent from './CaloriesChart.component';

const propTypes = {
  data: PropTypes.object,
  tooltip: PropTypes.bool,
  startDate: PropTypes.string,
  endDate: PropTypes.string,
  label: PropTypes.string,
  showGraph: PropTypes.bool,
  linkTag: PropTypes.oneOfType([
    React.PropTypes.func,
    React.PropTypes.string
  ]),
  to: PropTypes.string,
  color: PropTypes.string
};

const defaultPropTypes = {
  startDate: '01/01/1970',
  endDate: '01/01/2099',
  tooltip: true,
  showGraph: true,
  label: 'Average Calories Burnt',
  linkTag: 'a',
  to: '#'
};

export default class CaloriesChartContainer extends React.Component {

  render() {
    const {
      color,
      tooltip,
      data: dbData,
      label,
      linkTag,
      to,
      showGraph,
      ...rest
    } = this.props;

    const data = [];
    let lastReading = 'No data found';

    if (this.props.data === undefined || this.props.data.loading) {
      lastReading = 'Loading data';
    }

    try {

      let dataFromQuery = dbData.node.events.edges;
      dataFromQuery = dataFromQuery.map(item => item.node);

      dataFromQuery.forEach((item) => {
        if (item.data && item.data.calories !== undefined) {
          data.push({
            time: new Date(item.time),
            calories: item.data.calories
          });
        }
      });
      if (data.length > 0) {
        data.sort((a, b) => (a.time > b.time) ? 1 : ((b.time > a.time) ? -1 : 0));
        const sum = data.reduce((a, b) => a + b.calories, 0);
        const average = sum / data.length;
        lastReading = `${average.toFixed(0)}`;
      }
    } catch (error) {
      console.info('Calories Chart no data found');
    }

    if (showGraph) {
      return (
        <CaloriesChartComponent
          data={data}
          x="time"
          y={datum => (datum.calories)}
          color={this.props.color}
          label={label}
          value={lastReading}
          tooltip={this.props.tooltip}
          linkTag={linkTag}
          to={to}
          {...rest}
        />

      );
    }
    return (
      <CaloriesChartComponent
        color={color}
        label={label}
        value={lastReading}
        tooltip={tooltip}
        linkTag={linkTag}
        to={to}
        {...rest}
      />
    );
  }
}

CaloriesChartContainer.propTypes = propTypes;
CaloriesChartContainer.defaultProps = defaultPropTypes;
