/**
 * Created by atif on 12/18/16.
 */
import React, { PropTypes } from 'react';
import CurrentChartComponent from './CurrentChart.component';

const propTypes = {
  data: PropTypes.object,
  tooltip: PropTypes.bool,
  startDate: PropTypes.string,
  endDate: PropTypes.string,
  label: PropTypes.string,
  showGraph: PropTypes.bool,
  linkTag: PropTypes.oneOfType([
    React.PropTypes.func,
    React.PropTypes.string
  ]),
  to: PropTypes.string,
  color: PropTypes.string
};

const defaultPropTypes = {
  startDate: '01/01/1970',
  endDate: '01/01/2099',
  tooltip: true,
  showGraph: true,
  label: 'Average Current',
  linkTag: 'a',
  to: '#'
};

const currentThreshold = 0;
export default class CurrentChartContainer extends React.Component {

  render() {

    const {
      tooltip,
      data: dbData,
      label,
      linkTag,
      to,
      color,
      showGraph,
      ...rest
    } = this.props;

    let data = [];
    let lastReading = 'No data found';
    if (this.props.data === undefined || this.props.data.loading) {
      lastReading = 'Loading data';
    }

    try {
      // let dataFromQuery = dbData.node.events.edges;
      let dataFromQuery = dbData.Event.EventFind.edges;
      dataFromQuery = dataFromQuery.map(item => item.node);

      dataFromQuery.forEach((item) => {
        if (item.data && item.data.current !== undefined) {
          data.push({
            time: new Date(item.time),
            current: item.data.current
          });
        }
      });

      data = data.filter(el =>
        el.current >= currentThreshold
      );
      if (data.length > 0) {
        data.sort((a, b) => (a.time > b.time) ? 1 : ((b.time > a.time) ? -1 : 0));

        // Sum of data
        const sum = data.reduce((a, b) => a + b.current, 0);
        const average = sum / data.length;
        lastReading = `${average.toFixed(2)} A`;
      }
    } catch (error) {
      // console.info('Current Chart no data found');
    }

    if (showGraph) {
      return (
        <CurrentChartComponent
          data={data}
          x="time"
          y={datum => (datum.current)}
          color={color}
          label={label}
          value={lastReading}
          tooltip={tooltip}
          linkTag={linkTag}
          to={to}
          {...rest}
        />
      );
    }
    return (
      <CurrentChartComponent
        color={color}
        label={label}
        value={lastReading}
        tooltip={tooltip}
        linkTag={linkTag}
        to={to}
        {...rest}
      />
    );
  }
}

CurrentChartContainer.propTypes = propTypes;
CurrentChartContainer.defaultProps = defaultPropTypes;
