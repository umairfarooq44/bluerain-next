/**
 * Created by atif on 12/18/16.
 */
import React, { PropTypes } from 'react';
import TimeChartComponent from './TPLinkTimeChart.component';

const propTypes = {
  data: PropTypes.object,
  tooltip: PropTypes.bool,
  startDate: PropTypes.string,
  endDate: PropTypes.string,
  label: PropTypes.string,
  showGraph: PropTypes.bool,
  linkTag: PropTypes.oneOfType([
    React.PropTypes.func,
    React.PropTypes.string
  ]),
  to: PropTypes.string,
  color: PropTypes.string
};

const defaultPropTypes = {
  startDate: '01/01/1970',
  endDate: '01/01/2099',
  tooltip: true,
  showGraph: true,
  label: 'Operation Hours',
  linkTag: 'a',
  to: '#'
};

export default class TimeChartContainer extends React.Component {

  render() {
    const {
      color,
      tooltip,
      data: dbData,
      label,
      linkTag,
      to,
      showGraph,
      ...rest
    } = this.props;

    const data = [];
    let lastReading = 'No data found';

    if (this.props.data === undefined || this.props.data.loading) {
      lastReading = 'Loading data';
    }

    try {

      let dataFromQuery = dbData.Event.EventFind.edges;
      dataFromQuery = dataFromQuery.map(item => item.node);

      dataFromQuery.forEach((item) => {
        if (item.data && item.data.params.standby !== undefined) {

          data.push({
            time: new Date(item.time),
            standby: item.data.params.standby ? false : true
          });
        }
      });


      if (data.length > 0) {
        data.sort((a, b) => (a.time > b.time) ? 1 : ((b.time > a.time) ? -1 : 0));
        lastReading = `${data[data.length - 1].standby ? 'On' : 'Off'}`;
      }
    } catch (error) {
      // console.info('Time Chart no data found');
    }

    if (showGraph) {
      return (
        <TimeChartComponent
          data={data}
          x="time"
          y={datum => (datum.standby)}
          color={this.props.color}
          label={label}
          value={lastReading}
          tooltip={this.props.tooltip}
          tooltipBooleanTrueLabel="Off"
          tooltipBooleanFalseLabel="On"
          linkTag={linkTag}
          to={to}
          {...rest}
        />

      );
    }
    return (
      <TimeChartComponent
        color={color}
        label={label}
        value={lastReading}
        tooltip={tooltip}
        linkTag={linkTag}
        to={to}
        {...rest}
      />
    );
  }

}

TimeChartContainer.propTypes = propTypes;
TimeChartContainer.defaultProps = defaultPropTypes;
