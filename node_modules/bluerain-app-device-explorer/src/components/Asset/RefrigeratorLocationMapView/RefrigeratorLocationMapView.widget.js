/**
 * Created by anser on 3/7/16.
 */
import React, { PropTypes } from 'react';
import geocoding from 'reverse-geocoding';
import Widget from 'bluerain-ui/lib/Widget/widget';
import WidgetHeader from 'bluerain-ui/lib/Widget/widgetHeader';
import WidgetTitle from 'bluerain-ui/lib/Widget/widgetTitle';
import WidgetContent from 'bluerain-ui/lib/Widget/widgetContent';
import RefrigeratorLocationMapView from './RefrigeratorLocationMapView.container';

const propTypes = {
  data: PropTypes.object,
};

const defaultProps = {};

export default class RefrigeratorLocationMapViewWidget extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      myLocation: 'Loading'
    };
  }

  render() {
    if (!this.props.data.node || !this.props.data.node.state) {
      return (<div />);
    }
    let {
      latitude,
      longitude
    } = this.props.data.node.state.location;
    if (!latitude || !longitude) {
      latitude = 31387640;
      longitude = 74148855;
    }

    const config = {
      latitude: latitude / 1000000,
      longitude: longitude / 1000000
    };

    const ref = this;

    if (this.state.myLocation === 'Loading') {
      geocoding.location(config, (err, data) => {
        ref.setState({ myLocation: data.results[0].formatted_address });
      });
    }


    return (
      <Widget>
        <WidgetHeader>
          <WidgetTitle>{ref.state.myLocation}</WidgetTitle>
        </WidgetHeader>
        <WidgetContent>
          <RefrigeratorLocationMapView data={this.props.data} />
        </WidgetContent>
      </Widget>
    );

  }
}

RefrigeratorLocationMapViewWidget.propTypes = propTypes;
RefrigeratorLocationMapViewWidget.defaultProps = defaultProps;
