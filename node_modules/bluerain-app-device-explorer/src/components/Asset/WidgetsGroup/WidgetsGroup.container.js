import React, { PropTypes } from 'react';
import { Link } from 'react-router';
import { Icon } from 'react-fa';
import AssetsGrid from '../AssetsGrid';

const propTypes = {
  data: PropTypes.object,
  siteId: PropTypes.string
};

const defaultProps = {};

export default class WidgetsGroup extends React.Component {

  static distributeAssetsByTypes(assets) {
    const groups = {};
    const orphans = [];

    assets.forEach((asset) => {
      const type = asset.assetType;

      if (!type || !type.category) {
        orphans.push(asset);
        return;
      }

      const typeCategory = type.category;

      if (!groups[typeCategory]) {
        groups[typeCategory] = [];
      }

      groups[typeCategory].push(asset);
    });

    return {
      groups,
      orphans
    };
  }

  static renderAssetGroupWidget(title, assets) {
    return (<AssetsGrid key={title} title={title} assets={assets} />);
  }

  static renderOrphanAssetGroupWidget(assets) {

    if (assets && assets.length > 0) {
      return (<AssetsGrid title="Other" assets={assets} />);
    }
  }

  render() {
    let assets;
    let assetGroups;
    let addDeviceUrl;
    try {
      assets = this.props.data.node.assets.edges;
      if (assets.length > 0) {
        assets = assets.map(item => item.node);
        assetGroups = WidgetsGroup.distributeAssetsByTypes(assets);
      } else {
        addDeviceUrl = `/app/device-explorer/sites/${this.props.siteId}/add-device?siteName=${this.props.data.node.name}`;
        return (
          <div className="app-content">
            <div className="container">
              <div className="v-align">
                <div className="v-align-middle empty-block">
                  <Icon name="lightbulb-o fa-5x" />
                  <h4>No devices added</h4>
                  <p>To monitor your site you will need to add your devices.</p>
                  <Link className="btn btn-outline-primary btn-lg" to={addDeviceUrl}>Add Device</Link>
                </div>
              </div>
            </div>
          </div>
        );
      }

    } catch (e) {
      console.info('There was an error fetching sites.');
      return (<div />);
    }

    const groups = Object.keys(assetGroups.groups);

    return (
      <div>
        {groups.map(title => WidgetsGroup.renderAssetGroupWidget(title, assetGroups.groups[title]))}
        {WidgetsGroup.renderOrphanAssetGroupWidget(assetGroups.orphans)}
      </div>
    );
  }
}

WidgetsGroup.propTypes = propTypes;
WidgetsGroup.defaultProps = defaultProps;
