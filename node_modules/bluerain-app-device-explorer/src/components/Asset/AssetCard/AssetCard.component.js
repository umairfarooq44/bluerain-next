/**
 * Created by amna on 12/7/16.
 */
import React, { PropTypes } from 'react';
import CardBlock from 'reactstrap/lib/CardBlock';
import CardText from 'reactstrap/lib/CardText';
import Icon from 'react-fa';
import moment from 'moment';
import 'bluerain-bootstrap-theme/dist/css/components/card-view.css';
import CustomCardLink from './CustomCardLink';
import CardViewImg from './CardViewImg';
import CardView from './CardView';

const propTypes = {
  name: PropTypes.string,
  time: PropTypes.string,
  connected: PropTypes.bool,
  importantState: PropTypes.string,
  image: PropTypes.string,
  linkTag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  to: PropTypes.string,
  href: PropTypes.string,
  onClick: PropTypes.func,
};
const defaultProps = {
  name: '',
  time: '',
  importantState: '',
  image: '',
  linkTag: 'a',
  to: '',
  href: '',
  onClick: () => {
  },
  connected: undefined
};

export default class AssetCard extends React.Component {

  static renderName(name) {
    if (name) {
      return (
        <CardText tag="span" className="text-truncate">
          {name}
        </CardText>
      );
    }
    return (<CardText tag="span" />);
  }

  static getStatusIcon(connected) {
    let onlineStatusCssClass;
    if (connected === true) {
      onlineStatusCssClass = 'circle text-success';
      return (<span className="online-status">
        <Icon name={onlineStatusCssClass} />
      </span>);
    } else if (connected !== undefined && !connected) {
      onlineStatusCssClass = 'circle text-danger';
      return (<span className="online-status">
        <Icon name={onlineStatusCssClass} />
      </span>);
    }
  }

  static getSubtitle(time) {
    if (time) {
      return (<span><Icon name="clock-o" /> {moment(time).fromNow(true)}</span>); // time format should be converted
    }
  }

  static getimportantState(importantState) {
    if (!importantState) {
      return (<div />);
    }
    if (importantState === 'true') {
      return (<span>Off</span>);
    } else if (importantState === 'false') {
      return (<span>On</span>);
    }
    return (
      <span>{importantState.substring(0, 2)} â„ƒ</span>
    );


  }

  constructor(props) {
    super(props);
    this.handleClickAction = this.handleClickAction.bind(this);
  }

  handleClickAction() {
    this.props.onClick();
  }


  render() {
    const {
      name,
      time,
      connected,
      importantState,
      image,
      linkTag,
      to,
      href,
      ...props
    } = this.props;
    return (
      <CardView onClick={this.handleClickAction} {...props}>
        <CustomCardLink
          tag={linkTag}
          to={to}
          href={href}
        >
          <CardViewImg image={image} />
          <CardBlock>
            <div className="primary-text">
              {AssetCard.renderName(name)}
              {AssetCard.getStatusIcon(connected)}
            </div>
            <div className="text-muted secondary-text">
              <CardText tag="span">
                {AssetCard.getSubtitle(time)}
              </CardText>
              {AssetCard.getimportantState(importantState)}
            </div>
          </CardBlock>
        </CustomCardLink>
      </CardView>
    );
  }
}

AssetCard.propTypes = propTypes;
AssetCard.defaultProps = defaultProps;
