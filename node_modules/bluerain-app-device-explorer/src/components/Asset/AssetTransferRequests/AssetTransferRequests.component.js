/**
 * Created by anser on 2/24/17.
 */
import React, { PropTypes } from 'react';
import Table from 'reactstrap/lib/Table';
import { graphql } from 'react-apollo';
// import { withNotifications } from 'bluerain-client-services';
import { withNotifications } from '../../Notifications/withNotifications';
import GetOwnerEmailQuery from './GetOwnerEmailQuery.graphql';
import OwnershipTransferStatusMutation from './OwnershipTransferStatusMutation.graphql';
import OwnershipTransferIDMutation from './OwnershipTransferIDMutation.graphql';


const propTypes = {
  onSubmit: PropTypes.func,
  data: PropTypes.object,
  // assetId: PropTypes.string,
  ownerId: PropTypes.string,
  // userId: PropTypes.string,
  // mutate: PropTypes.func,
  // transferIDMutation: PropTypes.func,
  transferStatusMutation: PropTypes.func,
  addNotification: PropTypes.func,
  requests: PropTypes.array,
  currentUserId: PropTypes.string,
  notification: PropTypes.object,
};

const defaultProps = {};
let ownerEmail;
let statusOfRequest;
let currentUserId;
let requestedUserId;
class AssetTransferRequestsComponent extends React.Component {

  constructor(props) {
    super(props);

    this.state = {
      value: '',
      onSubmitCallback: props.onSubmit
    };
    this.renderRequest = this.renderRequest.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.onSubmitReject = this.onSubmitReject.bind(this);
  }

  // Form on submit
  onSubmit(event) {
    // console.log('IN FORM', this.props);
    // console.log('AssetID', event.target.dataset.assetid);
    // console.log('AssetName', event.target.dataset.assetname);
    event.preventDefault();
    const { addNotification } = this.props.notification;
    // const assetId = this.props.assetId;

    // const ownerVariables = {
    //   globalId: event.target.dataset.assetid,
    //   name: event.target.dataset.assetname,
    //   owner: this.props.ownerId
    // };

    // console.log('NEW VAR', ownerVariables)
    const variables = {
      globalId: event.target.dataset.idfield,
      status: 'Accepted',
    };
    // mutation to update transfer request
    this.props.transferStatusMutation({
      variables
    });
    // this.props.transferIDMutation({
    //   ownerVariables
    // });
    addNotification({
      title: 'Success',
      message: 'Transfer Request is accepted',
      status: 'success',
      dismissible: true,
      dismissAfter: 5000,
      position: 'br',
      level: 'error'
    });
  }

  // Reject form on submit
  onSubmitReject(event) {
    event.preventDefault();
    const { addNotification } = this.props.notification;
    // const assetId = this.props.assetId;
    const variables = {
      globalId: event.target.dataset.idfield,
      status: 'Rejected',
    };
    // mutation to update transfer request
    this.props.transferStatusMutation({
      variables
    });
    addNotification({
      title: 'Success',
      message: 'Transfer Request is rejected',
      status: 'success',
      dismissible: true,
      dismissAfter: 5000,
      position: 'br',
      level: 'error'
    });
  }

  renderRequest(request, i) {
    try {
      const requestStatus = request.node.status;
      requestedUserId = request.node.newOwnerUserId;
      currentUserId = this.props.currentUserId;
      if (currentUserId !== requestedUserId) {
        statusOfRequest = (
          <tr key={i} />
        );
      } else if (requestStatus === 'Pending') {
        statusOfRequest = (
          <tr key={i}>
            <td>{request.node.asset.name}</td>
            <td>{ownerEmail}</td>
            <td>
              <form
                style={{ float: 'left', padding: '5px' }} data-assetId={request.node.asset.id}
                data-assetName={request.node.asset.name} data-idfield={request.node.id} onSubmit={this.onSubmit}
                noValidate
              >
                <button type="submit" className="btn btn-primary">Accept</button>
              </form>
              <div style={{ float: 'left', padding: '5px' }}> /</div>
              <form
                style={{ float: 'left', padding: '5px' }} data-idfield={request.node.id}
                onSubmit={this.onSubmitReject} noValidate
              >
                <button type="submit" className="btn btn-primary">Reject</button>
              </form>
            </td>
          </tr>
        );
      } else if (requestStatus === 'Accepted') {
        statusOfRequest = (
          <tr key={i}>
            <td>{request.node.asset.name}</td>
            <td>{ownerEmail}</td>
            <td>Approved</td>
          </tr>
        );
      } else {
        statusOfRequest = (
          <tr key={i} />
        );
      }
      return (
        statusOfRequest
      );
    } catch (e) {
      console.log('ERROR =>', e);
    }
  }

  render() {
    if (!this.props.data || !this.props.requests || !this.props.data.node) {
      return (<div />);
    }
    ownerEmail = this.props.data.node.email;
    currentUserId = this.props.currentUserId;
    const requests = this.props.requests;
    if (requests.length > 0) {
      return (
        <Table id="requestsTable" inverse>
          <thead>
            <tr>
              <th>Asset Name</th>
              <th>Request Made By</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            {requests.map(this.renderRequest)}
          </tbody>
        </Table>
      );
    }
    return (
      <div style={{ paddingTop: '20px' }}>
        <div className="alert alert-info" role="alert">
          <strong>Info!</strong> There are currently no transfer ownership requests.
        </div>
      </div>
    );

  }
}

// export default UserInfoTransfer;

const componentWithQuery = graphql(GetOwnerEmailQuery, {
  options: ({ ownerId }) => ({ variables: { ownerId } })
})(AssetTransferRequestsComponent);

// export default graphql(OwnershipTransferStatusMutation)(withNotifications(componentWithQuery));

export default graphql(OwnershipTransferStatusMutation, { name: 'transferStatusMutation' })(
  graphql(OwnershipTransferIDMutation, { name: 'transferIDMutation' })(withNotifications(componentWithQuery))
);


AssetTransferRequestsComponent.propTypes = propTypes;
AssetTransferRequestsComponent.defaultProps = defaultProps;
