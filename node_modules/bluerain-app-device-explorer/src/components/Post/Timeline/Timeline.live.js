import React from 'react';
// import PageComponent from './AssetPage.component';
import TimelineContainer from './Timeline.container';
import SUBSCRIPTION_QUERY from './subscription.graphql';

export default class LiveComponent extends React.Component {

  constructor(props) {
    super(props);
    // console.log('Timeline Live props are: ', props);
    this.subscribe = this.subscribe.bind(this);

  }

  componentDidMount() {
    this.subscribe(this.props);
  }

  componentWillReceiveProps(nextProps) {
    // console.log("Timeline live going to rececive new props : ", nextProps);
    // // subscription
    // // TODO: Complete this
    // if (!nextProps.data.loading) {
    //   if (this.subscription) {
    //     if (nextProps.data.feed !== this.props.data.feed) {
    //       // if the feed has changed, we need to unsubscribe before resubscribing
    //       this.subscription.unsubscribe();
    //     } else {
    //       // we already have an active subscription with the right params
    //
    //     }
    //   }
    // }
  }

  componentWillUnmount() {
    // this.subscription.unsubscribe();
  }

  subscribe(props) {
    // const ref = this;
    // console.log('Subscription props : ', props);
    this.subscription = props.data.subscribeToMore({
      document: SUBSCRIPTION_QUERY,
      // variables: { globalId: props.assetId },

      updateQuery: (previousResult, { subscriptionData }) => {
        const subId = subscriptionData.data.Post.post.assets.edges[0].node.id;
        // console.log('previousResult : ', previousResult);
        // console.log('subscriptionData : ', subscriptionData);
        if (subId !== props.assetId) {
          return;
        }
        const post = subscriptionData.data.Post.post;
        const edge = {
          node: post,
          // __typename: "PostEdge"
        };

        const node = Object.assign({}, previousResult.node, {
          posts: {
            edges: [edge, ...previousResult.node.posts.edges],
            // __typename: "PostConnection"
          }
        });
        return Object.assign({}, previousResult, { node });
      },
      onError: err => console.error('Subscription Errors : ', err),
    });
  }

  render() {
    return (<TimelineContainer {...this.props} />);
  }
}
