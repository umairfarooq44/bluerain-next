/**
 * Created by anser on 5/24/17.
 */

import React from 'react';
import { shallow } from 'enzyme';
import Timeline from '../../../src/components/Post/Timeline/Timeline.component';
import { timelineData } from '../../../__mocks__/Timeline.mock';

describe('SitesGrid Component Test Specifications', () => {

  it('should check proptype of data', () => {
    const postsData = [
      {
        accounts: {
          edges:[
            {
              node:{
                username: timelineData.username
              }
            }
          ]
        },
        description: timelineData.firmwareDescription,
        time: timelineData.time,
        type: 'FIRMWARE_UPGRADE'
      }
    ];
    const cardWrapper = <Timeline posts={postsData} />;
    expect( typeof cardWrapper.props.posts ).toEqual( 'object' );
  });

  it('PostCard element count should be equal to 1', () => {
    const postsData = [
      {
        accounts: {
          edges:[
            {
              node:{
                username: timelineData.username
              }
            }
          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.firmwareDescription,
        time: timelineData.time,
        type: 'FIRMWARE_UPGRADE'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').length).toEqual(1);
  });

  it('Firmware upgrade post will be rendered based upon type without initiator', () => {
    const postsData = [
      {
        accounts: {
          edges:[
            {
              node:{
                username: timelineData.username
              }
            }
          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.firmwareDescription,
        time: timelineData.time,
        type: 'FIRMWARE_UPGRADE'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Network');
    expect(cardWrapper.find('PostCard').props().initiator).toBe('');
  });

  it('User command post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[
            {
              node:{
                username: timelineData.username
              }
            }
          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.modeDescription,
        time: timelineData.time,
        type: 'USER_COMMAND'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Web App');
    expect(cardWrapper.find('PostCard').props().initiator).toBe('orient@blueeast.com');
  });

  it('Device registration post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[
            {
              node:{
                username: timelineData.username,
                firstName: timelineData.firstName,
                lastName: timelineData.lastName
              }
            }
          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.deviceRegisterDescription,
        time: timelineData.time,
        type: 'DEVICE_REGISTRATION'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Web App');
    expect(cardWrapper.find('PostCard').props().initiator).toBe('Muhammad Anser');
  });

  it('Scheduled post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.scheduleDescription,
        time: timelineData.time,
        type: 'SCHEDULE'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Scheduled App');
  });

  it('Alert post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.alertDescription,
        time: timelineData.time,
        type: 'ALERT'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Device');
  });

  it('IR Control post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.IRControlDescription,
        time: timelineData.time,
        type: 'IR_CONTROL'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Remote');
  });

  it('Flow rule post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.flowDescription,
        time: timelineData.time,
        type: 'FLOW_RULE_EXECUTED'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Automated Rule');
  });

  it('Connection post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.connectionDescription,
        time: timelineData.time,
        type: 'CONNECTION'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Network');
  });

  it('Door open post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.doorOpenDescription,
        time: timelineData.time,
        type: 'DOOR_OPEN'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Network');
  });

  it('Door close post will be rendered based upon type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: timelineData.doorCloseDescription,
        time: timelineData.time,
        type: 'DOOR_CLOSED'
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('Network');
  });

  it('Default post will be rendered based upon empty type', () => {
    const postsData = [
      {
        accounts: {
          edges:[

          ]
        },
        assets: {
          edges: [
            {
              node: {
                node: {
                  id: timelineData.assetID
                }
              }
            }
          ]
        },
        description: '',
        time: timelineData.time,
        type: ''
      }
    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').props().source).toBe('');
  });


  it('No postcard will be rendered in case of no posts', () => {
    const postsData = [

    ];
    const cardWrapper = shallow(<Timeline posts={postsData} />);
    expect(cardWrapper.find('PostCard').length).toEqual(0);
  });

});
