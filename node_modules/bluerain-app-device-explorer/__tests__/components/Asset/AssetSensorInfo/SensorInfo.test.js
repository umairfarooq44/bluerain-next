/**
 * Created by anser on 16/5/17.
 */

import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';

import { SensorInfoData, disconnectedSensorInfoData } from '../../../../__mocks__/AssetSensorInfo.mock';
import AssetSensorInfo from '../../../../src/components/Asset/AssetSensorInfo/SensorInfo/AssetSensorInfo.container';

describe('SensorInfo Component Test Specifications', () => {


  it('should check proptype of data', () => {
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected,
          ambientTemperature: SensorInfoData.ambientTemperature,
          current: SensorInfoData.current,
          power: SensorInfoData.power,
          voltage: SensorInfoData.voltage,
          standby: SensorInfoData.standby
        }

      }
    };
    const cardWrapper = <AssetSensorInfo data={sensorInfoData} />;
    expect( typeof cardWrapper.props.data ).toEqual( 'object' );
  });


  it('should render successfully when params are passed', () => {
    const div = document.createElement('div');
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected,
          ambientTemperature: SensorInfoData.ambientTemperature,
          current: SensorInfoData.current,
          power: SensorInfoData.power,
          voltage: SensorInfoData.voltage,
          standby: SensorInfoData.standby
        }

      }
    };
    ReactDOM.render(<AssetSensorInfo data={sensorInfoData} />, div);

  });

  it('element with list-group-item should not exist when connected prop is not passed.', () => {
    const sensorInfoData = {
      node :{
        state: {
          ambientTemperature: SensorInfoData.ambientTemperature,
          current: SensorInfoData.current,
          power: SensorInfoData.power,
          voltage: SensorInfoData.voltage,
          standby: SensorInfoData.standby
        }

      }
    };
    const component = TestUtils.renderIntoDocument( <AssetSensorInfo data={sensorInfoData} /> );

    const connectedDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'list-group-item');

    expect(connectedDiv.length).toEqual(0);

  });

  it('icon class should be text-success when connected = true', () => {
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected,
          ambientTemperature: SensorInfoData.ambientTemperature,
          current: SensorInfoData.current,
          power: SensorInfoData.power,
          voltage: SensorInfoData.voltage,
          standby: SensorInfoData.standby
        }

      }
    };
    const component = TestUtils.renderIntoDocument( <AssetSensorInfo data={sensorInfoData} /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-success');

    expect(iconSpan.length).toEqual(1);

  });

  it('icon class should be text-danger when connected = false', () => {

    const sensorInfoData = {
      node :{
        state: {
          connected: disconnectedSensorInfoData.connected,
          ambientTemperature: SensorInfoData.ambientTemperature,
          current: SensorInfoData.current,
          power: SensorInfoData.power,
          voltage: SensorInfoData.voltage,
          standby: SensorInfoData.standby
        }

      }
    };
    const component = TestUtils.renderIntoDocument( <AssetSensorInfo data={sensorInfoData} /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-danger');

    expect(iconSpan.length).toEqual(1);

  });
});

it('should return empty div when connected is not of type boolean', () => {
  const sensorInfoData = {
    node :{
      state: {
        connected: '',
        ambientTemperature: SensorInfoData.ambientTemperature,
        current: SensorInfoData.current,
        power: SensorInfoData.power,
        voltage: SensorInfoData.voltage,
        standby: SensorInfoData.standby
      }

    }
  };
  const component = TestUtils.renderIntoDocument( <AssetSensorInfo data={sensorInfoData} /> );

  const connectedDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'list-group-item');

  expect(connectedDiv.length).toEqual(0);

});

