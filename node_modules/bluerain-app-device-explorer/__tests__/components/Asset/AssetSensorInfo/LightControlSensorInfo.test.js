/**
 * Created by anser on 19/5/17.
 */

import React from 'react';
import ReactDOM from 'react-dom';
import { shallow } from 'enzyme';
import TestUtils from 'react-addons-test-utils';

import { SensorInfoData, disconnectedSensorInfoData } from '../../../../__mocks__/AssetSensorInfo.mock';
import LightSensorInfo from '../../../../src/components/Asset/AssetSensorInfo/LightControlSensorInfo/LightSensorInfo.container';

describe('LightSensorInfo Component Test Specifications', () => {


  it('should check proptype of data', () => {
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected
        }

      }
    };
    const cardWrapper = <LightSensorInfo data={sensorInfoData} />;
    expect( typeof cardWrapper.props.data ).toEqual( 'object' );
  });


  it('should render successfully when params are passed', () => {
    const div = document.createElement('div');
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected
        }
      }
    };
    ReactDOM.render(<LightSensorInfo data={sensorInfoData} />, div);

  });

  it('element with list-group-item should not exist when connected prop is not passed.', () => {
    const sensorInfoData = {
      node :{
        state: {

        }

      }
    };
    const component = TestUtils.renderIntoDocument( <LightSensorInfo data={sensorInfoData} /> );

    const connectedDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'list-group-item');

    expect(connectedDiv.length).toEqual(0);

  });

  it('icon class should be text-success when connected = true', () => {
    const sensorInfoData = {
      node :{
        state: {
          connected: SensorInfoData.connected
        }

      }
    };
    const component = TestUtils.renderIntoDocument( <LightSensorInfo data={sensorInfoData} /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-success');

    expect(iconSpan.length).toEqual(1);

  });

  it('icon class should be text-danger when connected = false', () => {

    const sensorInfoData = {
      node :{
        state: {
          connected: disconnectedSensorInfoData.connected
        }

      }
    };
    const component = TestUtils.renderIntoDocument( <LightSensorInfo data={sensorInfoData} /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-danger');

    expect(iconSpan.length).toEqual(1);

  });
});

it('should return empty div when connected is not of type boolean', () => {
  const sensorInfoData = {
    node :{
      state: {
        connected: ''
      }

    }
  };
  const component = TestUtils.renderIntoDocument( <LightSensorInfo data={sensorInfoData} /> );

  const connectedDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'list-group-item');

  expect(connectedDiv.length).toEqual(0);

});

it('li element count should be equal to 1', () => {
  const sensorInfoData = {
    node :{
      state: {
        connected: SensorInfoData.connected
      }
    }
  };
  const cardWrapper = shallow(<LightSensorInfo data={sensorInfoData} />);
  expect(cardWrapper.find('li').length).toEqual(1);
});

