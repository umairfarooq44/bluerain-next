/**
 * Created by amna on 1/3/17.
 */

import React from 'react';
import ReactDOM from 'react-dom';
import { shallow } from 'enzyme';
import TestUtils from 'react-addons-test-utils';

import { connectedDeviceData, disconnectedDeviceData, unknownStatusDeviceData } from '../../../../__mocks__/AssetCard.mock';
import AssetCard from '../../../../src/components/Asset/AssetCard/AssetCard.component';

describe('AssetCard Component Test Specifications', () => {

  it('should render successfully without passing any prop', () => {
    const div = document.createElement('div');
    ReactDOM.render(<AssetCard />, div);

  });

  it('should render successfully when card with href is used', () => {
    const div = document.createElement('div');
    ReactDOM.render(<AssetCard
      name={connectedDeviceData.name}
      connected={connectedDeviceData.connected}
      time={connectedDeviceData.time}
      importantState={connectedDeviceData.importantState}
      image={connectedDeviceData.image}
      linkTag={connectedDeviceData.linkTag}
      href={connectedDeviceData.href}
    />, div);
  });

  it('CardView element count should be equal to 1', () => {
    const cardWrapper = shallow(<AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      time={disconnectedDeviceData.time}
      importantState={disconnectedDeviceData.importantState}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    />);
    expect(cardWrapper.find('CardView').length).toEqual(1);
    expect(cardWrapper.find('CardText').length).toEqual(2);
  });

  it('element with text-truncate should not exist when name prop is nt passed', () => {

    const component = TestUtils.renderIntoDocument( <AssetCard
      connected={disconnectedDeviceData.connected}
      time={disconnectedDeviceData.time}
      importantState={disconnectedDeviceData.importantState}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    /> );

    const nameDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-truncate');

    expect(TestUtils.isCompositeComponent(component)).toBeTruthy();
    expect(nameDiv.length).toEqual(0);

  });

  it('element with clock-o should not exist when time prop is not passed.', () => {

    const component = TestUtils.renderIntoDocument( <AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      importantState={disconnectedDeviceData.importantState}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    /> );

    const timeDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'clock-o');

    expect(timeDiv.length).toEqual(0);

  });

  // check
  it('should not contain important state', () => {

    const cardWrapper = shallow(<AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      time={disconnectedDeviceData.time}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    />);
    expect(cardWrapper.containsMatchingElement(
      <span>Standby</span>
    )).toEqual(false);
  });

  it('should not contain connected icon div when connected prop is undefined', () => {

    const component = TestUtils.renderIntoDocument( <AssetCard
      name={unknownStatusDeviceData.name}
      connected={unknownStatusDeviceData.connected}
      time={unknownStatusDeviceData.time}
      importantState={unknownStatusDeviceData.importantState}
      image={unknownStatusDeviceData.image}
      linkTag={unknownStatusDeviceData.linkTag}
      to={unknownStatusDeviceData.to}
    /> );

    const connectedIconDiv = TestUtils.scryRenderedDOMComponentsWithClass(component, 'online-status');

    expect(connectedIconDiv.length).toEqual(0);
  });

  it('icon class should be text-success when connected = true', () => {

    const component = TestUtils.renderIntoDocument( <AssetCard
      name={connectedDeviceData.name}
      connected={connectedDeviceData.connected}
      importantState={connectedDeviceData.importantState}
      image={connectedDeviceData.image}
      linkTag={connectedDeviceData.linkTag}
      to={connectedDeviceData.to}
    /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-success');

    expect(iconSpan.length).toEqual(1);

  });

  it('icon class should be text-danger when connected = false', () => {

    const component = TestUtils.renderIntoDocument( <AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      importantState={disconnectedDeviceData.importantState}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    /> );

    const iconSpan = TestUtils.scryRenderedDOMComponentsWithClass(component, 'text-danger');

    expect(iconSpan.length).toEqual(1);

  });


  it('should not contain image, image prop on rendered component will be empty', () => {

    const cardWrapper = shallow(<AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      time={disconnectedDeviceData.time}
      linkTag={disconnectedDeviceData.linkTag}
      to={disconnectedDeviceData.to}
    />);
    expect(cardWrapper.instance().props.image).toEqual('');

  });

  it('provided definition of onClick method should be called', () => {

    const cardWrapper = shallow(<AssetCard
      name={disconnectedDeviceData.name}
      connected={disconnectedDeviceData.connected}
      time={disconnectedDeviceData.time}
      importantState={disconnectedDeviceData.importantState}
      image={disconnectedDeviceData.image}
      linkTag={disconnectedDeviceData.linkTag}
      href={disconnectedDeviceData.href}
      onClick={() => 'See i am being called!!'}
    />);
    expect(cardWrapper.instance().props.onClick()).toBe('See i am being called!!');

  });
});
