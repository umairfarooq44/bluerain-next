'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _bluerainClientServices = require('bluerain-client-services');

var _AppContent = require('bluerain-ui/lib/Layout/AppContent');

var _AppContent2 = _interopRequireDefault(_AppContent);

var _PrimaryAppNav = require('bluerain-ui/lib/Nav/PrimaryAppNav');

var _PrimaryAppNav2 = _interopRequireDefault(_PrimaryAppNav);

var _SecondaryAppNav = require('bluerain-ui/lib/Nav/SecondaryAppNav');

var _SecondaryAppNav2 = _interopRequireDefault(_SecondaryAppNav);

var _Button = require('reactstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _reactRouter = require('react-router');

var _SitesGrid = require('../components/Site/SitesGrid');

var _SitesGrid2 = _interopRequireDefault(_SitesGrid);

var _urlBuilder = require('../routes/urlBuilder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  title: _react.PropTypes.string,
  showLoading: _react.PropTypes.func,
  systemNav: _react.PropTypes.func,
  location: _react.PropTypes.func
};

var defaultProps = {
  title: 'Sites'
};

var Page = function (_React$Component) {
  _inherits(Page, _React$Component);

  function Page() {
    _classCallCheck(this, Page);

    return _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).apply(this, arguments));
  }

  _createClass(Page, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.showLoading) {
        this.props.showLoading();
      }
      return null;
    }
  }, {
    key: 'renderPrimaryNav',
    value: function renderPrimaryNav() {
      var title = this.props.title;
      var toggle = this.props.systemNav.actions.toggle;

      var btnStyle = {
        margin: '0 7px '
      };
      return _react2.default.createElement(
        _PrimaryAppNav2.default,
        { title: title, toggleMenu: toggle },
        _react2.default.createElement(
          _reactRouter.Link,
          { to: '/app/device-explorer/site/new' },
          _react2.default.createElement(
            _Button2.default,
            { color: 'primary' },
            _react2.default.createElement('i', {
              className: 'fa fa-plus hidden-xm-down'
            }),
            _react2.default.createElement(
              'span',
              {
                className: 'hidden-xs-down', style: btnStyle
              },
              'Add Site'
            )
          )
        ),
        '\xA0'
      );
    }
  }, {
    key: 'renderSecondaryNav',
    value: function renderSecondaryNav() {
      var pathname = this.props.location.pathname;

      return _react2.default.createElement(_SecondaryAppNav2.default, {
        items: [{
          label: 'Grid View',
          url: '/app/device-explorer',
          class: pathname === (0, _urlBuilder.sitesGridViewUrl)() ? 'active' : ''
        }, {
          label: 'Map View',
          url: '/app/device-explorer/asset_locations',
          class: pathname === (0, _urlBuilder.sitesMapViewUrl)() ? 'active' : ''
        }]
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.renderPrimaryNav(),
        this.renderSecondaryNav(),
        _react2.default.createElement(
          _AppContent2.default,
          null,
          _react2.default.createElement(
            _reactstrap.Container,
            null,
            _react2.default.createElement(
              _reactstrap.Row,
              null,
              _react2.default.createElement(
                _reactstrap.Col,
                { lg: '12', className: 'pt-2' },
                _react2.default.createElement(_SitesGrid2.default, null)
              )
            )
          )
        )
      );
    }
  }]);

  return Page;
}(_react2.default.Component);

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

exports.default = (0, _bluerainClientServices.withSystemNav)((0, _reactRouter.withRouter)((0, _bluerainClientServices.withLoadingBar)(Page)));

// <Link to="/app/device-explorer/transfer_requests"><Button color="primary"><i className="fa fa-plus hidden-sm-up"  /><span className="hidden-xs-down">Transfer Requests</span></Button></Link>&nbsp;