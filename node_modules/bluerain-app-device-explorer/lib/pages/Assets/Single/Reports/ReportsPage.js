'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactApollo = require('react-apollo');

var _urlBuilder = require('../../../../routes/urlBuilder');

var _query = require('./query.graphql');

var _query2 = _interopRequireDefault(_query);

var _ComponentRegistry = require('../../../../components/ComponentRegistry');

var _ComponentRegistry2 = _interopRequireDefault(_ComponentRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CurrentChart = _ComponentRegistry2.default.getComponent('CurrentChart', 'Generic').content;
var EnergySavingChart = _ComponentRegistry2.default.getComponent('EnergySavingChart', 'Generic').content;
var VoltageChart = _ComponentRegistry2.default.getComponent('VoltageChart', 'Generic').content;
var PowerChart = _ComponentRegistry2.default.getComponent('PowerChart', 'Generic').content;
var TemperatureChart = _ComponentRegistry2.default.getComponent('TemperatureChart', 'Generic').content;
var RefrigeratorTemperatureChart = _ComponentRegistry2.default.getComponent('RefrigeratorTemperatureChart', 'Generic').content;
var TimeChart = _ComponentRegistry2.default.getComponent('TimeChart', 'Generic').content;
var FridgeOpenTimeChart = _ComponentRegistry2.default.getComponent('FridgeOpenTimeChart', 'Generic').content;

// const CurrentChart = registry.getComponent('CurrentChart', 'Generic').content;
// const VoltageChart = registry.getComponent('VoltageChart', 'Generic').content;
// const PowerChart = registry.getComponent('PowerChart', 'Generic').content;
// const TemperatureChart = registry.getComponent('TemperatureChart', 'Generic').content;
// const TimeChart = registry.getComponent('TimeChart', 'Generic').content;

var propTypes = {
  assetId: _react.PropTypes.string,
  data: _react.PropTypes.object,
  children: _react.PropTypes.object
};

var defaultProps = {};

var Page = function (_React$Component) {
  _inherits(Page, _React$Component);

  function Page(props) {
    _classCallCheck(this, Page);

    var _this = _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).call(this, props));

    if (localStorage && localStorage.end_date && localStorage.start_date) {
      _this.state = {
        focusedInput: null,
        startDate: (0, _moment2.default)(localStorage.start_date),
        endDate: (0, _moment2.default)(localStorage.end_date)
      };
    } else {
      _this.state = {
        focusedInput: null,
        startDate: (0, _moment2.default)().subtract(1, 'days'),
        endDate: (0, _moment2.default)()
      };
    }
    return _this;
  }

  _createClass(Page, [{
    key: 'renderTemperatureChart',
    value: function renderTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Air Conditioner') {
        return _react2.default.createElement(TemperatureChart, {
          assetId: assetId, queryString: '', showGraph: false, to: temperatureReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderRefrigeratorTemperatureChart',
    value: function renderRefrigeratorTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Refrigerator') {
        return _react2.default.createElement(RefrigeratorTemperatureChart, {
          assetId: assetId, queryString: '', showGraph: false, to: temperatureReportUrl,
          linkTag: Link, startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderCurrentChart',
    value: function renderCurrentChart(assetId, currentReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
        return _react2.default.createElement(CurrentChart, {
          assetId: assetId, queryString: '', showGraph: false, to: currentReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderEnergySavingChart',
    value: function renderEnergySavingChart(assetId, currentReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Air Conditioner') {
        return _react2.default.createElement(EnergySavingChart, {
          assetId: assetId, queryString: '', showGraph: false, to: currentReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderPowerChart',
    value: function renderPowerChart(assetId, powerReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
        return _react2.default.createElement(PowerChart, {
          assetId: assetId, queryString: '', showGraph: false, to: powerReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderVoltageChart',
    value: function renderVoltageChart(assetId, voltageReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Air Conditioner' || this.props.data.node.assetType.name === 'Refrigerator') {
        return _react2.default.createElement(VoltageChart, {
          assetId: assetId, queryString: '', showGraph: false, to: voltageReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderTimeChart',
    value: function renderTimeChart(assetId, timeReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Socket' || this.props.data.node.assetType.name === 'Light' || this.props.data.node.assetType.name === 'Air Conditioner') {
        return _react2.default.createElement(TimeChart, {
          assetId: assetId, queryString: '', showGraph: false, to: timeReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderFridgeOpenTimeChart',
    value: function renderFridgeOpenTimeChart(assetId, timeReportUrl, Link, startDateFormatted, endDateFormatted) {
      if (this.props.data.node.assetType.name === 'Refrigerator') {
        return _react2.default.createElement(FridgeOpenTimeChart, {
          assetId: assetId, queryString: '', showGraph: false, to: timeReportUrl, linkTag: Link,
          startDate: startDateFormatted, endDate: endDateFormatted
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'render',
    value: function render() {
      var assetId = this.props.assetId;
      var currentReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'current');
      var energysavingReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'energy-saving');
      var powerReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'power');
      // const temperatureReportUrl = assetReportPageUrl(assetId, 'temperature');
      var refTemperatureReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'ref_temperature');
      // const timeReportUrl = assetReportPageUrl(assetId, 'time');
      var refTimeReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'ref_time');
      var voltageReportUrl = (0, _urlBuilder.assetReportPageUrl)(assetId, 'voltage');

      // const startDateFormatted = moment([1970, 1, 28]).toISOString();
      // const endDateFormatted = moment(new Date()).toISOString();

      var _state = this.state,
          startDate = _state.startDate,
          endDate = _state.endDate;

      var startDateFormatted = (0, _moment2.default)(startDate).utc().startOf('day').toISOString();
      var endDateFormatted = (0, _moment2.default)(endDate).utc().endOf('day').toISOString();

      return _react2.default.createElement(
        'div',
        { className: 'app-fluid' },
        _react2.default.createElement(
          'div',
          { className: 'scrolled-sidebar border-right' },
          _react2.default.createElement(
            'div',
            { className: 'inner-holder' },
            this.renderFridgeOpenTimeChart(assetId, refTimeReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted),
            this.renderRefrigeratorTemperatureChart(assetId, refTemperatureReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted),
            this.renderCurrentChart(assetId, currentReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted),
            this.renderEnergySavingChart(assetId, energysavingReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted),
            this.renderPowerChart(assetId, powerReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted),
            this.renderVoltageChart(assetId, voltageReportUrl, _reactRouter.Link, startDateFormatted, endDateFormatted)
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'container-fluid' },
          this.props.children
        )
      );
    }
  }]);

  return Page;
}(_react2.default.Component);

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

exports.default = (0, _reactApollo.graphql)(_query2.default, {
  options: function options(_ref) {
    var assetId = _ref.assetId;
    return { variables: { assetId: assetId } };
  }
})(Page);

// { this.renderTemperatureChart(assetId, temperatureReportUrl, Link, startDateFormatted, endDateFormatted) }