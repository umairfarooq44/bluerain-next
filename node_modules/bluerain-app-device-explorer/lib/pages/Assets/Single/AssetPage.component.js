'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _AppContent = require('bluerain-ui/lib/Layout/AppContent');

var _AppContent2 = _interopRequireDefault(_AppContent);

var _PrimaryAppNav = require('bluerain-ui/lib/Nav/PrimaryAppNav');

var _PrimaryAppNav2 = _interopRequireDefault(_PrimaryAppNav);

var _SecondaryAppNav = require('bluerain-ui/lib/Nav/SecondaryAppNav');

var _SecondaryAppNav2 = _interopRequireDefault(_SecondaryAppNav);

var _urlBuilder = require('../../../routes/urlBuilder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  title: _react.PropTypes.string,
  assetId: _react.PropTypes.string.isRequired,
  data: _react.PropTypes.shape({
    node: _react.PropTypes.shape({
      id: _react2.default.PropTypes.string,
      name: _react2.default.PropTypes.string,
      image: _react.PropTypes.shape({
        url: _react2.default.PropTypes.string
      }),
      site: _react.PropTypes.shape({
        id: _react2.default.PropTypes.string,
        name: _react2.default.PropTypes.string,
        image: _react2.default.PropTypes.string
      }),
      type: _react.PropTypes.shape({
        icon: _react.PropTypes.shape({
          url: _react2.default.PropTypes.string
        }),
        name: _react2.default.PropTypes.string
      }),
      assetType: _react.PropTypes.shape({
        name: _react2.default.PropTypes.string,
        icon: _react2.default.PropTypes.string
      })
    })
  }),
  children: _react.PropTypes.object,
  location: _react.PropTypes.object,
  routes: _react.PropTypes.array
};

var defaultProps = {
  title: 'Site'
};

var Page = function (_React$Component) {
  _inherits(Page, _React$Component);

  function Page() {
    _classCallCheck(this, Page);

    return _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).apply(this, arguments));
  }

  _createClass(Page, [{
    key: 'renderPrimaryNav',
    value: function renderPrimaryNav() {

      var title = this.props.title;
      var icon = void 0;

      var previous = void 0;

      try {
        var id = this.props.data.node.site.id;
        var name = this.props.data.node.site.name;

        previous = {
          title: name,
          url: (0, _urlBuilder.sitePageUrl)(id)
        };
      } catch (e) {
        console.log('ERROR =>', e);
      }

      try {
        title = this.props.data.node.name;
      } catch (e) {
        console.log('ERROR =>', e);
      }

      try {
        icon = this.props.data.node.site.image;
      } catch (e) {
        console.log('ERROR =>', e);
      }

      if (icon === undefined || icon === null) {
        try {
          icon = this.props.data.node.assetType.icon;
        } catch (e) {
          console.log('ERROR =>', e);
        }
      }

      return _react2.default.createElement(_PrimaryAppNav2.default, { title: title, icon: icon, previous: previous });
    }
  }, {
    key: 'renderSecondaryNav',
    value: function renderSecondaryNav() {
      var assetId = this.props.assetId;
      var pathname = this.props.location.pathname;


      var settingsPath = '';
      if (this.props.routes[4] && this.props.routes[4].path) {
        settingsPath = this.props.routes[4].path;
      }
      var type = this.props.data.node.assetType.name;
      if (type === 'Refrigerator') {
        return _react2.default.createElement(_SecondaryAppNav2.default, {
          items: [{
            label: 'Overview',
            url: (0, _urlBuilder.assetPageUrl)(assetId),
            class: pathname === (0, _urlBuilder.assetPageUrl)(assetId) ? 'active' : ''
          }, {
            label: 'Reports',
            url: (0, _urlBuilder.refAssetReportPageUrl)(assetId),
            class: settingsPath === 'reports' ? 'active' : ''
          }, {
            label: 'Settings',
            url: (0, _urlBuilder.deviceSettingsPageUrl)(assetId),
            class: settingsPath === 'device-general-settings' || settingsPath === 'device-network-settings' || settingsPath === 'device-info' ? 'active' : ''
          }]
        });
      }
      return _react2.default.createElement(_SecondaryAppNav2.default, {
        items: [{
          label: 'Overview',
          url: (0, _urlBuilder.assetPageUrl)(assetId),
          class: pathname === (0, _urlBuilder.assetPageUrl)(assetId) ? 'active' : ''
        }, {
          label: 'Reports',
          url: (0, _urlBuilder.assetReportPageUrl)(assetId),
          class: settingsPath === 'reports' ? 'active' : ''
        }, {
          label: 'Settings',
          url: (0, _urlBuilder.deviceSettingsPageUrl)(assetId),
          class: settingsPath === 'device-general-settings' || settingsPath === 'device-network-settings' || settingsPath === 'device-info' ? 'active' : ''
        }]
      });
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      // const { assetId } = this.props;

      return _react2.default.createElement(
        _AppContent2.default,
        null,
        this.props.children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        this.renderPrimaryNav(),
        this.renderSecondaryNav(),
        this.renderContent()
      );
    }
  }]);

  return Page;
}(_react2.default.Component);

Page.propTypes = propTypes;
Page.defaultProps = defaultProps;

exports.default = (0, _reactRouter.withRouter)(Page);