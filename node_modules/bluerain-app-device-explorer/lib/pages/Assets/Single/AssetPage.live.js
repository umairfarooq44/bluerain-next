'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AssetPage = require('./AssetPage.component');

var _AssetPage2 = _interopRequireDefault(_AssetPage);

var _subscription = require('./subscription.graphql');

var _subscription2 = _interopRequireDefault(_subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {
  data: {}
};

var LiveComponent = function (_React$Component) {
  _inherits(LiveComponent, _React$Component);

  function LiveComponent(props) {
    _classCallCheck(this, LiveComponent);

    var _this = _possibleConstructorReturn(this, (LiveComponent.__proto__ || Object.getPrototypeOf(LiveComponent)).call(this, props));

    _this.subscribe = _this.subscribe.bind(_this);
    return _this;
  }

  _createClass(LiveComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.subscribe(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // subscription
      // TODO: Complete this
      if (!nextProps.data.loading) {
        if (this.subscription) {
          if (nextProps.data.feed !== this.props.data.feed) {
            // if the feed has changed, we need to unsubscribe before resubscribing
            this.subscription.unsubscribe();
          } else {
            // we already have an active subscription with the right params

          }
        }
      }
    }
  }, {
    key: 'subscribe',
    value: function subscribe(props) {
      // console.log('fromGlobalId(props.assetId).id : ', fromGlobalId(props.assetId).id);
      console.log('subscribing', props.assetId);
      this.subscription = props.data.subscribeToMore({
        document: _subscription2.default,
        // variables: { globalId: fromGlobalId(props.assetId).id },
        variables: { options: { id: props.assetId } },

        // this is where the magic happens.
        updateQuery: function updateQuery(previousResult, _ref) {
          var subscriptionData = _ref.subscriptionData;


          var subId = subscriptionData.data.Asset.asset.id;
          if (subId !== props.assetId) {
            return previousResult;
          }
          // console.log('Asset subscription :: previousResult : ', previousResult);
          // console.log('Asset subscription :: subscriptionData : ', subscriptionData);
          var asset = subscriptionData.data.Asset;
          var result = Object.assign({}, previousResult);
          var node = Object.assign({}, previousResult.node);
          result.node = node;
          result.node.state = asset.asset.state;
          // console.log('previous Data :: ', previousResult);
          return result;
        },
        onError: function onError(err) {
          return console.error(err);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_AssetPage2.default, this.props);
    }
  }]);

  return LiveComponent;
}(_react2.default.Component);

exports.default = LiveComponent;


LiveComponent.propTypes = propTypes;
LiveComponent.defaultProps = defaultProps;