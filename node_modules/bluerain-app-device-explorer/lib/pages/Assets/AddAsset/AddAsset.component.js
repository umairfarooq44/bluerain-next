'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('bluerain-bootstrap-theme/dist/css/components/data-list.css');

var _localsdk = require('localsdk');

var _localsdk2 = _interopRequireDefault(_localsdk);

var _reactRouter = require('react-router');

var _reactStepzilla = require('react-stepzilla');

var _reactStepzilla2 = _interopRequireDefault(_reactStepzilla);

var _PrimaryAppNav = require('bluerain-ui/lib/Nav/PrimaryAppNav');

var _PrimaryAppNav2 = _interopRequireDefault(_PrimaryAppNav);

var _reactstrap = require('reactstrap');

var _urlBuilder = require('../../../routes/urlBuilder');

var _Step = require('./Step1');

var _Step2 = _interopRequireDefault(_Step);

var _Step3 = require('./Step2');

var _Step4 = _interopRequireDefault(_Step3);

var _Step5 = require('./Step3');

var _Step6 = _interopRequireDefault(_Step5);

var _Recheck = require('./Recheck');

var _Recheck2 = _interopRequireDefault(_Recheck);

var _Step7 = require('./Step4');

var _Step8 = _interopRequireDefault(_Step7);

var _Step9 = require('./Step5');

var _Step10 = _interopRequireDefault(_Step9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// const localSDK = new LocalSdk('localhost:8080')

var localSDDK = new _localsdk2.default();
// let macId = '';

var propTypes = {
  router: _react.PropTypes.object
};

var AddAssetComponent = function (_React$Component) {
  _inherits(AddAssetComponent, _React$Component);

  function AddAssetComponent(props) {
    _classCallCheck(this, AddAssetComponent);

    var _this = _possibleConstructorReturn(this, (AddAssetComponent.__proto__ || Object.getPrototypeOf(AddAssetComponent)).call(this, props));

    _this.state = {
      step: 1
    };

    _this.sampleStore = {
      data: {},
      macId: '',
      localSDK: localSDDK,
      wifiName: '',
      password: '',
      ssid: '',
      siteid: _this.props.router.params.siteId

    };

    return _this;
  }

  _createClass(AddAssetComponent, [{
    key: 'getStore',
    value: function getStore() {
      return this.sampleStore;
    }

    // following are the different functions which are used to update different values related to AC
    // and to made them available across all the steps

  }, {
    key: 'updateStoreLocalSDK',
    value: function updateStoreLocalSDK(data) {
      this.setState({ localSDK: localSDDK });
    }
  }, {
    key: 'updateStoreData',
    value: function updateStoreData(data) {
      this.sampleStore.data = data;
    }
  }, {
    key: 'updateStoreMacId',
    value: function updateStoreMacId(macId) {
      this.sampleStore.macId = macId;
    }
  }, {
    key: 'updateStoreWifiName',
    value: function updateStoreWifiName(wifiname) {
      this.sampleStore.wifiName = wifiname;
    }
  }, {
    key: 'updateStorePassword',
    value: function updateStorePassword(password) {
      this.sampleStore.password = password;
    }
  }, {
    key: 'updateStoreSsid',
    value: function updateStoreSsid(ssid) {
      this.sampleStore.ssid = ssid;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var title = 'Add Device';

      var previous = {
        title: this.props.router.location.query.siteName,
        url: (0, _urlBuilder.sitePageUrl)(this.props.router.params.siteId)
      };
      // passing different steps in the stepzilla //
      var steps = [{
        name: 'AC-AP',
        component: _react2.default.createElement(_Step2.default, {
          getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }
        })
      }, {
        name: 'WI-FI',
        component: _react2.default.createElement(_Step4.default, {
          showNavigation: false, getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }
        })
      }, {
        name: 'Connect',
        component: _react2.default.createElement(_Step6.default, {
          getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }, updateStorePassword: function updateStorePassword(u) {
            _this2.updateStorePassword(u);
          }, updateStoreSsid: function updateStoreSsid(u) {
            _this2.updateStoreSsid(u);
          }
        })
      }, {
        name: 'Connecting',
        component: _react2.default.createElement(_Recheck2.default, {
          getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }
        })
      }, {
        name: 'Status',
        component: _react2.default.createElement(_Step8.default, {
          getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }, updateStorePassword: function updateStorePassword(u) {
            _this2.updateStorePassword(u);
          },
          updateStoreSsid: function updateStoreSsid(u) {
            _this2.updateStoreSsid(u);
          }
        })
      }, {
        name: 'Add-device',
        component: _react2.default.createElement(_Step10.default, {
          getStore: function getStore() {
            return _this2.getStore();
          }, updateStoreData: function updateStoreData(u) {
            _this2.updateStoreData(u);
          }, updateStoreMacId: function updateStoreMacId(u) {
            _this2.updateStoreMacId(u);
          }, updateStoreWifiName: function updateStoreWifiName(u) {
            _this2.updateStoreWifiName(u);
          }, updateStorePassword: function updateStorePassword(u) {
            _this2.updateStorePassword(u);
          },
          updateStoreSsid: function updateStoreSsid(u) {
            _this2.updateStoreSsid(u);
          }
        })
      }];

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_PrimaryAppNav2.default, { title: title, previous: previous }),
        _react2.default.createElement(
          'section',
          null,
          _react2.default.createElement(
            _reactstrap.Container,
            null,
            _react2.default.createElement(
              _reactstrap.Row,
              null,
              _react2.default.createElement(
                _reactstrap.Col,
                { md: { size: 10, offset: 1 }, className: 'col-faded' },
                _react2.default.createElement(
                  'div',
                  { className: 'step-progress' },
                  _react2.default.createElement(_reactStepzilla2.default, {
                    steps: steps, stepsNavigation: false, prevBtnOnLastStep: false, backButtonText: 'Prev',
                    preventEnterSubmission: true
                  })
                )
              )
            )
          )
        )
      );
    }
  }]);

  return AddAssetComponent;
}(_react2.default.Component);

AddAssetComponent.propTypes = propTypes;
exports.default = (0, _reactRouter.withRouter)(AddAssetComponent);