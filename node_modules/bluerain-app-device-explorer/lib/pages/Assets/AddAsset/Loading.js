'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactProgressLabel = require('react-progress-label');

var _reactProgressLabel2 = _interopRequireDefault(_reactProgressLabel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  handleState: _react.PropTypes.func,
  statevalue: _react.PropTypes.String,
  reason: _react.PropTypes.String
};

var Loading = function (_React$Component) {
  _inherits(Loading, _React$Component);

  function Loading(props) {
    _classCallCheck(this, Loading);

    var _this = _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).call(this));

    _this.state = {
      text: 'Checking if connection is established correctly',
      progress: 1,
      text2: ''
    };
    return _this;
  }

  _createClass(Loading, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.interval = setInterval(function () {
        var progress = _this2.state.progress;

        if (progress === 100) {
          if (_this2.props.statevalue === 1) {
            _this2.props.handleState(true);
          }

          clearInterval(_this2.interval);
          _this2.setState({ text: 'Check if Your device is Connected Properly' });
          _this2.setState({ text2: 'Check if Your device is Connected Properly' });
          if (_this2.props.reason !== '') {
            _this2.setState({ text: _this2.props.reason });
          }
          return;
        }

        progress++;
        _this2.setState({ progress: progress });
      }, 200);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {

      if (this.interval) {
        clearInterval(this.interval);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var style1 = {
        padding: 10,
        margin: 10,
        backgroundColor: '#ececec',
        color: '#333',
        fontfamily: 'monospace',
        fontSize: 32,
        textAlign: 'center',
        textColor: '#23a3ba'
      };
      return _react2.default.createElement(
        'div',
        { style: style1 },
        this.state.text ? _react2.default.createElement(
          'p',
          null,
          this.state.text
        ) : _react2.default.createElement(
          'p',
          null,
          this.state.text2
        ),
        _react2.default.createElement(
          _reactProgressLabel2.default,
          {
            progress: this.state.progress,
            startDegree: 0,
            progressWidth: 50,
            trackWidth: 50,
            cornersWidth: 12,
            size: 200,
            fillColor: '#f3f3f3',
            trackColor: '#23a3ba',
            progressColor: '#bff3fc'
          },
          _react2.default.createElement(
            'text',
            null,
            this.state.progress
          )
        )
      );
    }
  }]);

  return Loading;
}(_react2.default.Component);

exports.default = Loading;


Loading.propTypes = propTypes;