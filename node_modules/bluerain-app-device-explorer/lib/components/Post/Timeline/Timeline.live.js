'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Timeline = require('./Timeline.container');

var _Timeline2 = _interopRequireDefault(_Timeline);

var _subscription = require('./subscription.graphql');

var _subscription2 = _interopRequireDefault(_subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// import PageComponent from './AssetPage.component';


var LiveComponent = function (_React$Component) {
  _inherits(LiveComponent, _React$Component);

  function LiveComponent(props) {
    _classCallCheck(this, LiveComponent);

    // console.log('Timeline Live props are: ', props);
    var _this = _possibleConstructorReturn(this, (LiveComponent.__proto__ || Object.getPrototypeOf(LiveComponent)).call(this, props));

    _this.subscribe = _this.subscribe.bind(_this);

    return _this;
  }

  _createClass(LiveComponent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.subscribe(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      // console.log("Timeline live going to rececive new props : ", nextProps);
      // // subscription
      // // TODO: Complete this
      // if (!nextProps.data.loading) {
      //   if (this.subscription) {
      //     if (nextProps.data.feed !== this.props.data.feed) {
      //       // if the feed has changed, we need to unsubscribe before resubscribing
      //       this.subscription.unsubscribe();
      //     } else {
      //       // we already have an active subscription with the right params
      //
      //     }
      //   }
      // }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // this.subscription.unsubscribe();
    }
  }, {
    key: 'subscribe',
    value: function subscribe(props) {
      // const ref = this;
      // console.log('Subscription props : ', props);
      this.subscription = props.data.subscribeToMore({
        document: _subscription2.default,
        // variables: { globalId: props.assetId },

        updateQuery: function updateQuery(previousResult, _ref) {
          var subscriptionData = _ref.subscriptionData;

          var subId = subscriptionData.data.Post.post.assets.edges[0].node.id;
          // console.log('previousResult : ', previousResult);
          // console.log('subscriptionData : ', subscriptionData);
          if (subId !== props.assetId) {
            return;
          }
          var post = subscriptionData.data.Post.post;
          var edge = {
            node: post
          };

          var node = Object.assign({}, previousResult.node, {
            posts: {
              edges: [edge].concat(_toConsumableArray(previousResult.node.posts.edges))
            }
          });
          return Object.assign({}, previousResult, { node: node });
        },
        onError: function onError(err) {
          return console.error('Subscription Errors : ', err);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Timeline2.default, this.props);
    }
  }]);

  return LiveComponent;
}(_react2.default.Component);

exports.default = LiveComponent;