'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFa = require('react-fa');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 1/16/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {};

var DeviceInfo = function (_React$Component) {
  _inherits(DeviceInfo, _React$Component);

  function DeviceInfo() {
    _classCallCheck(this, DeviceInfo);

    return _possibleConstructorReturn(this, (DeviceInfo.__proto__ || Object.getPrototypeOf(DeviceInfo)).apply(this, arguments));
  }

  _createClass(DeviceInfo, [{
    key: 'render',
    value: function render() {
      if (!this.props.data.node || !this.props.data.node.state || !this.props.data.node.meta) {
        return _react2.default.createElement('div', null);
      }

      var connected = this.props.data.node.state.connected;
      var _props$data$node$stat = this.props.data.node.state.wifi,
          ssid = _props$data$node$stat.ssid,
          encryption = _props$data$node$stat.encryption,
          ip = _props$data$node$stat.ip,
          subnet = _props$data$node$stat.subnet,
          dns0 = _props$data$node$stat.dns0,
          gateway = _props$data$node$stat.gateway;


      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'ul',
          { className: 'list-group data-list' },
          DeviceInfo.renderStatus(connected)
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          'ul',
          { className: 'list-group data-list' },
          DeviceInfo.renderSSID(ssid)
        ),
        _react2.default.createElement('br', null),
        _react2.default.createElement(
          'ul',
          { className: 'list-group data-list' },
          DeviceInfo.renderConnectionType(encryption),
          DeviceInfo.renderIPAddress(ip),
          DeviceInfo.renderSubnetMask(subnet),
          DeviceInfo.renderRouter(gateway),
          DeviceInfo.renderDNS(dns0)
        )
      );
    }
  }], [{
    key: 'renderStatus',
    value: function renderStatus(connected) {

      var status = null;

      if (connected === undefined || connected === null) {
        return _react2.default.createElement('div', null);
      } else if (connected) {
        status = _react2.default.createElement(
          'span',
          null,
          'Online ',
          _react2.default.createElement(_reactFa.Icon, { name: 'circle text-success' })
        );
      } else {
        status = _react2.default.createElement(
          'span',
          null,
          'Offline ',
          _react2.default.createElement(_reactFa.Icon, { name: 'circle text-danger' })
        );
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Connection Status'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          status
        )
      );
    }
  }, {
    key: 'renderSSID',
    value: function renderSSID(ssid) {
      if (ssid === undefined || ssid === null) {
        return _react2.default.createElement('div', null);
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'SSID'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          ssid
        )
      );
    }
  }, {
    key: 'renderConnectionType',
    value: function renderConnectionType(encryption) {
      if (encryption === undefined || encryption === null) {
        return _react2.default.createElement('div', null);
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Connection Type'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          encryption
        )
      );
    }
  }, {
    key: 'renderIPAddress',
    value: function renderIPAddress(ip) {
      if (ip === undefined || ip === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'IP Address'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          ip
        )
      );
    }
  }, {
    key: 'renderSubnetMask',
    value: function renderSubnetMask(subnet) {
      if (subnet === undefined || subnet === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Subnet Mask'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          subnet
        )
      );
    }
  }, {
    key: 'renderRouter',
    value: function renderRouter(gateway) {
      if (gateway === undefined || gateway === null) {
        return _react2.default.createElement('div', null);
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Router'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          gateway
        )
      );
    }
  }, {
    key: 'renderDNS',
    value: function renderDNS(dns0) {
      if (dns0 === undefined || dns0 === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'DNS'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          dns0
        )
      );
    }
  }]);

  return DeviceInfo;
}(_react2.default.Component);

exports.default = DeviceInfo;


DeviceInfo.propTypes = propTypes;
DeviceInfo.defaultProps = defaultProps;