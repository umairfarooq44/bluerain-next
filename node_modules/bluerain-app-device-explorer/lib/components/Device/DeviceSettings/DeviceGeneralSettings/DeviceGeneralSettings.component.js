'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

require('react-select/dist/react-select.css');

var _graphqlRelay = require('graphql-relay');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactApollo = require('react-apollo');

var _GravatarOption = require('bluerain-ui/lib/SelectDropDown/GravatarOption');

var _GravatarOption2 = _interopRequireDefault(_GravatarOption);

var _GravatarValue = require('bluerain-ui/lib/SelectDropDown/GravatarValue');

var _GravatarValue2 = _interopRequireDefault(_GravatarValue);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

var _withNotifications = require('../../../Notifications/withNotifications');

var _SitesFetchQuery = require('./SitesFetchQuery.graphql');

var _SitesFetchQuery2 = _interopRequireDefault(_SitesFetchQuery);

var _SiteUpdateMutation = require('./SiteUpdateMutation.graphql');

var _SiteUpdateMutation2 = _interopRequireDefault(_SiteUpdateMutation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 1/16/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
// import { withNotifications } from 'bluerain-client-services';


var propTypes = {
  siteFetch: _react.PropTypes.object,
  mutate: _react.PropTypes.func,
  currentSite: _react.PropTypes.object,
  addNotification: _react.PropTypes.func,
  notification: _react.PropTypes.object
};

var defaultProps = {
  modeOptions: []
};

var modeOptions = void 0;
var eventObj = [];
var iconUrl = void 0;

var DeviceInfo = function (_React$Component) {
  _inherits(DeviceInfo, _React$Component);

  function DeviceInfo(props) {
    _classCallCheck(this, DeviceInfo);

    var _this = _possibleConstructorReturn(this, (DeviceInfo.__proto__ || Object.getPrototypeOf(DeviceInfo)).call(this, props));

    _this.state = {
      site: ''
    };
    _this.handleChangeD = _this.handleChangeD.bind(_this);
    // this.onSubmit = this.onSubmit.bind(this);
    return _this;
  }

  // Form on submit
  // onSubmit(event) {
  //   const { addNotification } = this.props;
  //   const variables = {
  //     assetId: this.props.currentSite.node.id,
  //     name: this.props.currentSite.node.name,
  //     siteId: this.state.site.value ? (this.state.site && this.state.site.value) : this.props.currentSite.node.site.id
  //   };
  //   // mutation to update site
  //   this.props.mutate({
  //     variables
  //   }).catch((err) => {
  //     this.setState({ error: true });
  //   });
  //   addNotification({
  //     title: 'Success',
  //     message: 'Site updated',
  //     status: 'success',
  //     dismissible: true,
  //     dismissAfter: 3000,
  //     position: 'br'
  //   });
  //   // browserHistory.push('/app/device-explorer');
  //   event.preventDefault();
  // }

  _createClass(DeviceInfo, [{
    key: 'getSites',
    value: function getSites(name, id) {
      if (this.props.siteFetch.viewer) {
        modeOptions = this.props.siteFetch.viewer.sites.edges;
        eventObj = [];
        modeOptions.forEach(function (item) {
          if (item.node.image) {
            iconUrl = item.node.image;
          } else {
            iconUrl = item.node.type.icon;
          }
          eventObj.push({
            label: item.node.name,
            value: item.node.id,
            icon: iconUrl
          });
        });
        return _react2.default.createElement(_reactSelect2.default, {
          name: 'form-field-name',
          value: this.state.site ? this.state.site : id,
          options: eventObj,
          onChange: this.handleChangeD,
          optionComponent: _GravatarOption2.default,
          valueComponent: _GravatarValue2.default
        });
      }
      return _react2.default.createElement('div', null);
    }

    // Get value of dropdown

  }, {
    key: 'handleChangeD',
    value: function handleChangeD(site) {
      var _this2 = this;

      this.setState({
        site: site
      });

      var addNotification = this.props.notification.addNotification;

      var siteGlobalId = site.value ? site && site.value : this.props.currentSite.node.site.id;
      var variables = {
        where: {
          id: (0, _graphqlRelay.fromGlobalId)(this.props.currentSite.node.id).id
        },
        data: {
          name: this.props.currentSite.node.name,
          siteId: (0, _graphqlRelay.fromGlobalId)(siteGlobalId).id
        }
      };
      // mutation to update site
      this.props.mutate({
        variables: variables
      }).catch(function (err) {
        _this2.setState({ error: true });
      });
      addNotification({
        title: 'Success',
        message: 'Site updated',
        status: 'success',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br',
        level: 'error'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      try {
        if (!this.props.currentSite.node || !this.props.currentSite.node.state) {
          return _react2.default.createElement('div', null);
        }

        var _props$currentSite$no = this.props.currentSite.node.site,
            id = _props$currentSite$no.id,
            name = _props$currentSite$no.name;


        return _react2.default.createElement(
          _ListViewItem2.default,
          null,
          this.getSites(name, id),
          _react2.default.createElement(
            'small',
            { id: 'imageSize', className: 'form-text text-muted' },
            'Select a site to update your asset.'
          )
        );
      } catch (error) {
        console.log(error);
      }
    }
  }]);

  return DeviceInfo;
}(_react2.default.Component);

// export default graphql(SitesFetchQuery)(
//   withNotifications(DeviceInfo)
//     );

// <ListViewItem>
// <button type="submit" id="submitBtn" className="btn btn-primary">Updatess</button>
// </ListViewItem>

exports.default = (0, _reactApollo.graphql)(_SitesFetchQuery2.default, { name: 'siteFetch' })((0, _reactApollo.graphql)(_SiteUpdateMutation2.default)((0, _withNotifications.withNotifications)(DeviceInfo)));


DeviceInfo.propTypes = propTypes;
DeviceInfo.defaultProps = defaultProps;