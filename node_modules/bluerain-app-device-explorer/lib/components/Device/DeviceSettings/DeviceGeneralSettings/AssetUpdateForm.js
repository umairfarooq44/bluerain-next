'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactApollo = require('react-apollo');

var _graphqlRelay = require('graphql-relay');

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

var _withNotifications = require('../../../Notifications/withNotifications');

var _AssetUpdateMutation = require('./AssetUpdateMutation.graphql');

var _AssetUpdateMutation2 = _interopRequireDefault(_AssetUpdateMutation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 1/17/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// import { withNotifications } from 'bluerain-client-services';


var propTypes = {
  name: _react.PropTypes.string.isRequired,
  data: _react.PropTypes.object,
  onNameChange: _react.PropTypes.func,
  onSubmit: _react.PropTypes.func,
  notification: _react.PropTypes.object,
  mutate: _react.PropTypes.func
};

var defaultProps = {
  name: '',
  onSubmit: function onSubmit() {}
};

var limitLength = void 0;
var extract = void 0;
var extraValidations = void 0;

var AssetUpdateForm = function (_React$Component) {
  _inherits(AssetUpdateForm, _React$Component);

  function AssetUpdateForm(props) {
    _classCallCheck(this, AssetUpdateForm);

    // ********** VALIDATIONS *****************
    var _this = _possibleConstructorReturn(this, (AssetUpdateForm.__proto__ || Object.getPrototypeOf(AssetUpdateForm)).call(this, props));

    limitLength = function limitLength(str, length) {
      return str.substring(0, length);
    };
    extract = function extract(str, pattern) {
      return (str.match(pattern) || []).pop() || '';
    };
    extraValidations = function extraValidations(str) {
      return extract(str, '[0-9a-zA-Z: ]+');
    };
    // ********** VALIDATIONS *****************

    _this.state = {
      value: '',
      onNameChangeCallback: props.onNameChange,
      onSubmitCallback: props.onSubmit
    };

    _this.handleChange = _this.handleChange.bind(_this);
    _this.onNameChange = _this.onNameChange.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    return _this;
  }

  _createClass(AssetUpdateForm, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var state = props.data.node.name;

      this.setState({
        value: state
      });
    }
  }, {
    key: 'onNameChange',
    value: function onNameChange(event) {
      var state = this.state;
      var name = event.target.value;

      state.data.name = name;

      this.state.onNameChangeCallback(name);
      this.setState(state);
    }

    // Form on submit

  }, {
    key: 'onSubmit',
    value: function onSubmit(event) {
      var currentName = this.props.data.node.name;
      var newName = this.state.value;
      var addNotification = this.props.notification.addNotification;

      if (!newName) {
        addNotification({
          title: 'Missing',
          message: 'Please provide Asset name',
          status: 'error',
          dismissible: true,
          dismissAfter: 3000,
          position: 'br',
          level: 'error'
        });
        event.preventDefault();
        return false;
      }
      if (newName === currentName) {
        addNotification({
          title: 'Warning',
          message: 'Please provide a new asset name',
          status: 'error',
          dismissible: true,
          dismissAfter: 3000,
          position: 'br',
          level: 'error'
        });
        event.preventDefault();
        return false;
      }
      var variables = {
        where: {
          id: (0, _graphqlRelay.fromGlobalId)(this.props.data.node.id).id
        },
        data: {
          name: newName
        }
      };
      // mutation to update asset
      this.props.mutate({
        variables: variables
      });
      addNotification({
        title: 'Success',
        message: 'Asset name updated',
        status: 'success',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br',
        level: 'error'
      });
      // browserHistory.push('/app/device-explorer');
      event.preventDefault();
    }

    // Get value of asset name

  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      this.setState({
        value: limitLength(extraValidations(event.target.value), 25)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.data.node || !this.props.data.node.name) {
        return _react2.default.createElement('div', null);
      }
      var id = this.props.data.node.id;

      return _react2.default.createElement(
        'form',
        { onSubmit: this.onSubmit },
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'name' },
            'Asset Name'
          ),
          _react2.default.createElement('input', {
            type: 'text', value: this.state.value ? this.state.value : this.props.data.node.name,
            onChange: this.handleChange, className: 'form-control',
            'aria-describedby': 'name', placeholder: 'Asset Name'
          }),
          _react2.default.createElement('input', {
            type: 'hidden', value: id, className: 'form-control',
            'aria-describedby': 'name', placeholder: 'Asset Name'
          }),
          _react2.default.createElement(
            'small',
            { id: 'imageSize', className: 'form-text text-muted' },
            'Select a new name for your asset.'
          )
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'button',
            { type: 'submit', className: 'btn btn-primary' },
            'Update'
          )
        )
      );
    }
  }]);

  return AssetUpdateForm;
}(_react2.default.Component);

// export default AssetUpdateForm;

exports.default = (0, _reactApollo.graphql)(_AssetUpdateMutation2.default)((0, _withNotifications.withNotifications)(AssetUpdateForm));


AssetUpdateForm.propTypes = propTypes;
AssetUpdateForm.defaultProps = defaultProps;