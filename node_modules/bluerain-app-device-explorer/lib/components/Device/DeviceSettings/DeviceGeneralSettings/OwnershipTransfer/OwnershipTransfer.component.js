'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _OwnershipTransferForm = require('./OwnershipTransferForm');

var _OwnershipTransferForm2 = _interopRequireDefault(_OwnershipTransferForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 1/17/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {};

var OwnershipTransfer = function (_React$Component) {
  _inherits(OwnershipTransfer, _React$Component);

  _createClass(OwnershipTransfer, null, [{
    key: 'renderDeleteDevice',
    value: function renderDeleteDevice() {
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item list-group-item-danger' },
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          'Delete Device'
        )
      );
    }
  }, {
    key: 'renderOwnershipTransfer',
    value: function renderOwnershipTransfer() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'li',
          { className: 'list-group-item list-group-item-danger' },
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            'Transfer Ownership'
          )
        )
      );
    }
  }]);

  function OwnershipTransfer(props) {
    _classCallCheck(this, OwnershipTransfer);

    var _this = _possibleConstructorReturn(this, (OwnershipTransfer.__proto__ || Object.getPrototypeOf(OwnershipTransfer)).call(this, props));

    _this.toggle = _this.toggle.bind(_this);
    _this.state = { collapse: false };
    return _this;
  }

  _createClass(OwnershipTransfer, [{
    key: 'toggle',
    value: function toggle() {
      this.setState({ collapse: !this.state.collapse });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _reactstrap.Collapse,
          { isOpen: this.state.collapse },
          _react2.default.createElement(_OwnershipTransferForm2.default, { assetId: this.props.data.variables.assetId })
        ),
        _react2.default.createElement(
          'ul',
          { className: 'list-group data-list' },
          OwnershipTransfer.renderDeleteDevice()
        )
      );
    }
  }]);

  return OwnershipTransfer;
}(_react2.default.Component);

exports.default = OwnershipTransfer;


OwnershipTransfer.propTypes = propTypes;
OwnershipTransfer.defaultProps = defaultProps;