'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 2/21/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var propTypes = {
  onSubmit: _react.PropTypes.func,
  data: _react.PropTypes.object,
  addNotification: _react.PropTypes.func,
  emailId: _react.PropTypes.string,
  assetId: _react.PropTypes.string,
  router: _react.PropTypes.object
};

var defaultProps = {};

var emailFormatChecker = void 0;
var assetId = void 0;
var emailVerified = void 0;

var OwnershipTransferForm2 = function (_React$Component) {
  _inherits(OwnershipTransferForm2, _React$Component);

  function OwnershipTransferForm2(props) {
    _classCallCheck(this, OwnershipTransferForm2);

    var _this = _possibleConstructorReturn(this, (OwnershipTransferForm2.__proto__ || Object.getPrototypeOf(OwnershipTransferForm2)).call(this, props));

    _this.state = {
      value: '',
      onSubmitCallback: props.onSubmit
    };

    _this.handleChange = _this.handleChange.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    return _this;
  }

  // Form on submit


  _createClass(OwnershipTransferForm2, [{
    key: 'onSubmit',
    value: function onSubmit(event) {
      try {
        event.preventDefault();
        var currentUser = this.props.data.viewer.id;
        var users = this.props.data.viewer.users.edges;
        if (users.length === 0) {
          emailVerified = null;
        } else {
          emailVerified = users[0].node.email;
        }
        var addNotification = this.props.addNotification;

        if (this.props.emailId) {
          emailFormatChecker = /\S+@\S+\.\S+/;
          var result = emailFormatChecker.test(this.props.emailId);
          if (result === false) {
            addNotification({
              title: 'Oops',
              message: 'Email format is not valid',
              status: 'error',
              dismissible: true,
              dismissAfter: 3000,
              position: 'br'
            });
            event.preventDefault();
            return false;
          }
        }
        if (!this.props.emailId) {
          addNotification({
            title: 'Missing',
            message: 'Please provide email address',
            status: 'error',
            dismissible: true,
            dismissAfter: 3000,
            position: 'br'
          });
          event.preventDefault();
          return false;
        }
        if (emailVerified === null) {
          addNotification({
            title: 'Ouch',
            message: 'The user with this email is either not registered or email is not verified in our system',
            status: 'error',
            dismissible: true,
            dismissAfter: 6000,
            position: 'br'
          });
          event.preventDefault();
          return false;
        }
        addNotification({
          title: 'Success',
          message: 'User Found with this email',
          status: 'success',
          dismissible: true,
          dismissAfter: 3000,
          position: 'br'
        });

        this.props.router.push('/app/device-explorer/assets/' + assetId + '/ownership-transfer/' + users[0].node.id + '?current_user=' + currentUser);
      } catch (error) {
        console.info('Something went wrong');
      }
    }

    // Get value of asset name

  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      // emailId = event.target.value;
      this.setState({
        value: event.target.value
      });
    }
  }, {
    key: 'render',
    value: function render() {
      assetId = this.props.assetId;
      return _react2.default.createElement(
        'form',
        { onSubmit: this.onSubmit, noValidate: true },
        _react2.default.createElement(
          _ListViewItem2.default,
          { style: { display: 'none' } },
          _react2.default.createElement('input', {
            type: 'email', value: this.props.emailId, onChange: this.handleChange, className: 'form-control',
            'aria-describedby': 'email', placeholder: 'Email Address'
          }),
          _react2.default.createElement(
            'small',
            { className: 'form-text text-muted' },
            'Enter email address of the user you want to transfer ownership.'
          )
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'button',
            { type: 'submit', className: 'btn btn-primary' },
            'Transfer'
          )
        )
      );
    }
  }]);

  return OwnershipTransferForm2;
}(_react2.default.Component);

exports.default = OwnershipTransferForm2;

/* export default
 (
 graphql(EmailCheckQuery, {
 options: (args) => {
 const emailID = args.emailId;
 const queryString = `{\"condition\":\"equalTo\",\"key\":\"email\",\"value\":\"${emailID}\"}`;

 return { variables: { queryString } };
 }
 })(
 withNotifications(withRouter(OwnershipTransferForm2))
 )
 );*/

OwnershipTransferForm2.propTypes = propTypes;
OwnershipTransferForm2.defaultProps = defaultProps;