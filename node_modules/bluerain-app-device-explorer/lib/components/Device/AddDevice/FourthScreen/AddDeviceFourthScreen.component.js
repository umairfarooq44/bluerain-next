'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ComponentState = require('bluerain-ui/lib/ComponentState/ComponentState.component');

var _ComponentState2 = _interopRequireDefault(_ComponentState);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  onClick: _react.PropTypes.func
};

var AddDeviceFirstScreen = function (_React$Component) {
  _inherits(AddDeviceFirstScreen, _React$Component);

  function AddDeviceFirstScreen(props) {
    _classCallCheck(this, AddDeviceFirstScreen);

    var _this = _possibleConstructorReturn(this, (AddDeviceFirstScreen.__proto__ || Object.getPrototypeOf(AddDeviceFirstScreen)).call(this, props));

    _this.onSubmit = _this.onSubmit.bind(_this);
    return _this;
  }

  // Form on submit


  _createClass(AddDeviceFirstScreen, [{
    key: 'onSubmit',
    value: function onSubmit(event) {
      event.preventDefault();
      if (this.submitHandler) {
        this.submitHandler(event, this.props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      this.submitHandler = this.props.onClick;
      var Prompt = {

        fontSize: 14,
        textAlign: 'left',
        color: 'red'

      };
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_ComponentState2.default, {
          imageSize: 'lg',
          card: true,
          title: 'AC is now connected to internet.',
          description: ''
        }),
        _react2.default.createElement(
          'form',
          { onSubmit: this.onSubmit },
          _react2.default.createElement(
            _ListViewItem2.default,
            { className: 'text-xs-left' },
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'p',
                { style: Prompt },
                '*Please connect your System/mobile to Internet before moving To Next Step'
              )
            )
          )
        )
      );
    }
  }]);

  return AddDeviceFirstScreen;
}(_react2.default.Component);

AddDeviceFirstScreen.propTypes = propTypes;

exports.default = AddDeviceFirstScreen;