'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

var _reactRouter = require('react-router');

var _reactApollo = require('react-apollo');

var _ComponentState = require('bluerain-ui/lib/ComponentState/ComponentState.component');

require('bluerain-bootstrap-theme/dist/css/components/component-state.css');

var _graphqlRelay = require('graphql-relay');

var _query = require('./query.graphql');

var _query2 = _interopRequireDefault(_query);

var _mutation = require('./mutation.graphql');

var _mutation2 = _interopRequireDefault(_mutation);

var _assetSave = require('./assetSave.graphql');

var _assetSave2 = _interopRequireDefault(_assetSave);

var _deviceUpdate = require('./deviceUpdate.graphql');

var _deviceUpdate2 = _interopRequireDefault(_deviceUpdate);

var _eventSaveMutation = require('./eventSaveMutation.graphql');

var _eventSaveMutation2 = _interopRequireDefault(_eventSaveMutation);

var _urlBuilder = require('../../../../routes/urlBuilder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  siteId: _react.PropTypes.string,
  asset: _react.PropTypes.object,
  assetUpdate: _react.PropTypes.func,
  assetSave: _react.PropTypes.func,
  eventSave: _react.PropTypes.func
};

var OwnershipClaim = function (_React$Component) {
  _inherits(OwnershipClaim, _React$Component);

  function OwnershipClaim(props) {
    _classCallCheck(this, OwnershipClaim);

    var _this = _possibleConstructorReturn(this, (OwnershipClaim.__proto__ || Object.getPrototypeOf(OwnershipClaim)).call(this, props));

    _this.state = {
      device: ''
    };

    _this.assetId = '';
    _this.userId = '';
    _this.device = {};
    _this.siteId = '';
    _this.onSubmit = _this.onSubmit.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  _createClass(OwnershipClaim, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this2 = this;

      if (!this.notFound && !this.error) {
        // collect required data for any scenario.
        this.device = this.getDevice(); // if (!Devie) disply not found.
        this.assetId = this.getAsset().id; // if (!Asset && Device) Create one and assign to device.
        this.userId = this.getUser().id; // if (!User) show error
        this.siteId = this.getSite().id; // if (!Site) show error

        var ref = this;
        // Check for existance of device Id and asset Id and check if asset is already added.
        // if (DeviceId && AssetId) (Update Value inside submit handler)
        // if (DeviceId && !AssetID) (Create Asset, change flag, get asset ID and update Device.
        if (this.device && this.device.id && !this.assetId && !this.assetAdded && !this.props.asset.loading) {
          this.assetAdded = true;
          // Saving Asset;
          this.props.assetSave({

            variables: {
              data: {
                ownerId: (0, _graphqlRelay.fromGlobalId)(this.userId).id,
                siteId: (0, _graphqlRelay.fromGlobalId)(this.siteId).id,
                assetTypeId: '58ee350255e4de7719499f70',
                name: 'Unnamed',
                state: { connected: false }
              }
            }

          }).then(function (data) {
            ref.assetId = data.data.Asset.AssetCreate.obj.id;
            // console.log('Asset Added', ref.assetId);
            // console.log(ref.device);
            // console.log(ref.props.deviceSave);

            ref.props.deviceSave({
              variables: {
                where: { id: (0, _graphqlRelay.fromGlobalId)(ref.getDevice().id).id },
                data: {
                  name: ref.getDevice().name,
                  assetId: (0, _graphqlRelay.fromGlobalId)(ref.getAsset().id).id
                }
              }
            }).then(function (data) {
              var device = data.data.Device.DeviceUpsertWithWhere.obj;
              var eventObj = {
                type: 'state',
                data: { activated: true },
                assetId: device.assetId,
                deviceId: (0, _graphqlRelay.fromGlobalId)(device.id).id
              };
              eventObj.sourceAccountId = (0, _graphqlRelay.fromGlobalId)(_this2.getUser().id).id;
              _this2.props.eventSave({
                variables: { data: eventObj }
              }).then(function (data) {
                // console.log('data in after event save', data);
              }).catch(function (err) {
                // console.log('errr in event save', err);
              });
              // console.log('Device linked', data);
            }).catch(function (err) {
              // console.log('Error Linking device to asset', err);
              _this2.error = true;
              ref.setState({ error: true });
            });
          }).catch(function (err) {
            ref.assetAdded = false;
            // console.log('cant add asset', err);
            _this2.error = true;
            _this2.setState({ error: true });
          });
        }
      }
    }

    // Form on submit

  }, {
    key: 'onSubmit',
    value: function onSubmit(event) {
      var _this3 = this;

      event.preventDefault();
      this.setState({ loading: true });
      var url = (0, _urlBuilder.sitePageUrl)(this.getSite().id);

      this.props.assetUpdate({
        variables: {
          where: {
            id: (0, _graphqlRelay.fromGlobalId)(this.getAsset().id).id
          },
          data: {
            ownerId: (0, _graphqlRelay.fromGlobalId)(this.getUser().id).id,
            siteId: (0, _graphqlRelay.fromGlobalId)(this.siteId).id,
            name: this.state.device
          }
        }
      }).then(function (data) {
        _reactRouter.browserHistory.push(url);
      }).catch(function (err) {
        console.log('Error Occured while submitting asset change', err);
        _this3.setState({ error: true });
      });
    }

    // try to fetch siteId

  }, {
    key: 'getSite',
    value: function getSite() {
      if (this.siteId) return { id: this.siteId };
      try {
        return { id: this.props.siteId };
      } catch (e) {
        // console.log('No Site Found', e);
        this.error = true;
        this.setState({ error: true });
      }
    }

    // Try to get device.

  }, {
    key: 'getDevice',
    value: function getDevice() {
      // if DeviceId is available in device object, send it.
      if (this.device && this.device.id) return this.device;

      // Else get it from .
      try {
        var deviceList = this.props.asset.Device.DeviceFindOne;

        if (deviceList) {
          return this.props.asset.Device.DeviceFindOne;
        }
        // console.log('device not found');
        this.notFound = true;
        this.setState({ notFound: true });
        return {};
      } catch (err) {
        console.log(err);
        this.error = true;
        this.setState({ error: true });
      }
    }

    // Fetch user ID from Device fetched using viewer query.
    // User is a part of Viewer in a viewer query.

  }, {
    key: 'getUser',
    value: function getUser() {
      // if userId already there, send it, else try to get it from Viewer.
      if (this.userId) return { id: this.userId };

      try {
        return this.props.asset.viewer.me;
      } catch (err) {
        // console.log('User not found', err);
        this.error = true;
        this.setState({ error: true });
      }
    }

    // return asset, if no asset, return empty object.
    // Asset can only be returned if its assigned to any device.

  }, {
    key: 'getAsset',
    value: function getAsset() {
      if (this.assetId) return { id: this.assetId };
      return this.getDevice().asset || {};
    }

    // Render proceed button after checking for change.

  }, {
    key: 'getProceedButton',
    value: function getProceedButton() {

      // if asset state is changed, check for empty.
      if (this.changed) {
        // if Asset Name is empty after any change, disabled button
        if (!this.deviceEmpty) {
          return _react2.default.createElement(
            'button',
            { disabled: true, type: 'submit', className: 'btn btn-primary' },
            'Add'
          );
        }
        // if Asset name isn't empty, enable button
        return _react2.default.createElement(
          'button',
          { type: 'submit', className: 'btn btn-primary' },
          'Add'
        );
      } else if (this.deviceEmpty) {
        // if device is empty without any change in state, disable button
        return _react2.default.createElement(
          'button',
          { disabled: true, type: 'submit', className: 'btn btn-primary' },
          'Add'
        );
      }

      // by default, disabled
      return _react2.default.createElement(
        'button',
        { disabled: true, type: 'submit', className: 'btn btn-primary' },
        'Add'
      );
    }

    // Input field change handler.

  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      this.setState({
        device: event.target.value
      });

      // handles if the button should be enabled or disabled.
      this.changed = true;
      this.deviceEmpty = event.target.value.length;
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.error || this.error) {
        // Show error message
        return _react2.default.createElement(_ComponentState.ComponentState, {
          image: 'swearing-male.svg',
          imageSize: 'sm',
          card: true,
          title: 'Err..',
          description: 'Looks like something broke.'
        });
      } else if (this.state.loading) {
        // Loading State
        return _react2.default.createElement(
          'div',
          { className: 'component-state' },
          _react2.default.createElement(
            'h4',
            { className: 'card-title' },
            'Loading'
          ),
          _react2.default.createElement(
            'p',
            { className: 'card-text text-muted' },
            'Please wait, we are on it!'
          )
        );
      } else if (this.state.notFound || this.notFound) {
        // Component not found statea
        return _react2.default.createElement(
          'div',
          { className: 'component-state' },
          _react2.default.createElement(
            'h4',
            { className: 'card-title' },
            'Device not found'
          ),
          _react2.default.createElement(
            'p',
            { className: 'card-text text-muted' },
            'Please contact our helpline!'
          )
        );
      }
      // Renders small form with a submit button and input box to enter device name;
      return _react2.default.createElement(
        'form',
        { onSubmit: this.onSubmit },
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'dname' },
            'Device Name'
          ),
          _react2.default.createElement('input', {
            id: 'dname', type: 'text', value: this.state.device, onChange: this.handleChange, className: 'form-control',
            'aria-describedby': 'name', placeholder: 'Device Name'
          })
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          { className: 'text-xs-right' },
          this.getProceedButton()
        )
      );
    }
  }]);

  return OwnershipClaim;
}(_react2.default.Component);

OwnershipClaim.propTypes = propTypes;

exports.default = (0, _reactApollo.graphql)(_query2.default, {
  name: 'asset',
  options: function options(args) {
    var query = { where: { 'meta.macId': args.macId } };
    return { variables: { query: query } };
  }
})((0, _reactApollo.graphql)(_mutation2.default, { name: 'assetUpdate' })((0, _reactApollo.graphql)(_assetSave2.default, { name: 'assetSave' })((0, _reactApollo.graphql)(_deviceUpdate2.default, { name: 'deviceSave' })((0, _reactApollo.graphql)(_eventSaveMutation2.default, { name: 'eventSave' })(OwnershipClaim)))));