'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  ssId: _react.PropTypes.string,
  onSubmit: _react.PropTypes.func
};

var AddDeviceThirdScreen = function (_React$Component) {
  _inherits(AddDeviceThirdScreen, _React$Component);

  function AddDeviceThirdScreen(props) {
    _classCallCheck(this, AddDeviceThirdScreen);

    var _this = _possibleConstructorReturn(this, (AddDeviceThirdScreen.__proto__ || Object.getPrototypeOf(AddDeviceThirdScreen)).call(this, props));

    _this.state = {
      password: ''
    };

    _this.handleChangeD = _this.handleChangeD.bind(_this);
    _this.submitEventHandler = _this.submitEventHandler.bind(_this);
    return _this;
  }

  // Get value of password


  _createClass(AddDeviceThirdScreen, [{
    key: 'handleChangeD',
    value: function handleChangeD(event) {
      this.setState({
        password: event.target.value
      });
    }

    // Form on submit

  }, {
    key: 'submitEventHandler',
    value: function submitEventHandler(event) {
      event.preventDefault();
      if (this.onSubmit) {
        this.onSubmit(event, {
          ssid: this.props.ssId,
          password: this.state.password
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {

      var Prompt = {

        fontSize: 14,
        textAlign: 'left',
        color: 'red'

      };
      this.onSubmit = this.props.onSubmit;
      return _react2.default.createElement(
        'form',
        { onSubmit: this.submitEventHandler },
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'ssid' },
            'SSID'
          ),
          _react2.default.createElement('input', {
            id: 'ssid', disabled: true, type: 'text', value: this.props.ssId, className: 'form-control', 'aria-describedby': 'id',
            placeholder: 'SSID'
          })
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'password' },
            'Password'
          ),
          _react2.default.createElement('input', {
            id: 'password', type: 'password', value: this.state.password, onChange: this.handleChangeD,
            className: 'form-control', 'aria-describedby': 'name', placeholder: 'Password'
          })
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          { className: 'text-xs-right' },
          _react2.default.createElement(
            'p',
            { style: Prompt },
            '*Please enter your WIFI password and press submit'
          ),
          _react2.default.createElement(
            'button',
            { type: 'submit', className: 'btn btn-primary' },
            'Submit'
          )
        )
      );
    }
  }]);

  return AddDeviceThirdScreen;
}(_react2.default.Component);

AddDeviceThirdScreen.propTypes = propTypes;

exports.default = AddDeviceThirdScreen;