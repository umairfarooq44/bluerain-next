'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactApollo = require('react-apollo');

var _reactRouter = require('react-router');

var _graphqlRelay = require('graphql-relay');

var _reactstrap = require('reactstrap');

var _withNotifications = require('../../Notifications/withNotifications');

var _mutation = require('./mutation.graphql');

var _mutation2 = _interopRequireDefault(_mutation);

var _query = require('./query.graphql');

var _query2 = _interopRequireDefault(_query);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 6/29/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var propTypes = {
  data: _react.PropTypes.object,
  mutate: _react.PropTypes.func,
  onError: _react.PropTypes.func,
  notification: _react.PropTypes.object,
  onClick: _react.PropTypes.func
};

var defaultProps = {
  onClick: function onClick() {}
};

var SiteDelete = function (_React$Component) {
  _inherits(SiteDelete, _React$Component);

  function SiteDelete(props) {
    _classCallCheck(this, SiteDelete);

    var _this = _possibleConstructorReturn(this, (SiteDelete.__proto__ || Object.getPrototypeOf(SiteDelete)).call(this, props));

    _this.state = {
      modal: false
    };
    _this.toggle = _this.toggle.bind(_this);
    _this.handleClickAction = _this.handleClickAction.bind(_this);
    return _this;
  }

  _createClass(SiteDelete, [{
    key: 'toggle',
    value: function toggle(event) {
      var assetsCount = this.props.data.node.assets.edges.length;
      var addNotification = this.props.notification.addNotification;

      if (assetsCount > 0) {
        addNotification({
          title: 'Alert',
          message: 'This site contains assets, you cannot delete this site unless you move your assets to some other site',
          status: 'error',
          dismissible: true,
          dismissAfter: 10000,
          position: 'br',
          level: 'error'
        });
        event.preventDefault();
        return false;
      }
      this.setState({
        modal: !this.state.modal
      });
    }
  }, {
    key: 'handleClickAction',
    value: function handleClickAction(event) {
      var addNotification = this.props.notification.addNotification;

      var variables = {
        where: {
          id: (0, _graphqlRelay.fromGlobalId)(this.props.data.node.id).id
        },
        data: {
          isDeleted: true
        }
      };
      // mutation to update asset
      this.props.mutate({
        variables: variables
      });
      addNotification({
        title: 'Success',
        message: 'Site deleted successfully',
        status: 'success',
        dismissible: true,
        dismissAfter: 3000,
        position: 'br',
        level: 'success'
      });
      _reactRouter.browserHistory.push('/app/device-explorer');
      event.preventDefault();
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'ul',
          { className: 'list-group data-list' },
          _react2.default.createElement(
            'li',
            { className: 'list-group-item list-group-item-danger' },
            _react2.default.createElement(
              'div',
              { onClick: this.toggle, style: { "cursor": "pointer" }, className: 'data-value' },
              'Delete Site'
            )
          )
        ),
        _react2.default.createElement(
          _reactstrap.Modal,
          { isOpen: this.state.modal, toggle: this.toggle },
          _react2.default.createElement(
            _reactstrap.ModalHeader,
            { toggle: this.toggle },
            'Confirm!'
          ),
          _react2.default.createElement(
            _reactstrap.ModalBody,
            null,
            'Are you sure you want to delete this site?'
          ),
          _react2.default.createElement(
            _reactstrap.ModalFooter,
            null,
            _react2.default.createElement(
              _reactstrap.Button,
              { color: 'primary', onClick: this.handleClickAction },
              'Delete Site'
            ),
            ' ',
            _react2.default.createElement(
              _reactstrap.Button,
              { color: 'secondary', onClick: this.toggle },
              'Cancel'
            )
          )
        )
      );
    }
  }]);

  return SiteDelete;
}(_react2.default.Component);

// export default SiteEditForm;

exports.default = (0, _reactApollo.graphql)(_mutation2.default, {
  options: {
    refetchQueries: ['SitesFetchQuery']
  }
})((0, _reactApollo.graphql)(_query2.default, {
  options: function options(_ref) {
    var siteId = _ref.siteId;
    return { variables: { siteId: siteId } };
  }
})((0, _withNotifications.withNotifications)(SiteDelete)));

SiteDelete.propTypes = propTypes;
SiteDelete.defaultProps = defaultProps;