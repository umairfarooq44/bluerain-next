'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactApollo = require('react-apollo');

var _reactGmaps = require('react-gmaps');

var _reactGeolocated = require('react-geolocated');

var _reactFa = require('react-fa');

var _Media = require('reactstrap/lib/Media');

var _Media2 = _interopRequireDefault(_Media);

var _reactRouter = require('react-router');

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

require('react-select/dist/react-select.css');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _ipLocator = require('ip-locator');

var _ipLocator2 = _interopRequireDefault(_ipLocator);

var _ListViewItem = require('bluerain-ui/lib/ListView/ListViewItem');

var _ListViewItem2 = _interopRequireDefault(_ListViewItem);

var _GravatarOption = require('bluerain-ui/lib/SelectDropDown/GravatarOption');

var _GravatarOption2 = _interopRequireDefault(_GravatarOption);

var _GravatarValue = require('bluerain-ui/lib/SelectDropDown/GravatarValue');

var _GravatarValue2 = _interopRequireDefault(_GravatarValue);

var _graphqlRelay = require('graphql-relay');

var _mutation = require('./mutation.graphql');

var _mutation2 = _interopRequireDefault(_mutation);

var _query = require('./query.graphql');

var _query2 = _interopRequireDefault(_query);

var _config = require('../../../../config.global');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 1/3/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var propTypes = {
  name: _react.PropTypes.string.isRequired,
  image: _react.PropTypes.string,
  onNameChange: _react.PropTypes.func,
  onImageChange: _react.PropTypes.func,
  onSubmit: _react.PropTypes.func,
  data: _react.PropTypes.object,
  mutate: _react.PropTypes.func,
  onError: _react.PropTypes.func,
  isGeolocationEnabled: _react.PropTypes.bool,
  coords: _react.PropTypes.object
};

var defaultProps = {
  name: '',
  image: 'https://s3-us-west-2.amazonaws.com/bluerainimages/icon-default-sites.svg',
  onNameChange: function onNameChange() {},
  onImageChange: function onImageChange() {},
  onSubmit: function onSubmit() {},

  // Modes
  modeOptions: []
};

var latitude = void 0;
var longitude = void 0;

var limitLength = void 0;
var extract = void 0;
var extraValidations = void 0;
var modeOptions = void 0;
var button = void 0;
var eventObj = [];
var IP = void 0;

var SiteForm = function (_React$Component) {
  _inherits(SiteForm, _React$Component);

  function SiteForm(props) {
    _classCallCheck(this, SiteForm);

    // ********** VALIDATIONS *****************
    var _this = _possibleConstructorReturn(this, (SiteForm.__proto__ || Object.getPrototypeOf(SiteForm)).call(this, props));

    limitLength = function limitLength(str, length) {
      return str.substring(0, length);
    };
    extract = function extract(str, pattern) {
      return (str.match(pattern) || []).pop() || '';
    };
    extraValidations = function extraValidations(str) {
      return extract(str, "[0-9a-zA-Z:'!$%^&*_ ]+");
    };
    // ********** VALIDATIONS *****************
    _this.state = {
      value: '',
      siteType: '',
      lat: _config.lat,
      lon: _config.lon,
      data: {
        name: props.name,
        image: props.image
      },
      initialState: {
        name: props.name,
        image: props.image
      },
      onNameChangeCallback: props.onNameChange,
      onImageChangeCallback: props.onImageChange,
      onSubmitCallback: props.onSubmit
    };

    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleChangeD = _this.handleChangeD.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    _this.onSubmitLocation = _this.onSubmitLocation.bind(_this);

    _this.onDragEnd = _this.onDragEnd.bind(_this);

    _this.onNameChange = _this.onNameChange.bind(_this);
    _this.onImageChange = _this.onImageChange.bind(_this);
    return _this;
  }

  _createClass(SiteForm, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _axios2.default.get('https://api.ipify.org') // get ISP IP address
      .then(function (res) {
        IP = res.data;
        _ipLocator2.default.getDomainOrIPDetails(IP, 'json', function (err, data) {
          // get location from IP
          _this2.setState({
            lat: data.lat,
            lon: data.lon
          });
        });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!this.state.siteType && !nextProps.data.loading) {
        var sites = nextProps.data.SiteType.SiteTypeFind.edges;
        this.setState({
          siteType: {
            value: sites[0].node.id,
            label: sites[0].node.name,
            icon: sites[0].node.icon
          }
        });
      }
    }
  }, {
    key: 'onNameChange',
    value: function onNameChange(event) {
      var state = this.state;
      var name = event.target.value;

      state.data.name = name;

      this.state.onNameChangeCallback(name);
      this.setState(state);
    }

    // Image preview

  }, {
    key: 'onImageChange',
    value: function onImageChange(event) {
      var imageFile = event.target.files[0];
      var imageSize = imageFile.size / 1024;
      if (imageSize > 1000) {
        alert('Image not uploaded, size limit exceeded');
      } else {
        var state = this.state;
        state.data.imageFile = imageFile;

        // Render process
        var my = this;

        // generate a new FileReader object
        var reader = new FileReader();

        // inject an image with the src url
        reader.onload = function (event) {

          var image = event.target.result;
          state.data.image = image;

          my.setState(state);
        };

        // when the file is read it triggers the onload event above.
        reader.readAsDataURL(imageFile);
      }
    }

    // Get value of map

  }, {
    key: 'onDragEnd',
    value: function onDragEnd(e) {
      var latLng = e.latLng;

      latitude = latLng.lat();
      longitude = latLng.lng();
    }

    // Form on submit

  }, {
    key: 'onSubmitLocation',
    value: function onSubmitLocation(event) {
      alert('Please enable your location');
      event.preventDefault();
    }

    // Form on submit

  }, {
    key: 'onSubmit',
    value: function onSubmit(event) {
      if (!this.state.value) {
        alert('Please provide Site Name');
        event.preventDefault();
        return false;
      }
      var variables = {
        name: this.state.value,
        description: this.state.description,
        image: this.state.data.image,
        siteTypeId: this.state.siteType.value // ? this.state.siteType.value : modeOptions[0].node.id
        // owner: 'VXNlcjpsVHlIUW10RmRj'
      };
      variables.siteTypeId = variables.siteTypeId;
      // if no image is uploaded or image size limit is exceeded
      if (this.state.data.image === undefined || this.state.data.image === null || !this.state.data.imageFile || this.state.data.imageFile === null) {
        variables.image = this.state.siteType ? this.state.siteType.icon : '';
      }
      // if location is enabled
      if (latitude && longitude) {
        variables.location = {
          lat: latitude,
          lng: longitude
        };
      } else {
        variables.location = {
          lat: this.state.lat,
          lng: this.state.lon
        };
      }

      // Find Viewer
      try {
        var viewerId = this.props.data.viewer.me.id;
        variables.ownerId = (0, _graphqlRelay.fromGlobalId)(viewerId).id;
      } catch (e) {
        return this.props.onError(e);
      }
      // mutation to create site
      this.props.mutate({
        variables: { data: variables }
      });
      _reactRouter.browserHistory.push('/app/device-explorer');
      event.preventDefault();
    }

    // Site Type drop down

  }, {
    key: 'getSiteType',
    value: function getSiteType() {
      if (this.props.data.viewer) {
        modeOptions = this.props.data.SiteType.SiteTypeFind.edges;
        eventObj = [];
        modeOptions.forEach(function (item) {
          eventObj.push({
            label: item.node.name,
            value: item.node.id,
            icon: item.node.icon
          });
        });
        return _react2.default.createElement(
          'div',
          { className: 'section' },
          _react2.default.createElement(_reactSelect2.default, {
            name: 'form-field-name',
            value: this.state.siteType,
            options: eventObj,
            onChange: this.handleChangeD,
            optionComponent: _GravatarOption2.default,
            valueComponent: _GravatarValue2.default
          })
        );
      }
      return _react2.default.createElement('div', null);
    }

    // Google Map

  }, {
    key: 'getMap',
    value: function getMap() {
      if (!this.props.isGeolocationEnabled) {
        button = _react2.default.createElement(
          'div',
          { style: { paddingTop: '20px' } },
          _react2.default.createElement(
            'div',
            { className: 'alert alert-warning', role: 'alert' },
            _react2.default.createElement(_reactFa.Icon, { name: 'map-marker' }),
            ' ',
            _react2.default.createElement(
              'strong',
              null,
              'Warning!'
            ),
            ' Please enable your location.'
          )
        );
      }
      return _react2.default.createElement(
        'div',
        { id: 'map' },
        _react2.default.createElement(
          _reactGmaps.Gmaps,
          {
            width: '100%',
            height: '250px',
            id: 'my_map',
            lat: latitude,
            lng: longitude,
            zoom: 5,
            params: { v: '3.exp', key: 'AIzaSyCgVYH02v3XYmCSIokoLOZzvUqJG6ZamMY' }
          },
          _react2.default.createElement(_reactGmaps.Marker, {
            lat: latitude,
            lng: longitude,
            onDragEnd: this.onDragEnd,
            draggable: true
          })
        ),
        button
      );
    }

    // Get value of dropdown

  }, {
    key: 'handleChangeD',
    value: function handleChangeD(siteType) {
      this.setState({
        siteType: siteType
      });
    }

    // Get value of name

  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      this.setState({
        value: limitLength(extraValidations(event.target.value), 25)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.coords) {
        latitude = this.props.coords.latitude;
        longitude = this.props.coords.longitude;
      } else {
        // latitude = 30.3753;
        // longitude = 69.3451;
        latitude = this.state.lat;
        longitude = this.state.lon;
      }
      var image = this.state.data.image;


      var imageSrc = '';
      if (image !== 'https://s3-us-west-2.amazonaws.com/bluerainimages/icon-default-sites.svg') {
        imageSrc = image;
      } else {
        imageSrc = this.state.siteType ? this.state.siteType.icon : image;
      }
      return _react2.default.createElement(
        'form',
        { onSubmit: this.onSubmit },
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'name' },
            'Site Name'
          ),
          _react2.default.createElement('input', {
            type: 'text', value: this.state.value, onChange: this.handleChange, className: 'form-control',
            'aria-describedby': 'name', placeholder: 'Site Name'
          })
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            { htmlFor: 'type' },
            'Site Type'
          ),
          this.getSiteType()
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'label',
            null,
            'Location'
          ),
          this.getMap()
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          null,
          _react2.default.createElement(
            'div',
            { className: 'media' },
            _react2.default.createElement(
              _Media2.default,
              { left: true },
              _react2.default.createElement('img', {
                role: 'presentation',
                id: 'site_logo', style: { height: '100px', width: '100px', borderRadius: '5px' },
                src: imageSrc
              })
            ),
            _react2.default.createElement(
              'div',
              { className: 'media-body' },
              _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                  'label',
                  { htmlFor: 'picture' },
                  'Display Picture'
                )
              ),
              _react2.default.createElement('input', { type: 'file', id: 'imgInp', onChange: this.onImageChange }),
              _react2.default.createElement(
                'small',
                { id: 'imageSize', className: 'form-text text-muted' },
                'Image size should not exceed 1 MB.'
              )
            )
          )
        ),
        _react2.default.createElement(
          _ListViewItem2.default,
          { className: 'text-xs-right' },
          _react2.default.createElement(
            _reactRouter.Link,
            { to: '/app/device-explorer' },
            'Cancel'
          ),
          '\xA0',
          _react2.default.createElement(
            'button',
            { type: 'submit', className: 'btn btn-primary' },
            'Submit'
          )
        )
      );
    }
  }]);

  return SiteForm;
}(_react2.default.Component);

// export default SiteForm;

exports.default = (0, _reactGeolocated.geolocated)({
  positionOptions: {
    enableHighAccuracy: true,
    maximumAge: 0,
    timeout: Infinity
  },
  userDecisionTimeout: null
})((0, _reactApollo.graphql)(_mutation2.default, {
  options: {
    refetchQueries: ['SitesFetchQuery']
  }
})((0, _reactApollo.graphql)(_query2.default)(SiteForm)));

SiteForm.propTypes = propTypes;
SiteForm.defaultProps = defaultProps;