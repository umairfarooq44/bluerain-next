'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SitesGrid = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _reactFa = require('react-fa');

var _bluerainClientServices = require('bluerain-client-services');

var _GridView = require('bluerain-ui/lib/GridView/GridView.component');

var _GridView2 = _interopRequireDefault(_GridView);

var _GridViewItem = require('bluerain-ui/lib/GridView/GridViewItem.component');

var _GridViewItem2 = _interopRequireDefault(_GridViewItem);

var _CardView = require('bluerain-ui/lib/Card/CardView/CardView.component');

var _CardView2 = _interopRequireDefault(_CardView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  data: _react.PropTypes.object,
  hideLoading: _react.PropTypes.func
};

var defaultProps = {
  onComponentUpdate: function onComponentUpdate() {}
};

var SitesGrid = exports.SitesGrid = function (_React$Component) {
  _inherits(SitesGrid, _React$Component);

  function SitesGrid(props) {
    _classCallCheck(this, SitesGrid);

    var _this = _possibleConstructorReturn(this, (SitesGrid.__proto__ || Object.getPrototypeOf(SitesGrid)).call(this, props));

    _this.renderSiteCard = _this.renderSiteCard.bind(_this);
    return _this;
  }

  _createClass(SitesGrid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.hideLoading) {
        this.props.hideLoading();
      }
      return null;
    }
  }, {
    key: 'getImageUrl',
    value: function getImageUrl(site) {
      if (site.image) {
        return site.image;
      }

      if (site.siteType && site.siteType.icon) {
        return site.siteType.icon;
      }

      return null;
    }
  }, {
    key: 'renderSiteCard',
    value: function renderSiteCard(site) {
      var url = '/app/device-explorer/sites/' + site.id;
      // url = encodeURI(url);

      var props = {
        title: site.name,
        linkTag: _reactRouter.Link,
        to: url
      };

      var imageUrl = this.getImageUrl(site);

      if (imageUrl) {
        props.image = imageUrl;
      }

      return _react2.default.createElement(
        _GridViewItem2.default,
        { key: site.id },
        _react2.default.createElement(_CardView2.default, props)
      );
    }
  }, {
    key: 'render',
    value: function render() {
      try {
        var sites = this.props.data.viewer.sites.edges;
        if (sites.length > 0) {
          sites = sites.map(function (item) {
            return item.node;
          });
          return _react2.default.createElement(
            _GridView2.default,
            null,
            sites.map(this.renderSiteCard)
          );
        } else {
          this.props.hideLoading();
        }

        return _react2.default.createElement(
          'div',
          { className: 'app-content' },
          _react2.default.createElement(
            'div',
            { className: 'container' },
            _react2.default.createElement(
              'div',
              { className: 'v-align' },
              _react2.default.createElement(
                'div',
                { className: 'v-align-middle empty-block' },
                _react2.default.createElement(_reactFa.Icon, { name: 'home fa-5x' }),
                _react2.default.createElement(
                  'h4',
                  null,
                  'No site added'
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  'To monitor this app you will need to add your sites first.'
                ),
                _react2.default.createElement(
                  _reactRouter.Link,
                  { className: 'btn btn-outline-primary btn-lg', to: '/app/device-explorer/site/new' },
                  'Add Site'
                )
              )
            )
          )
        );
      } catch (e) {
        this.props.hideLoading();
        console.info('There was an error fetching sites.');
      }

      return _react2.default.createElement('div', null);
    }
  }]);

  return SitesGrid;
}(_react2.default.Component);

SitesGrid.propTypes = propTypes;
SitesGrid.defaultProps = defaultProps;

exports.default = (0, _bluerainClientServices.withLoadingBar)(SitesGrid);