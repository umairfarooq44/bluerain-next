'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DataList = require('bluerain-ui/lib/DataList/DataList');

var _DataList2 = _interopRequireDefault(_DataList);

var _DataListItem = require('bluerain-ui/lib/DataList/DataListItem');

var _DataListItem2 = _interopRequireDefault(_DataListItem);

var _DataListItemLabel = require('bluerain-ui/lib/DataList/DataListItemLabel');

var _DataListItemLabel2 = _interopRequireDefault(_DataListItemLabel);

var _DataListItemValue = require('bluerain-ui/lib/DataList/DataListItemValue');

var _DataListItemValue2 = _interopRequireDefault(_DataListItemValue);

var _reactApollo = require('react-apollo');

var _reactGmaps = require('react-gmaps');

var _reactstrap = require('reactstrap');

var _reactFa = require('react-fa');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _query = require('./query.graphql');

var _query2 = _interopRequireDefault(_query);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {};

var latitude = void 0;
var longitude = void 0;
var sites = void 0;
var newArr = [];
var offlineArr = [];
var trueCounts = void 0;
var falseCounts = void 0;
var lat = void 0;
var long = void 0;
var devicePointerList = [];
// let assetCount;
var dates = [];
var maxDate = void 0;

var AssetLocationComponent = function (_React$Component) {
  _inherits(AssetLocationComponent, _React$Component);

  function AssetLocationComponent(props) {
    _classCallCheck(this, AssetLocationComponent);

    var _this = _possibleConstructorReturn(this, (AssetLocationComponent.__proto__ || Object.getPrototypeOf(AssetLocationComponent)).call(this, props));

    _this.toggleNavbar = _this.toggleNavbar.bind(_this);
    _this.clickMarker = _this.clickMarker.bind(_this);
    _this.onMapCreated = _this.onMapCreated.bind(_this);
    _this.state = { collapsed: true, lat: 0, long: 0, zoom: 12 };
    return _this;
  }

  _createClass(AssetLocationComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.state = {
        infoWindows: [false]
      };
    }
  }, {
    key: 'toggleNavbar',
    value: function toggleNavbar() {
      this.setState({
        collapsed: !this.state.collapsed
      });
    }
  }, {
    key: 'toggleInfoWindow',
    value: function toggleInfoWindow(index, sites) {
      var infoWindows = this.state.infoWindows;

      infoWindows[index] = !infoWindows[index];
      this.setState({
        infoWindows: infoWindows // toggle info window on click
      });
    }
  }, {
    key: 'toggleInfoWindowMarker',
    value: function toggleInfoWindowMarker(index, site) {
      var assets = site.node.assets;
      // assetCount = assets.edges.length;
      devicePointerList = [];
      dates = [];
      assets.edges.map(function (item, i) {
        devicePointerList.push({
          lastUpdated: item.node.updatedAt,
          lat: item.node.state.latitude,
          long: item.node.state.longitude
        });
        dates.push(new Date(item.node.updatedAt));
      });
      maxDate = new Date(Math.max.apply(null, dates));
      // this.state.infoWindows = [false];
      this.setState({
        infoWindows: false
      });

      var infoWindows = this.state.infoWindows;

      infoWindows[index] = !infoWindows[index];
      this.setState({
        infoWindows: infoWindows, // toggle info window on click
        lat: site.node.location.lat,
        long: site.node.location.lng,
        zoom: this.gmap.getMap().getZoom()
      });
    }
  }, {
    key: 'onMapCreated',
    value: function onMapCreated() {
      var sites = this.props.data.viewer.sites.edges;
      var bounds = new google.maps.LatLngBounds();
      for (var i = 0; i < sites.length; i++) {
        if (sites[i].node.location) {
          bounds.extend({ lat: sites[i].node.location.lat, lng: sites[i].node.location.lng });
        }
        return '';
        // sites[i].node.location ? bounds.extend({ lat: sites[i].node.location.lat, lng: sites[i].node.location.lng }) : '';
      }

      this.gmap.getMap().fitBounds(bounds);
    }
  }, {
    key: 'clickMarker',
    value: function clickMarker(list) {
      var html = list.map(function (item) {
        return _react2.default.createElement(_reactGmaps.Marker, {
          lat: item.lat,
          lng: item.long
        });
      });
      return html;
    }
  }, {
    key: 'renderInfoWindows',
    value: function renderInfoWindows() {
      var _this2 = this;

      // const position = { width: 0, height: -25 };
      var infoWindows = this.state.infoWindows;
      // console.log('SITES FIRST', sites);

      var getSites = sites;
      getSites.map(function (item, index) {
        trueCounts = 0;
        for (var a = 0; a < item.node.assets.edges.length; a++) {
          var truth = item.node.assets.edges[a].node.state;
          if (truth.connected === true) {
            trueCounts++;
          }
        }
        newArr.push({ siteName: item.node.name, count: trueCounts });
      });
      getSites.map(function (item, index) {
        falseCounts = 0;
        for (var a = 0; a < item.node.assets.edges.length; a++) {
          var truth = item.node.assets.edges[a].node.state;
          if (truth.connected === false) {
            falseCounts++;
          }
        }
        offlineArr.push({ siteName: item.node.name, count: falseCounts });
      });
      return sites.map(function (item, index) {
        // console.log('IND',infoWindows[index] )
        if (!infoWindows || !infoWindows[index]) return null;
        if (item.node.assets.edges.length === 0) {
          return _react2.default.createElement(
            'div',
            {
              id: 'infoWindow', style: {
                width: '25%',
                height: '100%',
                backgroundColor: '#fff',
                position: 'absolute',
                top: '0px',
                right: '0px',
                zIndex: '99'
              }
            },
            _react2.default.createElement(
              _reactstrap.Collapse,
              { isOpen: !_this2.state.collapsed },
              _react2.default.createElement(_reactFa.Icon, {
                name: 'times',
                style: {
                  background: 'white',
                  padding: '5px',
                  borderRadius: '50%',
                  color: 'black',
                  position: 'absolute',
                  top: '2px',
                  right: '3px',
                  zIndex: '99',
                  cursor: 'pointer'
                },
                onClick: function onClick() {
                  return _this2.toggleInfoWindow(index, sites.length);
                }
              }),
              _react2.default.createElement('img', {
                style: { width: '100%', height: '225px' },
                src: item.node.image ? item.node.image : item.node.siteType.icon, role: 'presentation'
              }),
              _react2.default.createElement(
                _DataList2.default,
                null,
                _react2.default.createElement(
                  _DataListItem2.default,
                  {
                    style: {
                      border: '0px solid',
                      borderTopRightRadius: '0px',
                      borderTopLeftRadius: '0px',
                      color: 'white',
                      backgroundColor: '#4285F4'
                    }, chevronRight: false, action: false
                  },
                  _react2.default.createElement(
                    _DataListItemValue2.default,
                    null,
                    _react2.default.createElement(
                      'b',
                      { style: { fontSize: '20px' } },
                      item.node.name
                    ),
                    _react2.default.createElement('br', null),
                    item.node.location.latitude,
                    '\u2002',
                    item.node.location.longitude
                  )
                ),
                _react2.default.createElement(
                  _DataListItem2.default,
                  {
                    style: { borderBottomRightRadius: '0px', borderBottomLeftRadius: '0px' },
                    chevronRight: false, action: false
                  },
                  _react2.default.createElement(
                    _DataListItemLabel2.default,
                    null,
                    'No Assets found for this site'
                  )
                )
              )
            )
          );
        }
        // <Icon name="times" style={{ cursor: 'pointer' }} onClick={() => this.toggleInfoWindow(index, sites.length)} />
        return _react2.default.createElement(
          'div',
          {
            id: 'infoWindow', style: {
              width: '25%',
              height: '100%',
              backgroundColor: '#fff',
              position: 'absolute',
              top: '0px',
              right: '0px',
              zIndex: '99'
            }
          },
          _react2.default.createElement(
            _reactstrap.Collapse,
            { isOpen: !_this2.state.collapsed },
            _react2.default.createElement(_reactFa.Icon, {
              name: 'times',
              style: {
                background: 'white',
                padding: '5px',
                borderRadius: '50%',
                color: 'black',
                position: 'absolute',
                top: '2px',
                right: '3px',
                zIndex: '99',
                cursor: 'pointer'
              },
              onClick: function onClick() {
                return _this2.toggleInfoWindow(index, sites.length);
              }
            }),
            _react2.default.createElement('img', {
              style: { width: '100%', height: '225px' },
              src: item.node.image ? item.node.image : item.node.siteType.icon, role: 'presentation'
            }),
            _react2.default.createElement(
              _DataList2.default,
              null,
              _react2.default.createElement(
                _DataListItem2.default,
                {
                  style: {
                    border: '0px solid',
                    borderTopRightRadius: '0px',
                    borderTopLeftRadius: '0px',
                    color: 'white',
                    backgroundColor: '#4285F4'
                  }, chevronRight: false, action: false
                },
                _react2.default.createElement(
                  _DataListItemValue2.default,
                  null,
                  _react2.default.createElement(
                    'b',
                    { style: { fontSize: '20px' } },
                    item.node.name
                  ),
                  _react2.default.createElement('br', null),
                  item.node.location.latitude,
                  '\u2002',
                  item.node.location.longitude
                )
              ),
              _react2.default.createElement(
                _DataListItem2.default,
                { chevronRight: false, action: false },
                _react2.default.createElement(
                  _DataListItemLabel2.default,
                  null,
                  'Online Assets'
                ),
                _react2.default.createElement(
                  _DataListItemValue2.default,
                  null,
                  _react2.default.createElement(
                    'b',
                    null,
                    newArr[index].count,
                    ' out of ',
                    item.node.assets.edges.length
                  )
                )
              ),
              _react2.default.createElement(
                _DataListItem2.default,
                {
                  style: { borderBottomRightRadius: '0px', borderBottomLeftRadius: '0px' },
                  chevronRight: false,
                  action: false
                },
                _react2.default.createElement(
                  _DataListItemLabel2.default,
                  null,
                  'Site Last Updated'
                ),
                _react2.default.createElement(
                  _DataListItemValue2.default,
                  null,
                  _react2.default.createElement(
                    'b',
                    null,
                    (0, _moment2.default)(maxDate).fromNow(true),
                    ' ago'
                  )
                )
              )
            )
          )
        );
      });
    }
  }, {
    key: 'renderMarkers',
    value: function renderMarkers() {
      return (
        // <div>
        //  {
        sites.map(function (item, index) {
          var assets = item.node.assets.edges;
          var devicesArray = [];
          for (var a = 0; a < assets.length; a++) {
            // console.log('INSIDE', assets[a].node)
            devicesArray.push({ connected: assets[a].node.state.connected, assetName: assets[a].node.name });
          }
          var connectedDeviceStatus = 0;

          for (var b = 0; b < devicesArray.length; b++) {

            var singleDevice = devicesArray[b];

            if (singleDevice.connected === true) {
              connectedDeviceStatus++;
            }
          }

          var iconString = '';

          if (connectedDeviceStatus === devicesArray.length || connectedDeviceStatus > 0 && connectedDeviceStatus <= devicesArray.length) {
            iconString = 'https://s3-us-west-2.amazonaws.com/bluerainimages/online-office.png';
          } else if (connectedDeviceStatus === 0) {
            iconString = 'https://s3-us-west-2.amazonaws.com/bluerainimages/offline-office.png';
          }
          // else if(connectedDeviceStatus > 0 && connectedDeviceStatus <= devicesArray.length){
          //   iconString  = 'https://s3-us-west-2.amazonaws.com/bluerainimages/online-office.png';
          // }
          var lat = item.node.location ? item.node.location.lat : '';
          var long = item.node.location ? item.node.location.lng : '';

          if (lat === 0 && long === 0) {
            lat = '';
            long = '';
          }
          return _react2.default.createElement(_reactGmaps.Marker, {
            key: index,
            lat: lat,
            lng: long,
            icon: iconString
            // icon={item.node.image ? item.node.image.url : item.node.type.icon.url}
            // onClick={() => this.toggleInfoWindowMarker(index, item)}
          });
        })
        // }
        // </div>

      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (this.props.data && this.props.data.viewer && this.props.data.viewer.sites.edges.length > 0) {
        sites = this.props.data.viewer.sites.edges;
        latitude = this.props.data.viewer.sites.edges[0].node.location.lat;
        longitude = this.props.data.viewer.sites.edges[0].node.location.lng;
        lat = this.state.lat ? this.state.lat : latitude;
        long = this.state.long ? this.state.long : longitude;
        var zoom = this.state.zoom ? this.state.zoom : 12;
        if (lat === 0 && long === 0) {
          lat = 30.3753;
          long = 69.3451;
          zoom = 6;
        }
        return _react2.default.createElement(
          _reactGmaps.Gmaps,
          {
            ref: function ref(googleMap) {
              return _this3.gmap = googleMap;
            },
            style: { position: 'relative' },
            width: '100%',
            height: '100vh',
            lat: lat,
            lng: long,
            zoom: zoom,
            loadingMessage: ' ',
            bounds: true,
            streetViewControl: false,
            onMapCreated: this.onMapCreated,
            params: { v: '3.exp', key: 'AIzaSyCsvSAB6oyi9nAKMcbfdPV8E7uZfA4IujA' }
          },
          this.renderMarkers(),
          this.renderInfoWindows()
        );
      }
      return _react2.default.createElement(
        'div',
        null,
        ' No sites found :( '
      );
    }
  }]);

  return AssetLocationComponent;
}(_react2.default.Component);

exports.default = (0, _reactApollo.graphql)(_query2.default)(AssetLocationComponent);

AssetLocationComponent.propTypes = propTypes;
AssetLocationComponent.defaultProps = defaultProps;

// <Icon name="times" style={{ cursor: 'pointer' }} onClick={() => this.toggleInfoWindow(index, sites.length)} />
// <DataListItem style={{position: 'absolute', top: '0px', right: '230px', zIndex: '99'}} chevronRight action={false} onClick={this.toggleNavbar} />
// {this.clickMarker(devicePointerList)}