'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

require('react-select/dist/react-select.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import './dropdown.scss';

var propTypes = {
  label: _react.PropTypes.string,
  value: _react.PropTypes.string,
  disabled: _react.PropTypes.bool,
  className: _react.PropTypes.string,
  onChange: _react.PropTypes.func,
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    label: _react.PropTypes.string.isRequired,
    value: _react.PropTypes.string.isRequired
  }))
};

var defaultProps = {
  label: '',
  disabled: false,
  className: '',
  value: 1,
  items: [],
  onChange: function onChange() {}
};

var style = {
  control: {
    display: 'flex'
  },
  label: {
    flexGrow: 1,
    lineHeight: '29px'
  },
  dropdown: {
    height: '29px'
  },
  dropdownLabel: {
    lineHeight: '29px',
    paddingRight: '32px'
  },
  dropdownIcon: {
    top: '3px',
    right: 0
  },
  dropdownUnderline: {
    position: 'relative'
  }
};

var DropdownControl = function (_React$Component) {
  _inherits(DropdownControl, _React$Component);

  function DropdownControl(props) {
    _classCallCheck(this, DropdownControl);

    var _this = _possibleConstructorReturn(this, (DropdownControl.__proto__ || Object.getPrototypeOf(DropdownControl)).call(this, props));

    _this.onChange = _this.onChange.bind(_this);

    _this.state = {
      value: props.value,
      disabled: props.disabled
    };
    return _this;
  }

  _createClass(DropdownControl, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.setState(props);
    }
  }, {
    key: 'onChange',
    value: function onChange(value) {
      this.setState({
        value: value
      });

      this.props.onChange(value);
    }
  }, {
    key: 'render',
    value: function render() {
      var value = this.state.value;
      var _props = this.props,
          label = _props.label,
          items = _props.items,
          className = _props.className;


      return _react2.default.createElement(
        'div',
        {
          className: 'device-control-item dropdown-control clearfix ' + className,
          style: style.control
        },
        _react2.default.createElement(
          'div',
          {
            className: 'control-label',
            style: style.label
          },
          label
        ),
        _react2.default.createElement(_reactSelect2.default, {
          name: 'form-field-name',
          value: value,
          options: items,
          onChange: this.onChange,
          clearable: false,
          searchable: false,
          style: { width: '65px' }
        })
      );
    }
  }]);

  return DropdownControl;
}(_react2.default.Component);

exports.default = DropdownControl;


DropdownControl.propTypes = propTypes;
DropdownControl.defaultProps = defaultProps;