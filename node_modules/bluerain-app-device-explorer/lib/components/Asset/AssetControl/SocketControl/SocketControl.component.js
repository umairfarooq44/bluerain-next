'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwitchControl = require('../ControlItems/SwitchControl');

var _SwitchControl2 = _interopRequireDefault(_SwitchControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  // Standby
  standby: _react.PropTypes.bool,
  disableStandby: _react.PropTypes.bool,
  onStandbyToggle: _react.PropTypes.func
};

var defaultProps = {
  // Standby
  standby: true,
  disableStandby: false,
  onStandbyToggle: function onStandbyToggle() {}

};

var SocketControlComponent = function (_React$Component) {
  _inherits(SocketControlComponent, _React$Component);

  function SocketControlComponent(props) {
    _classCallCheck(this, SocketControlComponent);

    var _this = _possibleConstructorReturn(this, (SocketControlComponent.__proto__ || Object.getPrototypeOf(SocketControlComponent)).call(this, props));

    _this.onStandbyToggle = _this.onStandbyToggle.bind(_this);

    _this.state = {
      standby: props.standby,
      disableStandby: props.disableStandby
    };
    return _this;
  }

  _createClass(SocketControlComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.setState(props);
    }
  }, {
    key: 'onStandbyToggle',
    value: function onStandbyToggle(standby) {
      this.setState({ standby: standby });
      this.props.onStandbyToggle(standby);
    }
  }, {
    key: 'getStandbyControl',
    value: function getStandbyControl() {
      var _this2 = this;

      var _state = this.state,
          standby = _state.standby,
          disableStandby = _state.disableStandby;


      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_SwitchControl2.default, {
          label: 'Standby',
          disabled: disableStandby,
          toggled: !standby,
          onToggle: function onToggle(value) {
            return _this2.onStandbyToggle(!value);
          },
          className: 'list-group-item',
          switchState: standby
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'card list-group device-control-list' },
        this.getStandbyControl()
      );
    }
  }]);

  return SocketControlComponent;
}(_react2.default.Component);

exports.default = SocketControlComponent;


SocketControlComponent.propTypes = propTypes;
SocketControlComponent.defaultProps = defaultProps;