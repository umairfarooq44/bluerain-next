'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwitchControl = require('../ControlItems/SwitchControl');

var _SwitchControl2 = _interopRequireDefault(_SwitchControl);

var _SliderControl = require('../ControlItems/SliderControl');

var _SliderControl2 = _interopRequireDefault(_SliderControl);

var _ColorControl = require('../ControlItems/ColorControl');

var _ColorControl2 = _interopRequireDefault(_ColorControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  // Standby
  standby: _react.PropTypes.bool,
  disableStandby: _react.PropTypes.bool,
  onStandbyToggle: _react.PropTypes.func,

  // Color
  color: _react.PropTypes.object,
  disableColor: _react.PropTypes.bool,
  onColorChangeComplete: _react.PropTypes.func,

  // Brightness
  onBrightnessChange: _react.PropTypes.func,
  brightness: _react.PropTypes.number,
  disableBrightness: _react.PropTypes.bool,
  minBrightness: _react.PropTypes.number,
  maxBrightness: _react.PropTypes.number,
  brightnessStep: _react.PropTypes.number,

  // Color Temperature
  onColorTemperatureChange: _react.PropTypes.func,
  colorTemperature: _react.PropTypes.number,
  disableColorTemperature: _react.PropTypes.bool,
  minColorTemperature: _react.PropTypes.number,
  maxColorTemperature: _react.PropTypes.number,
  colorTemperatureStep: _react.PropTypes.number
};

var defaultProps = {
  // Standby
  standby: true,
  disableStandby: false,
  onStandbyToggle: function onStandbyToggle() {},

  // Color
  color: { r: 51, g: 51, b: 51 },
  disableColor: false,
  onColorChangeComplete: function onColorChangeComplete() {},

  // Brightness
  onBrightnessChange: function onBrightnessChange() {},
  brightness: 26,
  disableBrightness: false,
  minBrightness: 0,
  maxBrightness: 100,
  brightnessStep: 1,

  // Color Temperature
  onColorTemperatureChange: function onColorTemperatureChange() {},
  colorTemperature: 5000,
  disableColorTemperature: false,
  minColorTemperature: 3500,
  maxColorTemperature: 9000,
  colorTemperatureStep: 100
};

var LightControl = function (_React$Component) {
  _inherits(LightControl, _React$Component);

  function LightControl(props) {
    _classCallCheck(this, LightControl);

    var _this = _possibleConstructorReturn(this, (LightControl.__proto__ || Object.getPrototypeOf(LightControl)).call(this, props));

    _this.onStandbyToggle = _this.onStandbyToggle.bind(_this);
    _this.onBrightnessChange = _this.onBrightnessChange.bind(_this);
    _this.onColorTemperatureChange = _this.onColorTemperatureChange.bind(_this);
    return _this;
  }

  _createClass(LightControl, [{
    key: 'onStandbyToggle',
    value: function onStandbyToggle(standby) {
      this.setState({ standby: standby });
      this.props.onStandbyToggle(standby);
    }
  }, {
    key: 'onColorChangeComplete',
    value: function onColorChangeComplete(color) {
      this.setState({ color: color });
      this.props.onColorChangeComplete(color);
    }
  }, {
    key: 'onBrightnessChange',
    value: function onBrightnessChange(brightness) {
      this.setState({ brightness: brightness });
      this.props.onBrightnessChange(brightness);
    }
  }, {
    key: 'onColorTemperatureChange',
    value: function onColorTemperatureChange(colorTemperature) {
      this.setState({ colorTemperature: colorTemperature });
      this.props.onColorTemperatureChange(colorTemperature);
    }
  }, {
    key: 'getStandbyControl',
    value: function getStandbyControl() {
      var _props = this.props,
          standby = _props.standby,
          disableStandby = _props.disableStandby;


      return _react2.default.createElement(_SwitchControl2.default, {
        label: 'Power',
        disabled: disableStandby,
        toggled: !standby,
        onToggle: this.onStandbyToggle,
        className: 'list-group-item'
      });
    }
  }, {
    key: 'getColorControl',
    value: function getColorControl() {
      var _props2 = this.props,
          standby = _props2.standby,
          color = _props2.color,
          disableColor = _props2.disableColor,
          onColorChangeComplete = _props2.onColorChangeComplete;


      if (standby === false) {
        return _react2.default.createElement(_ColorControl2.default, {
          label: 'Color',
          value: color,
          disabled: disableColor,
          onChangeComplete: onColorChangeComplete,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'getBrightnessControl',
    value: function getBrightnessControl() {
      var _props3 = this.props,
          standby = _props3.standby,
          onBrightnessChange = _props3.onBrightnessChange,
          brightness = _props3.brightness,
          disableBrightness = _props3.disableBrightness,
          minBrightness = _props3.minBrightness,
          maxBrightness = _props3.maxBrightness,
          brightnessStep = _props3.brightnessStep;


      if (standby === false) {
        return _react2.default.createElement(_SliderControl2.default, {
          label: 'Brightness',
          min: minBrightness,
          max: maxBrightness,
          step: brightnessStep,
          value: brightness,
          disabled: disableBrightness,
          onDragStop: onBrightnessChange,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'getColorTemperatureControl',
    value: function getColorTemperatureControl() {
      var _props4 = this.props,
          standby = _props4.standby,
          onColorTemperatureChange = _props4.onColorTemperatureChange,
          colorTemperature = _props4.colorTemperature,
          disableColorTemperature = _props4.disableColorTemperature,
          minColorTemperature = _props4.minColorTemperature,
          maxColorTemperature = _props4.maxColorTemperature,
          colorTemperatureStep = _props4.colorTemperatureStep;


      if (standby === false) {
        return _react2.default.createElement(_SliderControl2.default, {
          label: 'Color Temperature',
          min: minColorTemperature,
          max: maxColorTemperature,
          step: colorTemperatureStep,
          value: colorTemperature,
          disabled: disableColorTemperature,
          onDragStop: onColorTemperatureChange,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'card list-group device-control-list' },
        this.getStandbyControl(),
        this.getColorControl(),
        this.getBrightnessControl(),
        this.getColorTemperatureControl()
      );
    }
  }]);

  return LightControl;
}(_react2.default.Component);

exports.default = LightControl;


LightControl.propTypes = propTypes;
LightControl.defaultProps = defaultProps;