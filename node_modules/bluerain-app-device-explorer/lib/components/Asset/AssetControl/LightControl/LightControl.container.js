'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _graphqlRelay = require('graphql-relay');

var _LightControl = require('./LightControl.component');

var _LightControl2 = _interopRequireDefault(_LightControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  assetId: _react.PropTypes.string,
  data: _react.PropTypes.object,
  // assetState: PropTypes.object,
  onError: _react.PropTypes.func,
  mutate: _react.PropTypes.func
};

var defaultProps = {
  assetId: null,
  asset: null,
  // assetState: {
  //   standby: false,
  //   brightness: 100,
  //   colorTemperature: 5000,
  // },

  mutate: function mutate() {},
  onError: function onError() {}
};

var LightControl = function (_React$Component) {
  _inherits(LightControl, _React$Component);

  function LightControl(props) {
    _classCallCheck(this, LightControl);

    var _this = _possibleConstructorReturn(this, (LightControl.__proto__ || Object.getPrototypeOf(LightControl)).call(this, props));

    _this.persistState = _this.persistState.bind(_this);

    try {
      _this.state = props.data.node.state;
    } catch (error) {
      //
    }
    return _this;
  }

  _createClass(LightControl, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      try {
        this.setState(props.data.node.state);
      } catch (error) {
        //
      }
    }
  }, {
    key: 'persistState',
    value: function persistState(data) {
      var _this2 = this;

      // Set local state
      this.setState(data.params);

      // Setup data
      var assetId = this.props.assetId;
      var deviceID = null;

      try {
        deviceID = this.props.data.node.devices.edges[0].node.id;
      } catch (e) {
        return this.props.onError(e);
      }

      // Create Object
      var eventObj = {
        type: 'command',
        data: data,
        assetId: (0, _graphqlRelay.fromGlobalId)(assetId).id,
        deviceId: (0, _graphqlRelay.fromGlobalId)(deviceID).id
      };

      // Find Viewer
      try {
        var viewerId = this.props.data.viewer.me.id;
        eventObj.sourceAccountId = (0, _graphqlRelay.fromGlobalId)(viewerId).id;
      } catch (e) {
        return this.props.onError(e);
      }
      // Mutate
      this.props.mutate({
        variables: { data: eventObj }
      }).catch(function (error) {
        _this2.props.onError(error);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (!this.state) {
        return _react2.default.createElement('div', null);
      }

      var _state = this.state,
          standby = _state.standby,
          red = _state.red,
          green = _state.green,
          blue = _state.blue,
          brightness = _state.brightness,
          colorTemperature = _state.colorTemperature;


      var color = { r: red, g: green, b: blue, a: 1 };
      return _react2.default.createElement(_LightControl2.default

      // Standby
      , { standby: standby,
        onStandbyToggle: function onStandbyToggle(standby) {
          return _this3.persistState({
            name: 'setStandby',
            params: { standby: !standby }
          });
        }

        // Color
        , color: color,
        onColorChangeComplete: function onColorChangeComplete(color) {
          return _this3.persistState({
            name: 'setColorRgb',
            params: { red: color.rgb.r, green: color.rgb.g, blue: color.rgb.b }
          });
        }

        // Brightness
        , brightness: brightness,
        onBrightnessChange: function onBrightnessChange(brightness) {
          return _this3.persistState({
            name: 'setBrightness',
            params: { brightness: brightness }
          });
        }

        // Color Temperature
        , colorTemperature: colorTemperature,
        onColorTemperatureChange: function onColorTemperatureChange(colorTemperature) {
          return _this3.persistState({
            name: 'setColorTemperature',
            params: { colorTemperature: colorTemperature }
          });
        }

      });
    }
  }]);

  return LightControl;
}(_react2.default.Component);

LightControl.propTypes = propTypes;
LightControl.defaultProps = defaultProps;

exports.default = LightControl;