'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _graphqlRelay = require('graphql-relay');

var _AirConditionerControl = require('./AirConditionerControl.component');

var _AirConditionerControl2 = _interopRequireDefault(_AirConditionerControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  assetId: _react.PropTypes.string,
  assetState: _react.PropTypes.object,
  onError: _react.PropTypes.func,
  mutate: _react.PropTypes.func,
  data: _react.PropTypes.object
};

var defaultProps = {
  assetId: null,
  asset: null,
  viewerQuery: null,
  assetState: {
    thermostatSetpoint: 26,
    thermostatSetpointAuto: 24,
    thermostatSetpointCool: 18,
    thermostatSetpointDry: 26,
    thermostatFanMode: 'high',
    thermostatSetpointHeat: 31,
    thermostatMode: 'cool',
    standby: true
  },

  mutate: function mutate() {},
  onError: function onError() {}
};

var disableSetpoint = false;

var AirConditionerControl = function (_React$Component) {
  _inherits(AirConditionerControl, _React$Component);

  function AirConditionerControl(props) {
    _classCallCheck(this, AirConditionerControl);

    var _this = _possibleConstructorReturn(this, (AirConditionerControl.__proto__ || Object.getPrototypeOf(AirConditionerControl)).call(this, props));

    _this.persistState = _this.persistState.bind(_this);
    _this.state = props.assetState;
    return _this;
  }

  _createClass(AirConditionerControl, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      try {
        var state = nextProps.data.node.state;
        // if (state.thermostatMode === 'auto') {
        //   disableSetpoint = true;
        //   state.thermostatSetpoint = 24;
        // } else {
        //   disableSetpoint = false;
        // }
        if (state.thermostatMode === 'heat') {
          this.setState({ color: '#f44336', rippleColor: '#ff3232' });
          disableSetpoint = false;
        } else if (state.thermostatMode === 'auto') {
          this.setState({ color: 'grey', rippleColor: '#a8a8a8' });
          disableSetpoint = true;
          state.thermostatSetpoint = 24;
        } else if (state.thermostatMode === 'dry') {
          this.setState({ color: '#795548', rippleColor: '#7a5230' });
          disableSetpoint = false;
        } else if (state.thermostatMode === 'fan') {
          this.setState({ color: '#4caf50', rippleColor: '#28a428' });
          disableSetpoint = true;
          state.thermostatSetpoint = 22;
        } else if (state.thermostatMode === 'cool') {
          this.setState({ color: '#00BCD4', rippleColor: '#66d6e5' });
          disableSetpoint = false;
        }

        if (!state) {
          return;
        }

        var newState = Object.assign({}, this.state, state);
        this.setState(newState);
      } catch (e) {
        this.props.onError(e);
      }
    }
  }, {
    key: 'persistState',
    value: function persistState(stateName, stateValue) {
      var _this2 = this;

      // Setup data

      var assetGlobalId = this.props.assetId;
      var assetId = (0, _graphqlRelay.fromGlobalId)(assetGlobalId).id;
      var deviceID = null;

      try {
        deviceID = this.props.data.node.devices.edges[0].node.id;
      } catch (e) {
        return this.props.onError(e);
      }

      deviceID = (0, _graphqlRelay.fromGlobalId)(deviceID).id;
      // Set local state
      var newAssetState = Object.assign({}, this.state, stateValue);
      // newAssetState[stateName] = stateValue;

      var newState = Object.assign({}, this.state, newAssetState);
      this.setState(newState);
      // Prepare to Mutate
      // const paramDetail = {};
      // paramDetail[stateName] = stateValue;
      // if (stateName === 'thermostatMode') {
      //   paramDetail.thermostatFanMode = this.state.thermostatFanMode;
      //   switch (stateValue) {
      //     case 'cool':
      //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointCool;
      //       break;
      //     case 'heat':
      //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointHeat;
      //       break;
      //     case 'dry':
      //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointDry;
      //       break;
      //     // case 'fan':
      //     //   paramDetail.thermostatSetpoint = this.state.thermostatSetpointFan;
      //     //   break;
      //     default:
      //       paramDetail.thermostatSetpoint = this.state.thermostatSetpointAuto;
      //       break;
      //   }
      // }
      if (stateName === 'setThermostatMode') {
        if (stateValue.thermostatMode === 'heat') {
          this.setState({ color: '#f44336', rippleColor: '#ff3232' });
        } else if (stateValue.thermostatMode === 'auto') {
          this.setState({ color: 'grey', rippleColor: '#a8a8a8' });
        } else if (stateValue.thermostatMode === 'dry') {
          this.setState({ color: '#795548', rippleColor: '#7a5230' });
        } else if (stateValue.thermostatMode === 'fan') {
          this.setState({ color: '#4caf50', rippleColor: '#28a428' });
        } else if (stateValue.thermostatMode === 'cool') {
          this.setState({ color: '#00BCD4', rippleColor: '#66d6e5' });
        }
        stateValue.thermostatSetpoint = this.props.data.node.state.thermostatSetpoint;
        stateValue.thermostatFanMode = this.props.data.node.state.thermostatFanMode;
      }
      // Create Object

      var eventObj = {
        type: 'command',
        data: { name: stateName, params: stateValue },
        assetId: assetId,
        deviceId: deviceID
      };

      // Find Viewer
      try {
        var viewerId = this.props.data.viewer.me.id;
        eventObj.sourceAccountId = (0, _graphqlRelay.fromGlobalId)(viewerId).id;
      } catch (e) {
        return this.props.onError(e);
      }

      // Mutate

      this.props.mutate({
        variables: { data: eventObj }
      }).catch(function (error) {
        _this2.props.onError(error);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          standby = _state.standby,
          thermostatSetpoint = _state.thermostatSetpoint,
          thermostatMode = _state.thermostatMode,
          thermostatFanMode = _state.thermostatFanMode;

      return _react2.default.createElement(_AirConditionerControl2.default

      // Power
      , { standby: standby,
        onStandbyToggle: function onStandbyToggle(standby, type) {
          return _this3.persistState('setStandby', { standby: standby });
        }

        // Setpoint
        , onSetpointChange: function onSetpointChange(thermostatSetpoint, type) {
          return _this3.persistState('setThermostatSetpoint', { thermostatSetpoint: thermostatSetpoint });
        },
        setpoint: thermostatSetpoint,
        disableSetpoint: disableSetpoint,
        minSetpoint: 16,
        maxSetpoint: 32,
        setpointStep: 1

        // Mode Change
        , onModeChange: function onModeChange(thermostatMode, type) {
          return _this3.persistState('setThermostatMode', { thermostatMode: thermostatMode.value });
        },
        mode: thermostatMode,
        modeOptions: [{
          label: 'Auto',
          value: 'auto'
        }, {
          label: 'Cool',
          value: 'cool'
        }, {
          label: 'Heat',
          value: 'heat'
        }, {
          label: 'Dry',
          value: 'dry'
        }, {
          label: 'Fan',
          value: 'fan'
        }],
        setpointSelectionColor: this.state.color,
        setpointRippleColor: this.state.rippleColor
        // Fan Spped
        , onFanSpeedChange: function onFanSpeedChange(thermostatFanMode, type) {
          return _this3.persistState('setThermostatFanMode', { thermostatFanMode: thermostatFanMode.value });
        },
        fanSpeed: thermostatFanMode,
        fanSpeedOptions: [{
          label: 'Auto',
          value: 'auto'
        }, {
          label: 'High',
          value: 'high'
        }, {
          label: 'Mid',
          value: 'mid'
        }, {
          label: 'Low',
          value: 'low'
        }]
      });
    }
  }]);

  return AirConditionerControl;
}(_react2.default.Component);

AirConditionerControl.propTypes = propTypes;
AirConditionerControl.defaultProps = defaultProps;

exports.default = AirConditionerControl;