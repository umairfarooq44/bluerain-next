'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwitchControl = require('../ControlItems/SwitchControl');

var _SwitchControl2 = _interopRequireDefault(_SwitchControl);

var _SliderControl = require('../ControlItems/SliderControl');

var _SliderControl2 = _interopRequireDefault(_SliderControl);

var _DropdownControl = require('../ControlItems/DropdownControl');

var _DropdownControl2 = _interopRequireDefault(_DropdownControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  // Standby
  standby: _react.PropTypes.bool,
  disableStandby: _react.PropTypes.bool,
  onStandbyToggle: _react.PropTypes.func,

  // Temperature
  onSetpointChange: _react.PropTypes.func,
  setpoint: _react.PropTypes.number,
  setpointSelectionColor: _react.PropTypes.string,
  setpointTrackColor: _react.PropTypes.string,
  setpointRippleColor: _react.PropTypes.string,
  disableSetpoint: _react.PropTypes.bool,
  minSetpoint: _react.PropTypes.number,
  maxSetpoint: _react.PropTypes.number,
  setpointStep: _react.PropTypes.number,

  // Fan Speed
  onFanSpeedChange: _react.PropTypes.func,
  fanSpeed: _react.PropTypes.string,
  disableFanSpeed: _react.PropTypes.bool,
  fanSpeedOptions: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    label: _react.PropTypes.string.isRequired,
    value: _react.PropTypes.string.isRequired
  })),

  // Modes
  onModeChange: _react.PropTypes.func,
  mode: _react.PropTypes.string,
  disableMode: _react.PropTypes.bool,
  modeOptions: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    label: _react.PropTypes.string.isRequired,
    value: _react.PropTypes.string.isRequired
  }))
};

var defaultProps = {
  // Standby
  standby: true,
  disableStandby: false,
  onStandbyToggle: function onStandbyToggle() {},

  // Setpoint
  onSetpointChange: function onSetpointChange() {},
  disableSetpoint: false,
  setpoint: 26,
  minSetpoint: 17,
  maxSetpoint: 30,
  setpointStep: 1,

  // Fan Speed
  onFanSpeedChange: function onFanSpeedChange() {},
  fanSpeed: '',
  disableFanSpeed: false,
  fanSpeedOptions: [],

  // Modes
  onModeChange: function onModeChange() {},
  mode: '',
  disableMode: false,
  modeOptions: []
};

var AirConditionerControlComponent = function (_React$Component) {
  _inherits(AirConditionerControlComponent, _React$Component);

  function AirConditionerControlComponent(props) {
    _classCallCheck(this, AirConditionerControlComponent);

    var _this = _possibleConstructorReturn(this, (AirConditionerControlComponent.__proto__ || Object.getPrototypeOf(AirConditionerControlComponent)).call(this, props));

    _this.onStandbyToggle = _this.onStandbyToggle.bind(_this);

    _this.state = {
      standby: props.standby,
      disableStandby: props.disableStandby,
      setpoint: props.setpoint,
      disableSetpoint: props.disableSetpoint,
      disableFanSpeed: props.disableFanSpeed,
      disableMode: props.disableMode
    };
    return _this;
  }

  _createClass(AirConditionerControlComponent, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      this.setState(props);
    }
  }, {
    key: 'onStandbyToggle',
    value: function onStandbyToggle(standby) {
      this.setState({ standby: standby });
      this.props.onStandbyToggle(standby);
    }
  }, {
    key: 'getStandbyControl',
    value: function getStandbyControl() {
      var _this2 = this;

      var _state = this.state,
          standby = _state.standby,
          disableStandby = _state.disableStandby;


      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_SwitchControl2.default, {
          label: 'Standby',
          disabled: disableStandby,
          toggled: !standby,
          onToggle: function onToggle(value) {
            return _this2.onStandbyToggle(!value);
          },
          className: 'list-group-item',
          switchState: standby
        })
      );
    }
  }, {
    key: 'getSetpointControl',
    value: function getSetpointControl() {
      var standby = this.state.standby;
      var _props = this.props,
          setpoint = _props.setpoint,
          onSetpointChange = _props.onSetpointChange,
          minSetpoint = _props.minSetpoint,
          maxSetpoint = _props.maxSetpoint,
          setpointStep = _props.setpointStep,
          setpointSelectionColor = _props.setpointSelectionColor,
          setpointTrackColor = _props.setpointTrackColor,
          setpointRippleColor = _props.setpointRippleColor,
          disableSetpoint = _props.disableSetpoint;


      if (standby === false) {
        return _react2.default.createElement(_SliderControl2.default, {
          label: 'Temperature',
          min: minSetpoint,
          max: maxSetpoint,
          step: setpointStep,
          value: setpoint,
          rippleColor: setpointRippleColor,
          selectionColor: setpointSelectionColor,
          trackColor: setpointTrackColor,
          disabled: disableSetpoint,
          onDragStop: onSetpointChange,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'getModeControl',
    value: function getModeControl() {
      var _state2 = this.state,
          standby = _state2.standby,
          disableMode = _state2.disableMode;
      var _props2 = this.props,
          onModeChange = _props2.onModeChange,
          modeOptions = _props2.modeOptions,
          mode = _props2.mode;


      if (standby === false) {
        return _react2.default.createElement(_DropdownControl2.default, {
          label: 'Mode',
          onChange: onModeChange,
          value: mode,
          items: modeOptions,
          disabled: disableMode,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'getFanSpeedControl',
    value: function getFanSpeedControl() {
      var _state3 = this.state,
          standby = _state3.standby,
          disableFanSpeed = _state3.disableFanSpeed;
      var _props3 = this.props,
          onFanSpeedChange = _props3.onFanSpeedChange,
          fanSpeedOptions = _props3.fanSpeedOptions,
          fanSpeed = _props3.fanSpeed;


      if (standby === false) {
        return _react2.default.createElement(_DropdownControl2.default, {
          label: 'Fan Speed',
          onChange: onFanSpeedChange,
          value: fanSpeed,
          disabled: disableFanSpeed,
          items: fanSpeedOptions,
          className: 'list-group-item'
        });
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'card list-group device-control-list' },
        this.getStandbyControl(),
        this.getSetpointControl(),
        this.getModeControl(),
        this.getFanSpeedControl()
      );
    }
  }]);

  return AirConditionerControlComponent;
}(_react2.default.Component);

exports.default = AirConditionerControlComponent;


AirConditionerControlComponent.propTypes = propTypes;
AirConditionerControlComponent.defaultProps = defaultProps;