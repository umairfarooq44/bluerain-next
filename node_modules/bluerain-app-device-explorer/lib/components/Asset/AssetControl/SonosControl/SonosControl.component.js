'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ButtonIconControl = require('bluerain-ui/lib/Controls/ButtonIconControl');

var _ButtonIconControl2 = _interopRequireDefault(_ButtonIconControl);

var _SliderControl = require('../ControlItems/SliderControl');

var _SliderControl2 = _interopRequireDefault(_SliderControl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  // player buttons
  play: _react.PropTypes.func,
  pause: _react.PropTypes.func,
  forward: _react.PropTypes.func,
  backward: _react.PropTypes.func,

  // Volume
  onVolumeChange: _react.PropTypes.func,
  volume: _react.PropTypes.number,
  disableVolume: _react.PropTypes.bool,
  minVolume: _react.PropTypes.number,
  maxVolume: _react.PropTypes.number,
  volumeStep: _react.PropTypes.number
};

var defaultProps = {
  // Volume
  onVolumeChange: function onVolumeChange() {},
  volume: 26,
  disableVolume: false,
  minVolume: 0,
  maxVolume: 100,
  volumeStep: 1
};

var SonosControlComponent = function (_React$Component) {
  _inherits(SonosControlComponent, _React$Component);

  function SonosControlComponent() {
    _classCallCheck(this, SonosControlComponent);

    return _possibleConstructorReturn(this, (SonosControlComponent.__proto__ || Object.getPrototypeOf(SonosControlComponent)).apply(this, arguments));
  }

  _createClass(SonosControlComponent, [{
    key: 'componentWillReceiveProps',


    // constructor(props) {
    //   super(props);
    //
    //   // this.state = {
    //   //   standby: props.standby,
    //   //   disableStandby: props.disableStandby,
    //   //   setpoint: props.setpoint,
    //   //   disableSetpoint: props.disableSetpoint,
    //   //   disableFanSpeed: props.disableFanSpeed,
    //   //   disableMode: props.disableMode
    //   // };
    // }

    value: function componentWillReceiveProps(props) {
      this.setState(props);
    }
  }, {
    key: 'getButtonsControl',
    value: function getButtonsControl() {
      //  const { standby, disableStandby } = this.state;

      return _react2.default.createElement(_ButtonIconControl2.default, {
        play: this.props.play,
        pause: this.props.pause,
        forward: this.props.forward,
        backward: this.props.backward
      });
    }
  }, {
    key: 'getVolumeControl',
    value: function getVolumeControl() {
      var _props = this.props,
          onVolumeChange = _props.onVolumeChange,
          volume = _props.volume,
          disableVolume = _props.disableVolume,
          minVolume = _props.minVolume,
          maxVolume = _props.maxVolume,
          volumeStep = _props.volumeStep;


      return _react2.default.createElement(_SliderControl2.default, {
        label: 'Volume',
        min: minVolume,
        max: maxVolume,
        step: volumeStep,
        value: volume,
        disabled: disableVolume,
        onDragStop: onVolumeChange,
        className: 'list-group-item'
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'card list-group device-control-list' },
        this.getButtonsControl(),
        this.getVolumeControl()
      );
    }
  }]);

  return SonosControlComponent;
}(_react2.default.Component);

exports.default = SonosControlComponent;


SonosControlComponent.propTypes = propTypes;
SonosControlComponent.defaultProps = defaultProps;