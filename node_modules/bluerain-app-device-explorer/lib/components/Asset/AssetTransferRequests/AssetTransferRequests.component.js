'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Table = require('reactstrap/lib/Table');

var _Table2 = _interopRequireDefault(_Table);

var _reactApollo = require('react-apollo');

var _withNotifications = require('../../Notifications/withNotifications');

var _GetOwnerEmailQuery = require('./GetOwnerEmailQuery.graphql');

var _GetOwnerEmailQuery2 = _interopRequireDefault(_GetOwnerEmailQuery);

var _OwnershipTransferStatusMutation = require('./OwnershipTransferStatusMutation.graphql');

var _OwnershipTransferStatusMutation2 = _interopRequireDefault(_OwnershipTransferStatusMutation);

var _OwnershipTransferIDMutation = require('./OwnershipTransferIDMutation.graphql');

var _OwnershipTransferIDMutation2 = _interopRequireDefault(_OwnershipTransferIDMutation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 2/24/17.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// import { withNotifications } from 'bluerain-client-services';


var propTypes = {
  onSubmit: _react.PropTypes.func,
  data: _react.PropTypes.object,
  // assetId: PropTypes.string,
  ownerId: _react.PropTypes.string,
  // userId: PropTypes.string,
  // mutate: PropTypes.func,
  // transferIDMutation: PropTypes.func,
  transferStatusMutation: _react.PropTypes.func,
  addNotification: _react.PropTypes.func,
  requests: _react.PropTypes.array,
  currentUserId: _react.PropTypes.string,
  notification: _react.PropTypes.object
};

var defaultProps = {};
var ownerEmail = void 0;
var statusOfRequest = void 0;
var currentUserId = void 0;
var requestedUserId = void 0;

var AssetTransferRequestsComponent = function (_React$Component) {
  _inherits(AssetTransferRequestsComponent, _React$Component);

  function AssetTransferRequestsComponent(props) {
    _classCallCheck(this, AssetTransferRequestsComponent);

    var _this = _possibleConstructorReturn(this, (AssetTransferRequestsComponent.__proto__ || Object.getPrototypeOf(AssetTransferRequestsComponent)).call(this, props));

    _this.state = {
      value: '',
      onSubmitCallback: props.onSubmit
    };
    _this.renderRequest = _this.renderRequest.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    _this.onSubmitReject = _this.onSubmitReject.bind(_this);
    return _this;
  }

  // Form on submit


  _createClass(AssetTransferRequestsComponent, [{
    key: 'onSubmit',
    value: function onSubmit(event) {
      // console.log('IN FORM', this.props);
      // console.log('AssetID', event.target.dataset.assetid);
      // console.log('AssetName', event.target.dataset.assetname);
      event.preventDefault();
      var addNotification = this.props.notification.addNotification;
      // const assetId = this.props.assetId;

      // const ownerVariables = {
      //   globalId: event.target.dataset.assetid,
      //   name: event.target.dataset.assetname,
      //   owner: this.props.ownerId
      // };

      // console.log('NEW VAR', ownerVariables)

      var variables = {
        globalId: event.target.dataset.idfield,
        status: 'Accepted'
      };
      // mutation to update transfer request
      this.props.transferStatusMutation({
        variables: variables
      });
      // this.props.transferIDMutation({
      //   ownerVariables
      // });
      addNotification({
        title: 'Success',
        message: 'Transfer Request is accepted',
        status: 'success',
        dismissible: true,
        dismissAfter: 5000,
        position: 'br',
        level: 'error'
      });
    }

    // Reject form on submit

  }, {
    key: 'onSubmitReject',
    value: function onSubmitReject(event) {
      event.preventDefault();
      var addNotification = this.props.notification.addNotification;
      // const assetId = this.props.assetId;

      var variables = {
        globalId: event.target.dataset.idfield,
        status: 'Rejected'
      };
      // mutation to update transfer request
      this.props.transferStatusMutation({
        variables: variables
      });
      addNotification({
        title: 'Success',
        message: 'Transfer Request is rejected',
        status: 'success',
        dismissible: true,
        dismissAfter: 5000,
        position: 'br',
        level: 'error'
      });
    }
  }, {
    key: 'renderRequest',
    value: function renderRequest(request, i) {
      try {
        var requestStatus = request.node.status;
        requestedUserId = request.node.newOwnerUserId;
        currentUserId = this.props.currentUserId;
        if (currentUserId !== requestedUserId) {
          statusOfRequest = _react2.default.createElement('tr', { key: i });
        } else if (requestStatus === 'Pending') {
          statusOfRequest = _react2.default.createElement(
            'tr',
            { key: i },
            _react2.default.createElement(
              'td',
              null,
              request.node.asset.name
            ),
            _react2.default.createElement(
              'td',
              null,
              ownerEmail
            ),
            _react2.default.createElement(
              'td',
              null,
              _react2.default.createElement(
                'form',
                {
                  style: { float: 'left', padding: '5px' }, 'data-assetId': request.node.asset.id,
                  'data-assetName': request.node.asset.name, 'data-idfield': request.node.id, onSubmit: this.onSubmit,
                  noValidate: true
                },
                _react2.default.createElement(
                  'button',
                  { type: 'submit', className: 'btn btn-primary' },
                  'Accept'
                )
              ),
              _react2.default.createElement(
                'div',
                { style: { float: 'left', padding: '5px' } },
                ' /'
              ),
              _react2.default.createElement(
                'form',
                {
                  style: { float: 'left', padding: '5px' }, 'data-idfield': request.node.id,
                  onSubmit: this.onSubmitReject, noValidate: true
                },
                _react2.default.createElement(
                  'button',
                  { type: 'submit', className: 'btn btn-primary' },
                  'Reject'
                )
              )
            )
          );
        } else if (requestStatus === 'Accepted') {
          statusOfRequest = _react2.default.createElement(
            'tr',
            { key: i },
            _react2.default.createElement(
              'td',
              null,
              request.node.asset.name
            ),
            _react2.default.createElement(
              'td',
              null,
              ownerEmail
            ),
            _react2.default.createElement(
              'td',
              null,
              'Approved'
            )
          );
        } else {
          statusOfRequest = _react2.default.createElement('tr', { key: i });
        }
        return statusOfRequest;
      } catch (e) {
        console.log('ERROR =>', e);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.data || !this.props.requests || !this.props.data.node) {
        return _react2.default.createElement('div', null);
      }
      ownerEmail = this.props.data.node.email;
      currentUserId = this.props.currentUserId;
      var requests = this.props.requests;
      if (requests.length > 0) {
        return _react2.default.createElement(
          _Table2.default,
          { id: 'requestsTable', inverse: true },
          _react2.default.createElement(
            'thead',
            null,
            _react2.default.createElement(
              'tr',
              null,
              _react2.default.createElement(
                'th',
                null,
                'Asset Name'
              ),
              _react2.default.createElement(
                'th',
                null,
                'Request Made By'
              ),
              _react2.default.createElement(
                'th',
                null,
                'Status'
              )
            )
          ),
          _react2.default.createElement(
            'tbody',
            null,
            requests.map(this.renderRequest)
          )
        );
      }
      return _react2.default.createElement(
        'div',
        { style: { paddingTop: '20px' } },
        _react2.default.createElement(
          'div',
          { className: 'alert alert-info', role: 'alert' },
          _react2.default.createElement(
            'strong',
            null,
            'Info!'
          ),
          ' There are currently no transfer ownership requests.'
        )
      );
    }
  }]);

  return AssetTransferRequestsComponent;
}(_react2.default.Component);

// export default UserInfoTransfer;

var componentWithQuery = (0, _reactApollo.graphql)(_GetOwnerEmailQuery2.default, {
  options: function options(_ref) {
    var ownerId = _ref.ownerId;
    return { variables: { ownerId: ownerId } };
  }
})(AssetTransferRequestsComponent);

// export default graphql(OwnershipTransferStatusMutation)(withNotifications(componentWithQuery));

exports.default = (0, _reactApollo.graphql)(_OwnershipTransferStatusMutation2.default, { name: 'transferStatusMutation' })((0, _reactApollo.graphql)(_OwnershipTransferIDMutation2.default, { name: 'transferIDMutation' })((0, _withNotifications.withNotifications)(componentWithQuery)));


AssetTransferRequestsComponent.propTypes = propTypes;
AssetTransferRequestsComponent.defaultProps = defaultProps;