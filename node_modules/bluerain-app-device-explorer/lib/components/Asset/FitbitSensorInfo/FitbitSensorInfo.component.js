'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFa = require('react-fa');

var _reactFa2 = _interopRequireDefault(_reactFa);

require('bluerain-bootstrap-theme/dist/css/components/data-list.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by anser on 12/26/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {};

var FitbitSensorInfo = function (_React$Component) {
  _inherits(FitbitSensorInfo, _React$Component);

  function FitbitSensorInfo() {
    _classCallCheck(this, FitbitSensorInfo);

    return _possibleConstructorReturn(this, (FitbitSensorInfo.__proto__ || Object.getPrototypeOf(FitbitSensorInfo)).apply(this, arguments));
  }

  _createClass(FitbitSensorInfo, [{
    key: 'render',
    value: function render() {
      // console.log('this.props.data.node: ' , this.props.data.node)

      if (!this.props.data.node || !this.props.data.node.state) {
        return _react2.default.createElement('div', null);
      }

      var _props$data$node$stat = this.props.data.node.state,
          connected = _props$data$node$stat.connected,
          duration = _props$data$node$stat.duration,
          distance = _props$data$node$stat.distance,
          calories = _props$data$node$stat.calories;


      return _react2.default.createElement(
        'ul',
        { className: 'list-group data-list' },
        FitbitSensorInfo.renderConnectionStatus(connected),
        FitbitSensorInfo.renderDuration(duration),
        FitbitSensorInfo.renderDistance(distance),
        FitbitSensorInfo.renderCalories(calories)
      );
    }
  }], [{
    key: 'hasAnySensorData',
    value: function hasAnySensorData() {
      var _props$data$node$stat2 = this.props.data.node.state,
          connected = _props$data$node$stat2.connected,
          duration = _props$data$node$stat2.duration,
          distance = _props$data$node$stat2.distance,
          calories = _props$data$node$stat2.calories,
          height = _props$data$node$stat2.height;


      if (connected !== undefined && connected !== null) {
        return true;
      } else if (duration !== undefined && duration !== null) {
        return true;
      } else if (distance !== undefined && distance !== null) {
        return true;
      } else if (calories !== undefined && calories !== null) {
        return true;
      } else if (height !== undefined && height !== null) {
        return true;
      }

      return false;
    }
  }, {
    key: 'renderConnectionStatus',
    value: function renderConnectionStatus(connected) {

      var status = null;

      if (connected === undefined || connected === null) {
        return _react2.default.createElement('div', null);
      } else if (connected) {
        status = _react2.default.createElement(
          'span',
          null,
          'Online ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-success' })
        );
      } else {
        status = _react2.default.createElement(
          'span',
          null,
          'Offline ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-danger' })
        );
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Status'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          status
        )
      );
    }
  }, {
    key: 'renderDuration',
    value: function renderDuration(duration) {
      if (duration === undefined || duration === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Duration'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          duration,
          ' ms'
        )
      );
    }
  }, {
    key: 'renderDistance',
    value: function renderDistance(distance) {
      if (distance === undefined || distance === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Distance'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          distance,
          ' M'
        )
      );
    }
  }, {
    key: 'renderCalories',
    value: function renderCalories(calories) {
      if (calories === undefined || calories === null) {
        return _react2.default.createElement('div', null);
      }

      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Calories Out'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          calories
        )
      );
    }
  }]);

  return FitbitSensorInfo;
}(_react2.default.Component);

exports.default = FitbitSensorInfo;


FitbitSensorInfo.propTypes = propTypes;
FitbitSensorInfo.defaultProps = defaultProps;