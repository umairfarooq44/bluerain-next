'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFa = require('react-fa');

var _reactFa2 = _interopRequireDefault(_reactFa);

require('bluerain-bootstrap-theme/dist/css/components/data-list.css');

var _clientOauth = require('client-oauth2');

var _clientOauth2 = _interopRequireDefault(_clientOauth);

var _reactApollo = require('react-apollo');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _GetServerDataMutation = require('./GetServerDataMutation.graphql');

var _GetServerDataMutation2 = _interopRequireDefault(_GetServerDataMutation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  data: _react.PropTypes.object,
  mutate: _react.PropTypes.func
};

var defaultProps = {};

var FitbitSensorInfo = function (_React$Component) {
  _inherits(FitbitSensorInfo, _React$Component);

  _createClass(FitbitSensorInfo, null, [{
    key: 'validateAuth',
    value: function validateAuth() {
      var fitbitAccessToken = localStorage.getItem('fitbit-access-token');
      var fitbitAccessTokenTime = localStorage.getItem('fitbit-access-token-time');
      var diff = -1;

      if (_moment2.default && fitbitAccessToken) {
        var timeNow = (0, _moment2.default)(new Date());
        var tokenTime = (0, _moment2.default)(fitbitAccessTokenTime);
        diff = timeNow.diff(tokenTime, 'hours');
      }

      // console.log('Fitbit Access Token Created', diff, ' hours ago.');

      if (!fitbitAccessToken || diff < 0 || diff >= 8) {
        var fitbitAuth = new _clientOauth2.default({
          clientId: '22844P',
          clientSecret: '4d3b2ce9b764c4539c6a0a0fef29b738',
          accessTokenUri: 'https://api.fitbit.com/oauth2/token',
          authorizationUri: 'https://www.fitbit.com/oauth2/authorize',
          redirectUri: 'http://localhost:9020/app/device-explorer/fitbit/callback',
          scopes: ['activity', 'heartrate', 'location', 'nutrition', 'sleep', 'weight']
        });
        var authHandlerUrl = '' + fitbitAuth.code.getUri();
        window.location = authHandlerUrl;
      }
    }
  }, {
    key: 'fetchDataFromServer',
    value: function fetchDataFromServer(assetId, deviceId, sourceUserId) {

      var variables = {
        type: 'command',
        data: { name: 'refresh', params: { activityDate: new Date() } },
        asset: assetId,
        device: deviceId,
        sourceUser: sourceUserId
      };

      this.props.mutate({
        variables: variables
      });
    }
  }, {
    key: 'renderConnectionStatus',
    value: function renderConnectionStatus(connected) {

      var status = null;

      if (typeof connected !== 'boolean') {
        return _react2.default.createElement('div', null);
      } else if (connected) {
        status = _react2.default.createElement(
          'span',
          null,
          'Online ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-success' })
        );
      } else {
        status = _react2.default.createElement(
          'span',
          null,
          'Offline ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-danger' })
        );
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Status'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          status
        )
      );
    }
  }, {
    key: 'renderHeartRate',
    value: function renderHeartRate(connected, restingHeartBeat) {
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Resting Heart Beat'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            restingHeartBeat
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderDistance',
    value: function renderDistance(connected, floors, elevation) {
      if (connected) {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'li',
            { className: 'list-group-item' },
            _react2.default.createElement(
              'div',
              { className: 'data-label' },
              'Floors'
            ),
            _react2.default.createElement(
              'div',
              { className: 'data-value' },
              floors
            )
          ),
          _react2.default.createElement(
            'li',
            { className: 'list-group-item' },
            _react2.default.createElement(
              'div',
              { className: 'data-label' },
              'Elevation'
            ),
            _react2.default.createElement(
              'div',
              { className: 'data-value' },
              elevation
            )
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderCalories',
    value: function renderCalories(connected, caloriesBMR, caloriesOut, activityCalories) {
      if (connected) {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'li',
            { className: 'list-group-item' },
            _react2.default.createElement(
              'div',
              { className: 'data-label' },
              'Calories BMR'
            ),
            _react2.default.createElement(
              'div',
              { className: 'data-value' },
              caloriesBMR
            )
          ),
          _react2.default.createElement(
            'li',
            { className: 'list-group-item' },
            _react2.default.createElement(
              'div',
              { className: 'data-label' },
              'Calories Out'
            ),
            _react2.default.createElement(
              'div',
              { className: 'data-value' },
              caloriesOut
            )
          ),
          _react2.default.createElement(
            'li',
            { className: 'list-group-item' },
            _react2.default.createElement(
              'div',
              { className: 'data-label' },
              'Activity Calories'
            ),
            _react2.default.createElement(
              'div',
              { className: 'data-value' },
              activityCalories
            )
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }]);

  function FitbitSensorInfo() {
    _classCallCheck(this, FitbitSensorInfo);

    var _this = _possibleConstructorReturn(this, (FitbitSensorInfo.__proto__ || Object.getPrototypeOf(FitbitSensorInfo)).call(this));

    FitbitSensorInfo.fetchDataFromServer = FitbitSensorInfo.fetchDataFromServer.bind(_this);
    return _this;
  }

  _createClass(FitbitSensorInfo, [{
    key: 'render',
    value: function render() {

      FitbitSensorInfo.validateAuth();

      if (!this.props.data.node || !this.props.data.node.state) {
        return _react2.default.createElement('div', null);
      }

      var _props$data$node$stat = this.props.data.node.state,
          connected = _props$data$node$stat.connected,
          caloriesBMR = _props$data$node$stat.caloriesBMR,
          caloriesOut = _props$data$node$stat.caloriesOut,
          activityCalories = _props$data$node$stat.activityCalories,
          restingHeartRate = _props$data$node$stat.restingHeartRate,
          elevation = _props$data$node$stat.elevation,
          floors = _props$data$node$stat.floors;

      // TODO Please make it dynamic

      var assetId = 'QXNzZXQ6TTVVZVFQVFpzdw==';
      var deviceId = 'RGV2aWNlOlV6NkhxaVNtOUM=';
      var sourceUserId = 'VXNlcjpsVHlIUW10RmRj';

      FitbitSensorInfo.fetchDataFromServer(assetId, deviceId, sourceUserId);

      return _react2.default.createElement(
        'ul',
        { className: 'list-group data-list' },
        FitbitSensorInfo.renderConnectionStatus(connected),
        FitbitSensorInfo.renderHeartRate(connected, restingHeartRate),
        FitbitSensorInfo.renderDistance(connected, floors, elevation),
        FitbitSensorInfo.renderCalories(connected, caloriesBMR, caloriesOut, activityCalories)
      );
    }
  }]);

  return FitbitSensorInfo;
}(_react2.default.Component);

FitbitSensorInfo.propTypes = propTypes;
FitbitSensorInfo.defaultProps = defaultProps;

exports.default = (0, _reactApollo.graphql)(_GetServerDataMutation2.default)(FitbitSensorInfo);