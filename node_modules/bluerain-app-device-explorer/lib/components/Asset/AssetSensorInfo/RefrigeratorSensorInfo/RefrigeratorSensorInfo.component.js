'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactFa = require('react-fa');

var _reactFa2 = _interopRequireDefault(_reactFa);

require('bluerain-bootstrap-theme/dist/css/components/data-list.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import DataListComponent from '../DataList/DataList.component';

var propTypes = {
  data: _react.PropTypes.object
};

var defaultProps = {};

var RefrigeratorSensorInfo = function (_React$Component) {
  _inherits(RefrigeratorSensorInfo, _React$Component);

  function RefrigeratorSensorInfo() {
    _classCallCheck(this, RefrigeratorSensorInfo);

    return _possibleConstructorReturn(this, (RefrigeratorSensorInfo.__proto__ || Object.getPrototypeOf(RefrigeratorSensorInfo)).apply(this, arguments));
  }

  _createClass(RefrigeratorSensorInfo, [{
    key: 'render',
    value: function render() {
      if (!this.props.data.node || !this.props.data.node.state) {
        return _react2.default.createElement('div', null);
      }

      var _props$data$node$stat = this.props.data.node.state,
          connected = _props$data$node$stat.connected,
          temperature = _props$data$node$stat.temperature,
          current = _props$data$node$stat.current,
          power = _props$data$node$stat.power,
          voltage = _props$data$node$stat.voltage,
          color = _props$data$node$stat.color,
          standby = _props$data$node$stat.standby;


      return _react2.default.createElement(
        'ul',
        { className: 'list-group data-list' },
        RefrigeratorSensorInfo.renderConnectionStatus(connected),
        RefrigeratorSensorInfo.renderColor(color, connected),
        RefrigeratorSensorInfo.renderAmbientTemperature(temperature, connected),
        RefrigeratorSensorInfo.renderCurrent(current, connected, standby),
        RefrigeratorSensorInfo.renderPower(power, connected, standby),
        RefrigeratorSensorInfo.renderVoltage(voltage, connected, standby)
      );
    }
  }], [{
    key: 'renderConnectionStatus',
    value: function renderConnectionStatus(connected) {

      var status = null;

      if (typeof connected !== 'boolean') {
        return _react2.default.createElement('div', null);
      } else if (connected) {
        status = _react2.default.createElement(
          'span',
          null,
          'Online ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-success' })
        );
      } else {
        status = _react2.default.createElement(
          'span',
          null,
          'Offline ',
          _react2.default.createElement(_reactFa2.default, { name: 'circle text-danger' })
        );
      }
      return _react2.default.createElement(
        'li',
        { className: 'list-group-item' },
        _react2.default.createElement(
          'div',
          { className: 'data-label' },
          'Status'
        ),
        _react2.default.createElement(
          'div',
          { className: 'data-value' },
          status
        )
      );
    }
  }, {
    key: 'renderAmbientTemperature',
    value: function renderAmbientTemperature(temperature, connected) {
      if (typeof temperature !== 'number') {
        return _react2.default.createElement('div', null);
      }
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Temperature'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            temperature.toFixed(0),
            ' \u2103'
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderColor',
    value: function renderColor(color, connected) {
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Color'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            color
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderCurrent',
    value: function renderCurrent(current, connected, standby) {
      if (typeof current !== 'number') {
        return _react2.default.createElement('div', null);
      }
      if (standby) {
        return _react2.default.createElement('div', null);
      }
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Current'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            current.toFixed(2),
            ' A'
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderPower',
    value: function renderPower(power, connected, standby) {
      if (typeof power !== 'number') {
        return _react2.default.createElement('div', null);
      }
      if (standby) {
        return _react2.default.createElement('div', null);
      }
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Power'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            power.toFixed(0),
            ' W'
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }, {
    key: 'renderVoltage',
    value: function renderVoltage(voltage, connected, standby) {
      if (typeof voltage !== 'number') {
        return _react2.default.createElement('div', null);
      }
      if (standby) {
        return _react2.default.createElement('div', null);
      }
      if (connected) {
        return _react2.default.createElement(
          'li',
          { className: 'list-group-item' },
          _react2.default.createElement(
            'div',
            { className: 'data-label' },
            'Voltage'
          ),
          _react2.default.createElement(
            'div',
            { className: 'data-value' },
            voltage.toFixed(0),
            ' V'
          )
        );
      }
      return _react2.default.createElement('div', null);
    }
  }]);

  return RefrigeratorSensorInfo;
}(_react2.default.Component);

exports.default = RefrigeratorSensorInfo;


RefrigeratorSensorInfo.propTypes = propTypes;
RefrigeratorSensorInfo.defaultProps = defaultProps;