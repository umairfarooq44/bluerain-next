'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _AreaChartAxis = require('bluerain-ui/lib/Card/ChartCard/AreaChartAxis.component');

var _AreaChartAxis2 = _interopRequireDefault(_AreaChartAxis);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by atif on 12/18/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


// import moment from 'moment';
// import { Table } from 'reactstrap';

var propTypes = {
  data: _react.PropTypes.array,
  x: _react.PropTypes.string,
  y: _react.PropTypes.func,
  color: _react.PropTypes.string,
  tooltip: _react.PropTypes.bool
};

var defaultProps = {
  data: []
};
var records = void 0;
var fillColor = void 0;

var CurrentReportComponent = function (_React$Component) {
  _inherits(CurrentReportComponent, _React$Component);

  function CurrentReportComponent() {
    _classCallCheck(this, CurrentReportComponent);

    return _possibleConstructorReturn(this, (CurrentReportComponent.__proto__ || Object.getPrototypeOf(CurrentReportComponent)).apply(this, arguments));
  }

  _createClass(CurrentReportComponent, [{
    key: 'render',
    value: function render() {
      try {
        records = this.props.data;
        fillColor = '#C84DD6';
      } catch (error) {
        console.info('Current Report: no data found');
      }

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { style: { width: '100%', margin: '0 auto' } },
          _react2.default.createElement(_AreaChartAxis2.default, {
            data: records,
            x: this.props.x,
            y: this.props.y,
            tooltip: this.props.tooltip,
            height: 300,
            fillColor: fillColor,
            strokeColor: this.props.color,
            dateFormat: 'DD, MMM YYYY, hh:mm:ss a',
            interpolation: 'basis'
          })
        )
      );
    }
  }]);

  return CurrentReportComponent;
}(_react2.default.Component);

exports.default = CurrentReportComponent;


CurrentReportComponent.propTypes = propTypes;
CurrentReportComponent.defaultProps = defaultProps;