'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _componentList = require('./componentList');

var _componentList2 = _interopRequireDefault(_componentList);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var singleton = Symbol('singleton');
var singletonEnforcer = Symbol('singleton-enforcer');

/**
 * Component registery is going to require 2 things
 * 1) Name of components
 * 2) Type/device of components
 */

var ComponentRegistry = function () {
  function ComponentRegistry(enforcer) {
    _classCallCheck(this, ComponentRegistry);

    if (enforcer !== singletonEnforcer) {
      // console.log('cant create another instance');
    }
    this.components = {};
  }

  /**
   * if everything is given, add component and return it back.
   * else return error object with 1 as code
   */


  _createClass(ComponentRegistry, [{
    key: 'addComponent',
    value: function addComponent(name, type, comp) {
      if (name && type && comp) {
        if (!this.components[name]) this.components[name] = {};

        this.components[name][type] = comp;
        // console.log(`component ${name}.${type} added - `, this.components);
        return {
          error: 0,
          content: this.getComponent(name, type)
        };
      }

      return {
        error: 1,
        content: 'Something is null, Name: ' + name + ', Type: ' + type + ', Comp: ' + comp
      };
    }

    /**
     * Return component;
     */

  }, {
    key: 'getComponent',
    value: function getComponent(name, type) {
      if (name && type) {
        if (!this.components[name]) this.components[name] = {};

        var content = this.components[name][type];
        if (!content) {
          return { error: 1, content: 'Component of Name: ' + name + ' & Type: ' + type + ' not found' };
        }
        return { error: 0, content: content };
      }

      return { error: 1, content: 'Something passed null, name: ' + name + ' or type: ' + type };
    }
  }, {
    key: 'removeComponent',
    value: function removeComponent(name, type) {
      if (name && type) {
        if (this.components[name][type]) {
          delete this.components[name][type];
          return {
            error: 0,
            content: 'Deleted component ' + name + '.' + type
          };
        }
        return {
          error: 1,
          content: 'Component ' + name + '.' + type + ' not found'
        };
      }
      return {
        error: 1,
        content: 'something passed null, Name: ' + name + ', Type: ' + type
      };
    }
  }], [{
    key: 'instance',
    get: function get() {
      if (!this[singleton]) {
        var componentRegistry = this[singleton] = new ComponentRegistry(singletonEnforcer);

        _componentList2.default.forEach(function (component) {
          componentRegistry.addComponent(component.name, component.type, component.element);
        });
      }
      return this[singleton];
    }
  }]);

  return ComponentRegistry;
}();

exports.default = ComponentRegistry.instance;